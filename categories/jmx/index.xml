<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jmx on rmoff&#39;s random ramblings2</title>
    <link>https://rmoff.net/categories/jmx/</link>
    <description>Recent content in jmx on rmoff&#39;s random ramblings2</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Sep 2018 08:11:00 +0000</lastBuildDate><atom:link href="https://rmoff.net/categories/jmx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploring JMX with jmxterm</title>
      <link>https://rmoff.net/2018/09/19/exploring-jmx-with-jmxterm/</link>
      <pubDate>Wed, 19 Sep 2018 08:11:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2018/09/19/exploring-jmx-with-jmxterm/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Check out the &lt;a href=&#34;https://github.com/jiaqi/jmxterm/&#34;&gt;jmxterm repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download jmxterm from &lt;a href=&#34;https://docs.cyclopsgroup.org/jmxterm&#34;&gt;https://docs.cyclopsgroup.org/jmxterm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Accessing Kafka Docker containers&#39; JMX from host</title>
      <link>https://rmoff.net/2018/09/17/accessing-kafka-docker-containers-jmx-from-host/</link>
      <pubDate>Mon, 17 Sep 2018 15:29:48 +0000</pubDate>
      
      <guid>https://rmoff.net/2018/09/17/accessing-kafka-docker-containers-jmx-from-host/</guid>
      <description>See also docs.
To help future Googlersâ€¦ with the Confluent docker images for Kafka, KSQL, Kafka Connect, etc, if you want to access JMX metrics from within, you just need to pass two environment variables: &amp;lt;x&amp;gt;_JMX_HOSTNAME and &amp;lt;x&amp;gt;_JMX_PORT, prefixed by a component name.
&amp;lt;x&amp;gt;_JMX_HOSTNAME - the hostname/IP of the JMX host machine, as accessible from the JMX Client.
This is used by the JMX client to connect back into JMX, so must be accessible from the host machine running the JMX client.</description>
    </item>
    
    <item>
      <title>Visualising OBIEE DMS Metrics over the years</title>
      <link>https://rmoff.net/2016/02/26/visualising-obiee-dms-metrics-over-the-years/</link>
      <pubDate>Fri, 26 Feb 2016 17:54:54 +0000</pubDate>
      
      <guid>https://rmoff.net/2016/02/26/visualising-obiee-dms-metrics-over-the-years/</guid>
      <description>It struck me today when I was writing my most recent blog over at Rittman Mead that I&amp;rsquo;ve been playing with visualising OBIEE metrics for years now.
Back in 2009 I wrote about using something called JManage to pull metrics out of OBIEE 10g via JMX:
Still with OBIEE 10g in 2011, I was using rrdtool and some horrible-looking tcl hacking to get the metrics out through jmx :
2014 brought with it DMS and my first forays with Graphite for storing &amp;amp; visualising data:</description>
    </item>
    
    <item>
      <title>OBIEE Systems Management - dodgy counter behaviour</title>
      <link>https://rmoff.net/2011/03/08/obiee-systems-management-dodgy-counter-behaviour/</link>
      <pubDate>Tue, 08 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2011/03/08/obiee-systems-management-dodgy-counter-behaviour/</guid>
      <description>Over the last few months I&amp;rsquo;ve been doing a lot of exploring of OBIEE Systems Management data, covered in a mini-series of blog posts, Collecting OBIEE systems management data.
There are a vast number of counters exposed, ranging from the very interesting (Active Sessions, Cache Hits, etc) to the less so (Total Query Piggybacks, although for some seriously hardcore performance tuning even this may be of interest).
This short blog post is about a couple of counters which I&amp;rsquo;ve been monitoring but which looks to not be entirely reliable.</description>
    </item>
    
    <item>
      <title>Shiny new geek toys -- rrdtool and screen</title>
      <link>https://rmoff.net/2011/03/01/shiny-new-geek-toys--rrdtool-and-screen/</link>
      <pubDate>Tue, 01 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2011/03/01/shiny-new-geek-toys--rrdtool-and-screen/</guid>
      <description>I&amp;rsquo;ve added two new toys to my geek arsenal today. First is one with which I&amp;rsquo;ve dabbled before, but struggled to master. The second is a revelation to me and which I discovered courtesy of twitter.
rrdtool rrdtool is a data collection and graphing tool which I&amp;rsquo;ve been aware of for a while. I wanted to use it when I wrote about Collecting OBIEE systems management data with JMX, but couldn&amp;rsquo;t get it to work.</description>
    </item>
    
    <item>
      <title>Adding OBIEE monitoring graphs into OAS</title>
      <link>https://rmoff.net/2010/12/06/adding-obiee-monitoring-graphs-into-oas/</link>
      <pubDate>Mon, 06 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2010/12/06/adding-obiee-monitoring-graphs-into-oas/</guid>
      <description>Introduction This is the third part of three detailed articles making up a mini-series about OBIEE monitoring. It demonstrates how to capture OBIEE performance information, and optionally graph it out and serve it through an auto-updating webpage.
This final article describes how to bolt on to OAS a simple web page hosting the graphs that you created in part 2, plotting data from OBIEE collected in part 1.
The webpage This is just an old-school basic HTML page, with a meta-refresh tag (which note that Chrome doesn&amp;rsquo;t work with) and img tags:</description>
    </item>
    
    <item>
      <title>Charting OBIEE performance data with gnuplot</title>
      <link>https://rmoff.net/2010/12/06/charting-obiee-performance-data-with-gnuplot/</link>
      <pubDate>Mon, 06 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2010/12/06/charting-obiee-performance-data-with-gnuplot/</guid>
      <description>Introduction This is the second part of three detailed articles making up a mini-series about OBIEE monitoring. It demonstrates how to capture OBIEE performance information, and optionally graph it out and serve it through an auto-updating webpage.
This article takes data that part one showed you how to collect into a tab-separated file that looks something like this:
[sourcecode] 2010-11-29-14:48:18 1 0 11 0 3 2 1 676 340 0 53 1 0 41 0 3 0 2010-11-29-14:49:18 1 0 11 0 3 2 1 676 0 0 0 1 0 0 0 3 0 2010-11-29-14:50:18 2 0 16 1 4 3 1 679 0 0 0 1 0 0 0 4 0 2010-11-29-14:51:18 2 2 19 1 4 3 1 679 32 0 53 1 0 58 0 4 0 2010-11-29-14:52:18 2 1 19 1 4 3 4 682 0 0 0 1 0 0 0 4 0 2010-11-29-14:53:18 2 1 19 1 4 3 4 682 0 0 0 1 0 0 0 4 0 2010-11-29-14:54:18 2 0 19 1 4 3 1 682 0 0 0 1 0 0 0 4 0 [/sourcecode]</description>
    </item>
    
    <item>
      <title>Collecting OBIEE systems management data with jmx</title>
      <link>https://rmoff.net/2010/12/06/collecting-obiee-systems-management-data-with-jmx/</link>
      <pubDate>Mon, 06 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2010/12/06/collecting-obiee-systems-management-data-with-jmx/</guid>
      <description>Introduction This is the first part of three detailed articles making up a mini-series about OBIEE monitoring. It demonstrates how to capture OBIEE performance information, and optionally graph it out and serve it through an auto-updating webpage.
For some background on OBIEE&amp;rsquo;s Systems Management component, along with JMX and MBeans, see here and here. The following assumes you know your mbeans from coffee beans and jmx from a bmx.
The metric collection is built around the jmxsh tool.</description>
    </item>
    
    <item>
      <title>OBIEE monitoring</title>
      <link>https://rmoff.net/2010/12/06/obiee-monitoring/</link>
      <pubDate>Mon, 06 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2010/12/06/obiee-monitoring/</guid>
      <description>Those of you who read my blog regularly may have noticed I have a slight obsession with the OBIEE systems management capability which is exposed through JMX. Venkat has blogged this week about JMX in OBI11g, and it&amp;rsquo;s clearly a technology worth understanding properly. I&amp;rsquo;ve recently been tinkering with how to make use of it for monitoring purposes, most recently using JConsole and discussed here. What follows is an extension of this idea, cobbled together with a bit of shell scripting, awk, gnuplot, and sticky backed plastic.</description>
    </item>
    
    <item>
      <title>A Poor Man&#39;s OBIEE EM/BI Management Pack</title>
      <link>https://rmoff.net/2010/11/04/a-poor-mans-obiee-em/bi-management-pack/</link>
      <pubDate>Thu, 04 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2010/11/04/a-poor-mans-obiee-em/bi-management-pack/</guid>
      <description>Folk from Yorkshire are tight, so the stereotype goes. So here&amp;rsquo;s a cheap-ass way to monitor OBIEE 10g using nothing but the OBIEE built-in systemsmanagement component, the jmx agent, and jconsole (which is part of the standard Java distribution):
From here you can also export to CSV the various counters, and then store history, plot it out with gnuplot or Excel, etc.
If anyone&amp;rsquo;s interested let me know and I&amp;rsquo;ll document a bit more about how I did this, but it&amp;rsquo;s basically building on previous work I&amp;rsquo;ve documented around jmx and OBIEE.</description>
    </item>
    
    <item>
      <title>Securing OBIEE Systems Management JMX for remote access</title>
      <link>https://rmoff.net/2010/03/05/securing-obiee-systems-management-jmx-for-remote-access/</link>
      <pubDate>Fri, 05 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2010/03/05/securing-obiee-systems-management-jmx-for-remote-access/</guid>
      <description>JMX OBIEE&amp;rsquo;s Systems Management functionality exposes performance counters and the application&amp;rsquo;s configuration options through Java MBeans and optionally a protocol called JMX.
It&amp;rsquo;s extremely useful, and is documented pretty widely :
JConsole / JMX JConsole / JMX â€“ followup Oracle BI Management / Systems Management MBeans PerfMon OBIEE MBeans and OC4J OBIEE performance monitoring and alerting with jManage In this article I&amp;rsquo;m going to discuss the use of JMX to access these counters remotely, and a possible security issue that&amp;rsquo;s present in the BI Management Pack manual.</description>
    </item>
    
    <item>
      <title>OBIEE performance monitoring and alerting with jManage</title>
      <link>https://rmoff.net/2009/07/29/obiee-performance-monitoring-and-alerting-with-jmanage/</link>
      <pubDate>Wed, 29 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2009/07/29/obiee-performance-monitoring-and-alerting-with-jmanage/</guid>
      <description>OBIEE&amp;rsquo;s Systems Management component exposes configuration and performance data through Java MBeans. As discussed in other posts these can be be accessed through several different ways:
JConsole (see also here) oc4j Windows PerfMon (although I guess this isn&amp;rsquo;t actually using MBeans/JMX?) saw.dll?perfmon BI Management Pack Since it&amp;rsquo;s a standard java technology being used we can in theory use anything that is designed for monitoring mbeans via jmx. Doing some Googling I discovered jManage.</description>
    </item>
    
    <item>
      <title>Oracle BI Management / Systems Management MBeans</title>
      <link>https://rmoff.net/2009/07/22/oracle-bi-management-/-systems-management-mbeans/</link>
      <pubDate>Wed, 22 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2009/07/22/oracle-bi-management-/-systems-management-mbeans/</guid>
      <description>Part of looking at the various gubbins inside OBIEE led me to realise that the Oracle BI Management application drives quite a few things. It exposes MBeans (Management Beans, a java term), accessible through jmx. In the installation of OBIEE this component is referred to as &amp;ldquo;Systems Management&amp;rdquo;.
The MBeans give us real-time performance information, along with access to all the configuration options that are normally done through config files (instanceconfig.</description>
    </item>
    
    <item>
      <title>JConsole / JMX - followup</title>
      <link>https://rmoff.net/2009/07/21/jconsole-/-jmx-followup/</link>
      <pubDate>Tue, 21 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2009/07/21/jconsole-/-jmx-followup/</guid>
      <description>A few points to add to my previous posting on JConsole:
As well as performance data, you have access to configuration data. Be aware that it is read-write! So whilst it might be a nice alternative to digging around for your instanceconfig.xml etc, you should be careful If you have your BI Server and Presentation Services deployed on separate servers then you will only get MBeans for the relevant service: If you want to view the values of the BI Server MBeans and your Presentation Services server is not on the same box then you have to use JConsole/JMX, as Performance Monitor will not have access to the values: ](http://2.</description>
    </item>
    
    <item>
      <title>JConsole / JMX</title>
      <link>https://rmoff.net/2009/07/16/jconsole-/-jmx/</link>
      <pubDate>Thu, 16 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2009/07/16/jconsole-/-jmx/</guid>
      <description>[edit] See this post too [/edit] On an OBIEE server run [sourcecode language=&amp;ldquo;bash&amp;rdquo;] nohup obiee/systemsmanagement/runagent.sh &amp;amp; [/sourcecode] and then run jconsole (make sure you&amp;rsquo;ve set the DISPLAY first if you&amp;rsquo;re running it from UNIX). NB: if you don&amp;rsquo;t have jconsole in your path you can search for it: [sourcecode language=&amp;ldquo;bash&amp;rdquo;] $whereis jconsole jconsole: /opt/java1.5/bin/jconsole /opt/java6/bin/jconsole&amp;lt;/span&amp;gt; [/sourcecode] You should find it under your java/bin directory
You should get this kind of connection dialog: Click connect, and the console will launch.</description>
    </item>
    
  </channel>
</rss>
