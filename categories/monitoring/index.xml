<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Monitoring on rmoff&#39;s random ramblings</title>
    <link>https://rmoff.net/categories/monitoring/</link>
    <description>Recent content in Monitoring on rmoff&#39;s random ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Apr 2020 00:51:18 +0100</lastBuildDate><atom:link href="https://rmoff.net/categories/monitoring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A quick and dirty way to monitor data arriving on Kafka</title>
      <link>https://rmoff.net/2020/04/16/a-quick-and-dirty-way-to-monitor-data-arriving-on-kafka/</link>
      <pubDate>Thu, 16 Apr 2020 00:51:18 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/04/16/a-quick-and-dirty-way-to-monitor-data-arriving-on-kafka/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I’ve been poking around recently with &lt;a href=&#34;https://rmoff.net/2020/03/11/streaming-wi-fi-trace-data-from-raspberry-pi-to-apache-kafka-with-confluent-cloud/&#34;&gt;capturing Wi-Fi packet data&lt;/a&gt; and streaming it into Apache Kafka, from where I’m processing and analysing it. Kafka itself is rock-solid - because I’m using &lt;a href=&#34;https://confluent.cloud/signup&#34;&gt;☁️Confluent Cloud&lt;/a&gt; and someone else worries about provisioning it, scaling it, and keeping it running for me. But whilst Kafka works just great, my side of the setup—&lt;code&gt;tshark&lt;/code&gt; running on a Raspberry Pi—is less than stable. For whatever reason it sometimes stalls and I have to restart the Raspberry Pi and restart the capture process.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Monitoring Logstash Ingest Rates with Elasticsearch, Kibana, and Timelion</title>
      <link>https://rmoff.net/2016/05/13/monitoring-logstash-ingest-rates-with-elasticsearch-kibana-and-timelion/</link>
      <pubDate>Fri, 13 May 2016 05:45:19 +0000</pubDate>
      
      <guid>https://rmoff.net/2016/05/13/monitoring-logstash-ingest-rates-with-elasticsearch-kibana-and-timelion/</guid>
      <description>Yesterday I wrote about Monitoring Logstash Ingest Rates with InfluxDB and Grafana, in which InfluxDB provided the data store for the ingest rate data, and Grafana the frontend.
Mark Walkom reminded me on twitter that the next release of Logstash will add more functionality in this area - and that it&amp;rsquo;ll integrate back into the Elastic stack:
@rmoff nice, LS 5.0 will have APIs exposing metrics too. they’ll be integrated back into Marvel/Monitoring!</description>
    </item>
    
    <item>
      <title>Monitoring Logstash Ingest Rates with InfluxDB and Grafana</title>
      <link>https://rmoff.net/2016/05/12/monitoring-logstash-ingest-rates-with-influxdb-and-grafana/</link>
      <pubDate>Thu, 12 May 2016 20:56:38 +0000</pubDate>
      
      <guid>https://rmoff.net/2016/05/12/monitoring-logstash-ingest-rates-with-influxdb-and-grafana/</guid>
      <description>In this article I&amp;rsquo;m going to show you how to easily monitor the rate at which Logstash is ingesting data, as well as in future articles the rate at which Elasticsearch is indexing it. It&amp;rsquo;s a nice little touch to add to any project involving Logstash, and it&amp;rsquo;s easy to do.
Logstash is powerful tool for data ingest, processing, and distribution. It originated as simply the pipe to slurp at log files and put them into Elasticsearch, but has evolved into a whole bunch more.</description>
    </item>
    
    <item>
      <title>Instrumenting OBIEE - the final chapter</title>
      <link>https://rmoff.net/2011/10/10/instrumenting-obiee-the-final-chapter/</link>
      <pubDate>Mon, 10 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2011/10/10/instrumenting-obiee-the-final-chapter/</guid>
      <description>This article has been superseded by a newer version: Instrumenting OBIEE Database Connections For Improved Performance Diagnostics (Previously on this blog: 1, 2, 3&amp;hellip;)
Summary Instrument your code. Stop guessing. Make your DBA happy. Make your life as a BI Admin easier.
The Problem OBIEE will typically connect to the database using a generic application account. (Hopefully, you&amp;rsquo;ll have isolated it to an account used only for this purpose - if you haven&amp;rsquo;t, you should.</description>
    </item>
    
    <item>
      <title>Instrumenting OBIEE for tracing Oracle DB calls</title>
      <link>https://rmoff.net/2011/02/02/instrumenting-obiee-for-tracing-oracle-db-calls/</link>
      <pubDate>Wed, 02 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2011/02/02/instrumenting-obiee-for-tracing-oracle-db-calls/</guid>
      <description>Cary Millsap recently published a paper &amp;ldquo;Mastering Performance with Extended SQL Trace&amp;rdquo; describing how to use Oracle trace to assist with troubleshooting the performance of database queries. As with all of Cary Millsap&amp;rsquo;s papers it is superbly written, presenting very detailed information in a clear and understandable way. (and yes I do have a DBA crush ;-)) It discusses how you can automate the tracing of specific sessions on the database, and requiring the application to be appropriately instrumented.</description>
    </item>
    
    <item>
      <title>Adding OBIEE monitoring graphs into OAS</title>
      <link>https://rmoff.net/2010/12/06/adding-obiee-monitoring-graphs-into-oas/</link>
      <pubDate>Mon, 06 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2010/12/06/adding-obiee-monitoring-graphs-into-oas/</guid>
      <description>Introduction This is the third part of three detailed articles making up a mini-series about OBIEE monitoring. It demonstrates how to capture OBIEE performance information, and optionally graph it out and serve it through an auto-updating webpage.
This final article describes how to bolt on to OAS a simple web page hosting the graphs that you created in part 2, plotting data from OBIEE collected in part 1.
The webpage This is just an old-school basic HTML page, with a meta-refresh tag (which note that Chrome doesn&amp;rsquo;t work with) and img tags:</description>
    </item>
    
    <item>
      <title>Charting OBIEE performance data with gnuplot</title>
      <link>https://rmoff.net/2010/12/06/charting-obiee-performance-data-with-gnuplot/</link>
      <pubDate>Mon, 06 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2010/12/06/charting-obiee-performance-data-with-gnuplot/</guid>
      <description>Introduction This is the second part of three detailed articles making up a mini-series about OBIEE monitoring. It demonstrates how to capture OBIEE performance information, and optionally graph it out and serve it through an auto-updating webpage.
This article takes data that part one showed you how to collect into a tab-separated file that looks something like this:
[sourcecode] 2010-11-29-14:48:18 1 0 11 0 3 2 1 676 340 0 53 1 0 41 0 3 0 2010-11-29-14:49:18 1 0 11 0 3 2 1 676 0 0 0 1 0 0 0 3 0 2010-11-29-14:50:18 2 0 16 1 4 3 1 679 0 0 0 1 0 0 0 4 0 2010-11-29-14:51:18 2 2 19 1 4 3 1 679 32 0 53 1 0 58 0 4 0 2010-11-29-14:52:18 2 1 19 1 4 3 4 682 0 0 0 1 0 0 0 4 0 2010-11-29-14:53:18 2 1 19 1 4 3 4 682 0 0 0 1 0 0 0 4 0 2010-11-29-14:54:18 2 0 19 1 4 3 1 682 0 0 0 1 0 0 0 4 0 [/sourcecode]</description>
    </item>
    
    <item>
      <title>Collecting OBIEE systems management data with jmx</title>
      <link>https://rmoff.net/2010/12/06/collecting-obiee-systems-management-data-with-jmx/</link>
      <pubDate>Mon, 06 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2010/12/06/collecting-obiee-systems-management-data-with-jmx/</guid>
      <description>Introduction This is the first part of three detailed articles making up a mini-series about OBIEE monitoring. It demonstrates how to capture OBIEE performance information, and optionally graph it out and serve it through an auto-updating webpage.
For some background on OBIEE&amp;rsquo;s Systems Management component, along with JMX and MBeans, see here and here. The following assumes you know your mbeans from coffee beans and jmx from a bmx.
The metric collection is built around the jmxsh tool.</description>
    </item>
    
    <item>
      <title>OBIEE monitoring</title>
      <link>https://rmoff.net/2010/12/06/obiee-monitoring/</link>
      <pubDate>Mon, 06 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2010/12/06/obiee-monitoring/</guid>
      <description>Those of you who read my blog regularly may have noticed I have a slight obsession with the OBIEE systems management capability which is exposed through JMX. Venkat has blogged this week about JMX in OBI11g, and it&amp;rsquo;s clearly a technology worth understanding properly. I&amp;rsquo;ve recently been tinkering with how to make use of it for monitoring purposes, most recently using JConsole and discussed here. What follows is an extension of this idea, cobbled together with a bit of shell scripting, awk, gnuplot, and sticky backed plastic.</description>
    </item>
    
    <item>
      <title>A Poor Man&#39;s OBIEE EM/BI Management Pack</title>
      <link>https://rmoff.net/2010/11/04/a-poor-mans-obiee-em/bi-management-pack/</link>
      <pubDate>Thu, 04 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2010/11/04/a-poor-mans-obiee-em/bi-management-pack/</guid>
      <description>Folk from Yorkshire are tight, so the stereotype goes. So here&amp;rsquo;s a cheap-ass way to monitor OBIEE 10g using nothing but the OBIEE built-in systemsmanagement component, the jmx agent, and jconsole (which is part of the standard Java distribution):
From here you can also export to CSV the various counters, and then store history, plot it out with gnuplot or Excel, etc.
If anyone&amp;rsquo;s interested let me know and I&amp;rsquo;ll document a bit more about how I did this, but it&amp;rsquo;s basically building on previous work I&amp;rsquo;ve documented around jmx and OBIEE.</description>
    </item>
    
    <item>
      <title>OBIEE performance monitoring and alerting with jManage</title>
      <link>https://rmoff.net/2009/07/29/obiee-performance-monitoring-and-alerting-with-jmanage/</link>
      <pubDate>Wed, 29 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2009/07/29/obiee-performance-monitoring-and-alerting-with-jmanage/</guid>
      <description>OBIEE&amp;rsquo;s Systems Management component exposes configuration and performance data through Java MBeans. As discussed in other posts these can be be accessed through several different ways:
JConsole (see also here) oc4j Windows PerfMon (although I guess this isn&amp;rsquo;t actually using MBeans/JMX?) saw.dll?perfmon BI Management Pack Since it&amp;rsquo;s a standard java technology being used we can in theory use anything that is designed for monitoring mbeans via jmx. Doing some Googling I discovered jManage.</description>
    </item>
    
    <item>
      <title>JConsole / JMX</title>
      <link>https://rmoff.net/2009/07/16/jconsole-/-jmx/</link>
      <pubDate>Thu, 16 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2009/07/16/jconsole-/-jmx/</guid>
      <description>[edit] See this post too [/edit] On an OBIEE server run [sourcecode language=&amp;ldquo;bash&amp;rdquo;] nohup obiee/systemsmanagement/runagent.sh &amp;amp; [/sourcecode] and then run jconsole (make sure you&amp;rsquo;ve set the DISPLAY first if you&amp;rsquo;re running it from UNIX). NB: if you don&amp;rsquo;t have jconsole in your path you can search for it: [sourcecode language=&amp;ldquo;bash&amp;rdquo;] $whereis jconsole jconsole: /opt/java1.5/bin/jconsole /opt/java6/bin/jconsole&amp;lt;/span&amp;gt; [/sourcecode] You should find it under your java/bin directory
You should get this kind of connection dialog: Click connect, and the console will launch.</description>
    </item>
    
  </channel>
</rss>
