<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on rmoff&#39;s random ramblings</title>
    <link>https://rmoff.net/categories/go/</link>
    <description>Recent content in Go on rmoff&#39;s random ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Aug 2020 10:00:05 +0100</lastBuildDate><atom:link href="https://rmoff.net/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ü§ñBuilding a Telegram bot with Apache Kafka, Go, and ksqlDB</title>
      <link>https://rmoff.net/2020/08/20/building-a-telegram-bot-with-apache-kafka-go-and-ksqldb/</link>
      <pubDate>Thu, 20 Aug 2020 10:00:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/08/20/building-a-telegram-bot-with-apache-kafka-go-and-ksqldb/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I had the pleasure of presenting at &lt;a href=&#34;https://dataengconf.com.au/&#34;&gt;DataEngBytes&lt;/a&gt; recently, and am delighted to share with you the &lt;strong&gt;üóíÔ∏è slides, üëæ code, and üé• recording&lt;/strong&gt; of my ‚ú®brand new talk‚ú®:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.dev/carpark-telegram-bot&#34;&gt;ü§ñBuilding a Telegram bot with Apache Kafka, Go, and ksqlDB&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S02E09 - Processing chunked responses before EOF is reached</title>
      <link>https://rmoff.net/2020/07/23/learning-golang-some-rough-notes-s02e09-processing-chunked-responses-before-eof-is-reached/</link>
      <pubDate>Thu, 23 Jul 2020 10:00:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/07/23/learning-golang-some-rough-notes-s02e09-processing-chunked-responses-before-eof-is-reached/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The server sends &lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt; data, and you want to work with the data &lt;strong&gt;as you get it&lt;/strong&gt;, instead of waiting for the server to finish, the EOF to fire, and &lt;em&gt;then&lt;/em&gt; process the data?&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S02E08 - Checking Kafka advertised.listeners with Go</title>
      <link>https://rmoff.net/2020/07/17/learning-golang-some-rough-notes-s02e08-checking-kafka-advertised.listeners-with-go/</link>
      <pubDate>Fri, 17 Jul 2020 17:00:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/07/17/learning-golang-some-rough-notes-s02e08-checking-kafka-advertised.listeners-with-go/</guid>
      <description>At the beginning of all this my aim was to learn something new (Go), and use it to write a version of a utility that I‚Äôd previously hacked together in Python that checks your Apache Kafka broker configuration for possible problems with the infamous advertised.listeners setting. Check out a blog that I wrote which explains all about Apache Kafka and listener configuration.
     You can find the code at https://github.</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S02E07 - Splitting Go code into separate source files and building a binary executable</title>
      <link>https://rmoff.net/2020/07/16/learning-golang-some-rough-notes-s02e07-splitting-go-code-into-separate-source-files-and-building-a-binary-executable/</link>
      <pubDate>Thu, 16 Jul 2020 11:00:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/07/16/learning-golang-some-rough-notes-s02e07-splitting-go-code-into-separate-source-files-and-building-a-binary-executable/</guid>
      <description>So far I‚Äôve been running all my code either in the Go Tour sandbox, using Go Playground, or from a single file in VS Code. My explorations in the previous article ended up with a a source file that was starting to get a little bit unwieldily, so let‚Äôs take a look at how that can be improved.
 Within my most recent code, I have the main function and the doProduce function, which is fine when collapsed down:</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S02E06 - Putting the Producer in a function and handling errors in a Go routine</title>
      <link>https://rmoff.net/2020/07/15/learning-golang-some-rough-notes-s02e06-putting-the-producer-in-a-function-and-handling-errors-in-a-go-routine/</link>
      <pubDate>Wed, 15 Jul 2020 14:00:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/07/15/learning-golang-some-rough-notes-s02e06-putting-the-producer-in-a-function-and-handling-errors-in-a-go-routine/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When I set out to &lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;learn Go&lt;/a&gt; one of the aims I had in mind was to write a version of &lt;a href=&#34;https://github.com/rmoff/kafka-listeners/blob/master/python/python_kafka_test_client.py&#34;&gt;this little Python utility&lt;/a&gt; which accompanies a blog I wrote recently about &lt;a href=&#34;https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc&#34;&gt;understanding and diagnosing problems with Kafka advertised listeners&lt;/a&gt;. Having successfully got &lt;a href=&#34;https://rmoff.net/2020/07/10/learning-golang-some-rough-notes-s02e02-adding-error-handling-to-the-producer/&#34;&gt;Producer&lt;/a&gt;, &lt;a href=&#34;https://rmoff.net/2020/07/14/learning-golang-some-rough-notes-s02e04-kafka-go-consumer-function-based/&#34;&gt;Consumer&lt;/a&gt;, and &lt;a href=&#34;https://rmoff.net/2020/07/15/learning-golang-some-rough-notes-s02e05-kafka-go-adminclient/&#34;&gt;AdminClient&lt;/a&gt; API examples working, it is now time to turn to that task.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S02E05 - Kafka Go AdminClient</title>
      <link>https://rmoff.net/2020/07/15/learning-golang-some-rough-notes-s02e05-kafka-go-adminclient/</link>
      <pubDate>Wed, 15 Jul 2020 11:00:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/07/15/learning-golang-some-rough-notes-s02e05-kafka-go-adminclient/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Having ticked off the basics with an Apache Kafka &lt;a href=&#34;https://rmoff.net/2020/07/10/learning-golang-some-rough-notes-s02e02-adding-error-handling-to-the-producer/&#34;&gt;producer&lt;/a&gt; and &lt;a href=&#34;https://rmoff.net/2020/07/14/learning-golang-some-rough-notes-s02e03-kafka-go-consumer-channel-based/&#34;&gt;consumer&lt;/a&gt; in Go, let‚Äôs now check out the AdminClient. This is useful for checking out metadata about the cluster, creating topics, and stuff like that.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S02E04 - Kafka Go Consumer (Function-based)</title>
      <link>https://rmoff.net/2020/07/14/learning-golang-some-rough-notes-s02e04-kafka-go-consumer-function-based/</link>
      <pubDate>Tue, 14 Jul 2020 13:59:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/07/14/learning-golang-some-rough-notes-s02e04-kafka-go-consumer-function-based/</guid>
      <description>Last time I looked at creating my first Apache Kafka consumer in Go, which used the now-deprecated channel-based consumer. Whilst idiomatic for Go, it has some issues which mean that the function-based consumer is recommended for use instead. So let‚Äôs go and use it!
 Instead of reading from the Events() channel of the consumer, we read events using the Poll() function with a timeout. The way we handle events (a switch based on their type) is the same:</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S02E03 - Kafka Go Consumer (Channel-based)</title>
      <link>https://rmoff.net/2020/07/14/learning-golang-some-rough-notes-s02e03-kafka-go-consumer-channel-based/</link>
      <pubDate>Tue, 14 Jul 2020 11:59:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/07/14/learning-golang-some-rough-notes-s02e03-kafka-go-consumer-channel-based/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Having written my first &lt;a href=&#34;https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e01-my-first-kafka-go-producer/&#34;&gt;Kafka producer in Go&lt;/a&gt;, and even &lt;a href=&#34;https://rmoff.net/2020/07/10/learning-golang-some-rough-notes-s02e02-adding-error-handling-to-the-producer/&#34;&gt;added error handling to it&lt;/a&gt;, the next step was to write a consumer. It follows closely the pattern of &lt;a href=&#34;https://rmoff.net/2020/07/10/learning-golang-some-rough-notes-s02e02-adding-error-handling-to-the-producer/&#34;&gt;Producer code I finished up with previously&lt;/a&gt;, using the channel-based approach for the &lt;a href=&#34;https://docs.confluent.io/current/clients/confluent-kafka-go/index.html#Consumer&#34;&gt;Consumer&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S02E02 - Adding error handling to the Producer</title>
      <link>https://rmoff.net/2020/07/10/learning-golang-some-rough-notes-s02e02-adding-error-handling-to-the-producer/</link>
      <pubDate>Fri, 10 Jul 2020 10:59:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/07/10/learning-golang-some-rough-notes-s02e02-adding-error-handling-to-the-producer/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I looked &lt;a href=&#34;https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e01-my-first-kafka-go-producer/&#34;&gt;last time&lt;/a&gt; at the very bare basics of writing a Kafka producer using Go. It worked, but only with everything lined up and pointing the right way. There was no error handling of any sorts. Let‚Äôs see about fixing this now.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S02E01 - My First Kafka Go Producer</title>
      <link>https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e01-my-first-kafka-go-producer/</link>
      <pubDate>Wed, 08 Jul 2020 17:59:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e01-my-first-kafka-go-producer/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S02E00 - Kafka and Go</title>
      <link>https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e00-kafka-and-go/</link>
      <pubDate>Wed, 08 Jul 2020 10:59:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e00-kafka-and-go/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With the first leg of my journey with Go &lt;a href=&#34;https://rmoff.net/2020/07/03/learning-golang-some-rough-notes-s01e10-concurrency-web-crawler/&#34;&gt;done&lt;/a&gt; (starting from a &lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;&lt;em&gt;very&lt;/em&gt; rudimentary base&lt;/a&gt;), the next step for me was to bring it into my current area of interest and work - Apache Kafka.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S01E10 - Concurrency (Web Crawler)</title>
      <link>https://rmoff.net/2020/07/03/learning-golang-some-rough-notes-s01e10-concurrency-web-crawler/</link>
      <pubDate>Fri, 03 Jul 2020 16:59:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/07/03/learning-golang-some-rough-notes-s01e10-concurrency-web-crawler/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;üëâ &lt;a href=&#34;https://tour.golang.org/concurrency/9&#34;&gt;A Tour of Go : sync.Mutex&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the &lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/&#34;&gt;previous exercise&lt;/a&gt; I felt my &lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;absence of a formal CompSci background&lt;/a&gt; with the introduction of Binary Sorted Trees, and now I am concious of it again with learning about mutex. I‚Äôd &lt;em&gt;heard&lt;/em&gt; of them before, mostly when Oracle performance folk were talking about wait types - TIL it stands for &lt;code&gt;mutual exclusion&lt;/code&gt;!&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S01E09 - Concurrency (Channels, Goroutines)</title>
      <link>https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/</link>
      <pubDate>Thu, 02 Jul 2020 16:59:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://tour.golang.org/concurrency/1&#34;&gt;A Tour of Go : Goroutines&lt;/a&gt; was OK but as with some previous material I headed over to &lt;a href=&#34;https://gobyexample.com/goroutines&#34;&gt;Go by example&lt;/a&gt; for clearer explanations.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S01E08 - Images</title>
      <link>https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e08-images/</link>
      <pubDate>Thu, 02 Jul 2020 14:59:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e08-images/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;üëâ &lt;a href=&#34;https://tour.golang.org/methods/25&#34;&gt;A Tour of Go : Exercise: Images&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is based on the Picture generator from the &lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/&#34;&gt;Slices exercise&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S01E07 - Readers</title>
      <link>https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e07-readers/</link>
      <pubDate>Wed, 01 Jul 2020 15:59:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e07-readers/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;üëâ &lt;a href=&#34;https://tour.golang.org/methods/21&#34;&gt;A Tour of Go : Readers&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I‚Äôm not intending to pick holes in the Tour‚Ä¶but it‚Äôs not helping itself ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For an introductory text, it makes a ton of assumptions about the user. Here it introduces Readers, and the explanation is good‚Äîbut the example code looks like this:&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S01E06 - Errors</title>
      <link>https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/</link>
      <pubDate>Wed, 01 Jul 2020 10:59:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;üëâ &lt;a href=&#34;https://tour.golang.org/methods/20&#34;&gt;A Tour of Go : Exercise: Errors&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Like Interfaces, the Tour didn‚Äôt really do it for me on Errors either. Too absract, and not enough explanation of the code examples for my liking. It also doesn‚Äôt cover the &lt;a href=&#34;https://golang.org/pkg/errors/&#34;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; package which other tutorial do. I‚Äôm not clear if that‚Äôs because the errors package isn‚Äôt used much, or the Tour focusses only on teaching the raw basics.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S01E05 - Interfaces</title>
      <link>https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/</link>
      <pubDate>Tue, 30 Jun 2020 16:59:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;üëâ &lt;a href=&#34;https://tour.golang.org/methods/9&#34;&gt;A Tour of Go : Interfaces&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This page really threw me, for several reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The text notes that there‚Äôs an error (&lt;em&gt;so why don‚Äôt they fix it?&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The provided code doesn‚Äôt run (presumably because of the above error)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It‚Äôs not clear if this is a deliberate error to illustrate a point, or just a snafu&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S01E04 - Function Closures</title>
      <link>https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e04-function-closures/</link>
      <pubDate>Mon, 29 Jun 2020 14:59:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e04-function-closures/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;üëâ &lt;a href=&#34;https://tour.golang.org/moretypes/25&#34;&gt;A Tour of Go : Function Closures&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So far the Tour has been ü§î and üßê and even ü§® but function closures had me ü§Ø ‚Ä¶&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each of the words on the page made sense but strung together in a sentence didn‚Äôt really make any sense to me.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S01E03 - Maps</title>
      <link>https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e03-maps/</link>
      <pubDate>Mon, 29 Jun 2020 13:59:05 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e03-maps/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;üëâ &lt;a href=&#34;https://tour.golang.org/moretypes/23&#34;&gt;A Tour of Go : Exercise - Maps&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Implement WordCount&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is probably bread-and-butter for any seasoned programmer, but I enjoyed the simple process and satisfaction of breaking the problem down into steps to solve using what the tutorial had just covered. Sketching out the logic in pseudo-code first, I figured that I wanted to do this:&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S01E02 - Slices</title>
      <link>https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/</link>
      <pubDate>Thu, 25 Jun 2020 11:20:23 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/</guid>
      <description>&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;Learning Go : Background&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;üëâ &lt;a href=&#34;https://tour.golang.org/moretypes/7&#34;&gt;A Tour of Go : Slices&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Slices made sense, until I got to &lt;a href=&#34;https://tour.golang.org/moretypes/11&#34;&gt;&lt;em&gt;Slice length and capacity&lt;/em&gt;&lt;/a&gt;. Two bits puzzled me in this code:&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S01E01 - Pointers</title>
      <link>https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/</link>
      <pubDate>Thu, 25 Jun 2020 11:15:23 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/</guid>
      <description>&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;Learning Go : Background&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;üëâ &lt;a href=&#34;https://tour.golang.org/moretypes/1&#34;&gt;A Tour of Go : Pointers&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I‚Äôve never used pointers before. Found plenty of good resources about &lt;strong&gt;what&lt;/strong&gt; they are, e.g.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.callicoder.com/golang-pointers/&#34; class=&#34;bare&#34;&gt;https://www.callicoder.com/golang-pointers/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dave.cheney.net/2017/04/26/understand-go-pointers-in-less-than-800-words-or-your-money-back&#34; class=&#34;bare&#34;&gt;https://dave.cheney.net/2017/04/26/understand-go-pointers-in-less-than-800-words-or-your-money-back&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But &lt;strong&gt;why&lt;/strong&gt;? It‚Äôs like explaining patiently to someone that 2+2 = 4, without really explaining &lt;strong&gt;why&lt;/strong&gt; would we want to add two numbers together in the first place.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Learning Golang (some rough notes) - S01E00</title>
      <link>https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/</link>
      <pubDate>Thu, 25 Jun 2020 11:13:23 +0100</pubDate>
      
      <guid>https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;My background is not a traditional CompSci one. I studied Music at university, and managed to wangle my way into IT through various means, ending up doing what I do now with no formal training in coding, and a grab-bag of hacky programming attempts on my CV. My weapons of choice have been BBC Basic, VBA, ASP, and more recently some very unpythonic-Python. It‚Äôs got me by, but I figured recently I‚Äôd like to learn something new, and several people pointed to Go as a good option.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
