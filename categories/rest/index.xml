<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>REST on rmoff&#39;s random ramblings</title>
    <link>https://rmoff.net/categories/rest/</link>
    <description>Recent content in REST on rmoff&#39;s random ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 May 2019 10:32:10 +0100</lastBuildDate><atom:link href="https://rmoff.net/categories/rest/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deleting a Connector in Kafka Connect without the REST API</title>
      <link>https://rmoff.net/2019/05/22/deleting-a-connector-in-kafka-connect-without-the-rest-api/</link>
      <pubDate>Wed, 22 May 2019 10:32:10 +0100</pubDate>
      
      <guid>https://rmoff.net/2019/05/22/deleting-a-connector-in-kafka-connect-without-the-rest-api/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Kafka Connect exposes a &lt;a href=&#34;https://docs.confluent.io/current/connect/references/restapi.html&#34;&gt;REST interface&lt;/a&gt; through which all config and monitoring operations can be done. You can create connectors, delete them, restart them, check their status, and so on. But, I found a situation recently in which I needed to delete a connector and couldn’t do so with the REST API. Here’s another way to do it, by amending the configuration Kafka topic that Kafka Connect in distributed mode uses to persist configuration information for connectors. Note that this is not a recommended way of working with Kafka Connect—the REST API is there for a good reason :)&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Terminate All KSQL Queries</title>
      <link>https://rmoff.net/2019/03/25/terminate-all-ksql-queries/</link>
      <pubDate>Mon, 25 Mar 2019 16:45:40 +0000</pubDate>
      
      <guid>https://rmoff.net/2019/03/25/terminate-all-ksql-queries/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Before you can drop a stream or table that’s populated by a query in KSQL, you have to terminate any queries upon which the object is dependent. Here’s a bit of &lt;code&gt;jq&lt;/code&gt; &amp;amp; &lt;code&gt;xargs&lt;/code&gt; magic to terminate &lt;strong&gt;all&lt;/strong&gt; queries that are currently running&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>KSQL REST API cheatsheet</title>
      <link>https://rmoff.net/2019/01/17/ksql-rest-api-cheatsheet/</link>
      <pubDate>Thu, 17 Jan 2019 12:12:11 +0000</pubDate>
      
      <guid>https://rmoff.net/2019/01/17/ksql-rest-api-cheatsheet/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Full reference is &lt;a href=&#34;https://docs.confluent.io/current/ksql/docs/developer-guide/api.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Confluent Schema Registry REST API cheatsheet</title>
      <link>https://rmoff.net/2019/01/17/confluent-schema-registry-rest-api-cheatsheet/</link>
      <pubDate>Thu, 17 Jan 2019 11:25:40 +0000</pubDate>
      
      <guid>https://rmoff.net/2019/01/17/confluent-schema-registry-rest-api-cheatsheet/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.confluent.io/current/schema-registry/docs/index.html&#34;&gt;Schema Registry&lt;/a&gt; support a &lt;a href=&#34;https://docs.confluent.io/current/schema-registry/docs/api.html&#34;&gt;REST API&lt;/a&gt; for finding out information about the schemas within it. Here’s a quick cheatsheat with REST calls that I often use.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Lifting the Lid on OBIEE 12c Web Services - Part 2</title>
      <link>https://rmoff.net/2016/05/28/lifting-the-lid-on-obiee-12c-web-services-part-2/</link>
      <pubDate>Sat, 28 May 2016 20:30:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2016/05/28/lifting-the-lid-on-obiee-12c-web-services-part-2/</guid>
      <description>In OBIEE 12c data-model-cmd is a wrapper for some java code which ultimately calls an internal RESTful web service in OBIEE 12c, bi-lcm. We saw in the previous post how these internal web services can be opened up slightly, and we&amp;rsquo;re going to do the same again here. Which means, time for the same caveat:
 None of these Web Services are documented, and they should therefore be assumed to be completely unsupported by Oracle.</description>
    </item>
    
    <item>
      <title>Lifting the Lid on OBIEE 12c Web Services - Part 1</title>
      <link>https://rmoff.net/2016/05/24/lifting-the-lid-on-obiee-12c-web-services-part-1/</link>
      <pubDate>Tue, 24 May 2016 21:15:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2016/05/24/lifting-the-lid-on-obiee-12c-web-services-part-1/</guid>
      <description>Architecturally, OBIEE 12c is - on the surface - pretty similar to OBIEE 11g. Sure, we&amp;rsquo;ve lost OPMN in favour of Node Manager, but all the old favourites are there - WebLogic Servers, BI Server (nqsserver / OBIS), Presentation Services (sawserver / OBIPS), and so on.
But, scratch beneath the surface, or have a gander at slide decks such as this one from BIWA this year, and you realise that change is afoot.</description>
    </item>
    
  </channel>
</rss>
