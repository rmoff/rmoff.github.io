<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>systemsmanagement on rmoff&#39;s random ramblings2</title>
    <link>https://rmoff.net/categories/systemsmanagement/</link>
    <description>Recent content in systemsmanagement on rmoff&#39;s random ramblings2</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Oct 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://rmoff.net/categories/systemsmanagement/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Instrumenting OBIEE - the final chapter</title>
      <link>https://rmoff.net/2011/10/10/instrumenting-obiee-the-final-chapter/</link>
      <pubDate>Mon, 10 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2011/10/10/instrumenting-obiee-the-final-chapter/</guid>
      <description>This article has been superseded by a newer version: Instrumenting OBIEE Database Connections For Improved Performance Diagnostics (Previously on this blog: 1, 2, 3&amp;hellip;)
Summary Instrument your code. Stop guessing. Make your DBA happy. Make your life as a BI Admin easier.
The Problem OBIEE will typically connect to the database using a generic application account. (Hopefully, you&amp;rsquo;ll have isolated it to an account used only for this purpose - if you haven&amp;rsquo;t, you should.</description>
    </item>
    
    <item>
      <title>OBIEE Systems Management - dodgy counter behaviour</title>
      <link>https://rmoff.net/2011/03/08/obiee-systems-management-dodgy-counter-behaviour/</link>
      <pubDate>Tue, 08 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2011/03/08/obiee-systems-management-dodgy-counter-behaviour/</guid>
      <description>Over the last few months I&amp;rsquo;ve been doing a lot of exploring of OBIEE Systems Management data, covered in a mini-series of blog posts, Collecting OBIEE systems management data.
There are a vast number of counters exposed, ranging from the very interesting (Active Sessions, Cache Hits, etc) to the less so (Total Query Piggybacks, although for some seriously hardcore performance tuning even this may be of interest).
This short blog post is about a couple of counters which I&amp;rsquo;ve been monitoring but which looks to not be entirely reliable.</description>
    </item>
    
    <item>
      <title>Collecting OBIEE systems management data with jmx</title>
      <link>https://rmoff.net/2010/12/06/collecting-obiee-systems-management-data-with-jmx/</link>
      <pubDate>Mon, 06 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2010/12/06/collecting-obiee-systems-management-data-with-jmx/</guid>
      <description>Introduction This is the first part of three detailed articles making up a mini-series about OBIEE monitoring. It demonstrates how to capture OBIEE performance information, and optionally graph it out and serve it through an auto-updating webpage.
For some background on OBIEE&amp;rsquo;s Systems Management component, along with JMX and MBeans, see here and here. The following assumes you know your mbeans from coffee beans and jmx from a bmx.
The metric collection is built around the jmxsh tool.</description>
    </item>
    
    <item>
      <title>OBIEE monitoring</title>
      <link>https://rmoff.net/2010/12/06/obiee-monitoring/</link>
      <pubDate>Mon, 06 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2010/12/06/obiee-monitoring/</guid>
      <description>Those of you who read my blog regularly may have noticed I have a slight obsession with the OBIEE systems management capability which is exposed through JMX. Venkat has blogged this week about JMX in OBI11g, and it&amp;rsquo;s clearly a technology worth understanding properly. I&amp;rsquo;ve recently been tinkering with how to make use of it for monitoring purposes, most recently using JConsole and discussed here. What follows is an extension of this idea, cobbled together with a bit of shell scripting, awk, gnuplot, and sticky backed plastic.</description>
    </item>
    
    <item>
      <title>A Poor Man&#39;s OBIEE EM/BI Management Pack</title>
      <link>https://rmoff.net/2010/11/04/a-poor-mans-obiee-em/bi-management-pack/</link>
      <pubDate>Thu, 04 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2010/11/04/a-poor-mans-obiee-em/bi-management-pack/</guid>
      <description>Folk from Yorkshire are tight, so the stereotype goes. So here&amp;rsquo;s a cheap-ass way to monitor OBIEE 10g using nothing but the OBIEE built-in systemsmanagement component, the jmx agent, and jconsole (which is part of the standard Java distribution):
From here you can also export to CSV the various counters, and then store history, plot it out with gnuplot or Excel, etc.
If anyone&amp;rsquo;s interested let me know and I&amp;rsquo;ll document a bit more about how I did this, but it&amp;rsquo;s basically building on previous work I&amp;rsquo;ve documented around jmx and OBIEE.</description>
    </item>
    
    <item>
      <title>Securing OBIEE Systems Management JMX for remote access</title>
      <link>https://rmoff.net/2010/03/05/securing-obiee-systems-management-jmx-for-remote-access/</link>
      <pubDate>Fri, 05 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2010/03/05/securing-obiee-systems-management-jmx-for-remote-access/</guid>
      <description>JMX OBIEE&amp;rsquo;s Systems Management functionality exposes performance counters and the application&amp;rsquo;s configuration options through Java MBeans and optionally a protocol called JMX.
It&amp;rsquo;s extremely useful, and is documented pretty widely :
JConsole / JMX JConsole / JMX – followup Oracle BI Management / Systems Management MBeans PerfMon OBIEE MBeans and OC4J OBIEE performance monitoring and alerting with jManage In this article I&amp;rsquo;m going to discuss the use of JMX to access these counters remotely, and a possible security issue that&amp;rsquo;s present in the BI Management Pack manual.</description>
    </item>
    
    <item>
      <title>Usage Tracking - only half the story ...</title>
      <link>https://rmoff.net/2009/10/06/usage-tracking-only-half-the-story-.../</link>
      <pubDate>Tue, 06 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2009/10/06/usage-tracking-only-half-the-story-.../</guid>
      <description>OBIEE comes with a very useful usage tracking feature. For information about it and how to set it up see these links:
http://obiee101.blogspot.com/2008/08/obiee-setting-up-usage-tracking.html http://www.oracle.com/technology/obe/obe_bi/bi_ee_1013/usage_tracking/usage_tracking.htm http://108obiee.blogspot.com/2009/07/obiee-usage-tracking-setup-and-cloning.html Usage Tracking captures the logical SQL of queries in a column called QUERY_TEXT in the table S_NQ_ACCT. However, out of the box this column is defined as 1k (1024 bytes) long. In some situations this will limit its usefulness because the text will be truncated if necessary when it&amp;rsquo;s inserted.</description>
    </item>
    
    <item>
      <title>OBIEE performance monitoring and alerting with jManage</title>
      <link>https://rmoff.net/2009/07/29/obiee-performance-monitoring-and-alerting-with-jmanage/</link>
      <pubDate>Wed, 29 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://rmoff.net/2009/07/29/obiee-performance-monitoring-and-alerting-with-jmanage/</guid>
      <description>OBIEE&amp;rsquo;s Systems Management component exposes configuration and performance data through Java MBeans. As discussed in other posts these can be be accessed through several different ways:
JConsole (see also here) oc4j Windows PerfMon (although I guess this isn&amp;rsquo;t actually using MBeans/JMX?) saw.dll?perfmon BI Management Pack Since it&amp;rsquo;s a standard java technology being used we can in theory use anything that is designed for monitoring mbeans via jmx. Doing some Googling I discovered jManage.</description>
    </item>
    
  </channel>
</rss>
