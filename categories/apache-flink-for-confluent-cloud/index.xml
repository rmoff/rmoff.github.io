<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache Flink for Confluent Cloud on rmoff&#39;s random ramblings</title>
    <link>https://rmoff.net/categories/apache-flink-for-confluent-cloud/</link>
    <description>Recent content in Apache Flink for Confluent Cloud on rmoff&#39;s random ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Mar 2025 16:57:44 +0000</lastBuildDate><atom:link href="https://rmoff.net/categories/apache-flink-for-confluent-cloud/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Wrangling with Flink SQL</title>
      <link>https://rmoff.net/2025/03/10/data-wrangling-with-flink-sql/</link>
      <pubDate>Mon, 10 Mar 2025 16:57:44 +0000</pubDate>
      
      <guid>https://rmoff.net/2025/03/10/data-wrangling-with-flink-sql/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The UK Government publishes a lot of its data as &lt;a href=&#34;https://www.data.gov.uk/&#34;&gt;open feeds&lt;/a&gt;.
One that I keep coming back to is the &lt;a href=&#34;https://environment.data.gov.uk/flood-monitoring/doc/reference&#34;&gt;Environment Agency’s flood-monitoring API&lt;/a&gt; that gives access to an estate of sensors that provide information about data such as river levels and rainfall.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The data is well-structured and provided across three primary API endpoints.
In this blog article I’m going to show you how I use Flink SQL to explore and wrangle these into the kind of form from which I am then going to build a streaming pipeline using them.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
