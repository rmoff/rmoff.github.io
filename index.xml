<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rmoff&#39;s random ramblings</title>
    <link>https://rmoff.github.io/</link>
    <description>Recent content on rmoff&#39;s random ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>2020-01-08</lastBuildDate>
    
        <atom:link href="https://rmoff.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Streaming messages from RabbitMQ into Kafka with Kafka Connect</title>
      <link>https://rmoff.github.io/2020/01/08/streaming-messages-from-rabbitmq-into-kafka-with-kafka-connect/</link>
      <pubDate>2020-01-08</pubDate>
      
      <guid>https://rmoff.github.io/2020/01/08/streaming-messages-from-rabbitmq-into-kafka-with-kafka-connect/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.github.io/images/2020/01/IMG_2114.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This was prompted by &lt;a href=&#34;https://stackoverflow.com/questions/59632068/kafka-connect-is-sending-a-malformed-json&#34;&gt;a question&lt;/a&gt; on StackOverflow to which I thought the answer would be straightforward, but turned out not to be so. And then I got a bit carried away and ended up with a nice example of how you can handle schema-less data coming from a system such as RabbitMQ and apply a schema to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
This same pattern for ingesting bytes and applying a schema will work with other connectors such as &lt;a href=&#34;https://www.confluent.io/hub/confluentinc/kafka-connect-jms&#34;&gt;JMS&lt;/a&gt;, &lt;a href=&#34;https://www.confluent.io/hub/confluentinc/kafka-connect-mqtt&#34;&gt;MQTT&lt;/a&gt;, and &lt;a href=&#34;https://www.confluent.io/hub/confluentinc/kafka-connect-activemq&#34;&gt;ActiveMQ&lt;/a&gt; etc
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_setup_optional&#34;&gt;Setup (optional)&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you want to follow along with this example, you can use Docker Compose to create the environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Clone the repo&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/confluentinc/demo-scene.git
cd demo-scene/rabbitmq-into-kafka&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bring up the test environment&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker-compose up -d&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_create_queue_and_test_message_on_rabbitmq&#34;&gt;Create queue and test message on RabbitMQ&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;This uses the &lt;a href=&#34;https://www.rabbitmq.com/management.html&#34;&gt;Management API&lt;/a&gt; which has been enabled on the Docker container automagically.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Create the queue&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl --user guest:guest \
      -X PUT -H &#39;content-type: application/json&#39; \
      --data-binary &#39;{&#34;vhost&#34;:&#34;/&#34;,&#34;name&#34;:&#34;test-queue-01&#34;,&#34;durable&#34;:&#34;true&#34;,&#34;auto_delete&#34;:&#34;false&#34;,&#34;arguments&#34;:{&#34;x-queue-type&#34;:&#34;classic&#34;}}&#39; \
      &#39;http://localhost:15672/api/queues/%2F/test-queue-01&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confirm that the queue has been created&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -s --user guest:guest \
        -X GET -H &#39;content-type: application/json&#39; \
        &#39;http://localhost:15672/api/queues/%2F/&#39; | jq &#39;.[].name&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&#34;test-queue-01&#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send a test message&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo &#39;{&#34;vhost&#34;:&#34;/&#34;,&#34;name&#34;:&#34;amq.default&#34;,&#34;properties&#34;:{&#34;delivery_mode&#34;:1,&#34;headers&#34;:{}},&#34;routing_key&#34;:&#34;test-queue-01&#34;,&#34;delivery_mode&#34;:&#34;1&#34;,&#34;payload&#34;:&#34;{\&#34;transaction\&#34;: \&#34;PAYMENT\&#34;, \&#34;amount\&#34;: \&#34;$125.0\&#34;, \&#34;timestamp\&#34;: \&#34;&#39;$(date)&#39;\&#34; }&#34;,&#34;headers&#34;:{},&#34;props&#34;:{},&#34;payload_encoding&#34;:&#34;string&#34;}&#39; |
curl --user guest:guest \
      -X POST -H &#39;content-type: application/json&#39; \
      --data-binary @-  \
      &#39;http://localhost:15672/api/exchanges/%2F/amq.default/publish&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test consuming messages from the queue&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl --silent --user guest:guest \
        -X POST -H &#39;content-type: application/json&#39; \
        --data-binary &#39;{&#34;ackmode&#34;:&#34;ack_requeue_true&#34;,&#34;encoding&#34;:&#34;auto&#34;,&#34;count&#34;:&#34;10&#34;}&#39; \
        &#39;http://localhost:15672/api/queues/%2F/test-queue-01/get&#39; | jq &#39;.[].payload|fromjson&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{
  &#34;transaction&#34;: &#34;PAYMENT&#34;,
  &#34;amount&#34;: &#34;$125.0&#34;,
  &#34;timestamp&#34;: &#34;Wed 8 Jan 2020 10:41:45 GMT&#34;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can see the RabbitMQ Web UI (login &lt;code&gt;guest&lt;/code&gt;/&lt;code&gt;guest&lt;/code&gt;) at &lt;a href=&#34;http://localhost:15672/#/&#34; class=&#34;bare&#34;&gt;http://localhost:15672/#/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_create_the_kafka_connect_connector&#34;&gt;Create the Kafka Connect connector&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;This uses the &lt;a href=&#34;https://docs.confluent.io/current/connect/kafka-connect-rabbitmq/index.html&#34;&gt;RabbitMQ plugin for Kafka Connect&lt;/a&gt;, which has been installed in the Docker container already. You can install it yourself from &lt;a href=&#34;http://hub.confluent.io/&#34;&gt;Confluent Hub&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -i -X PUT -H  &#34;Content-Type:application/json&#34; \
    http://localhost:8083/connectors/source-rabbitmq-00/config \
    -d &#39;{
        &#34;connector.class&#34; : &#34;io.confluent.connect.rabbitmq.RabbitMQSourceConnector&#34;,
        &#34;kafka.topic&#34; : &#34;rabbit-test-00&#34;,
        &#34;rabbitmq.queue&#34; : &#34;test-queue-01&#34;,
        &#34;rabbitmq.username&#34;: &#34;guest&#34;,
        &#34;rabbitmq.password&#34;: &#34;guest&#34;,
        &#34;rabbitmq.host&#34;: &#34;rabbitmq&#34;,
        &#34;rabbitmq.port&#34;: &#34;5672&#34;,
        &#34;rabbitmq.virtual.host&#34;: &#34;/&#34;,
        &#34;confluent.license&#34;:&#34;&#34;,
        &#34;confluent.topic.bootstrap.servers&#34;:&#34;kafka:29092&#34;,
        &#34;confluent.topic.replication.factor&#34;:1,
        &#34;value.converter&#34;: &#34;org.apache.kafka.connect.converters.ByteArrayConverter&#34;,
        &#34;key.converter&#34;: &#34;org.apache.kafka.connect.storage.StringConverter&#34;
    } &#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With the connector created we check that it&amp;#8217;s running:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -s &#34;http://localhost:8083/connectors?expand=info&amp;amp;expand=status&#34; | \
           jq &#39;. | to_entries[] | [ .value.info.type, .key, .value.status.connector.state,.value.status.tasks[].state,.value.info.config.&#34;connector.class&#34;]|join(&#34;:|:&#34;)&#39; | \
           column -s : -t| sed &#39;s/\&#34;//g&#39;| sort&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;source  |  source-rabbitmq-00  |  RUNNING  |  RUNNING  |  io.confluent.connect.rabbitmq.RabbitMQSourceConnector&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And then we can check the topic that&amp;#8217;s being written to. Here I&amp;#8217;m using kafkacat but you can use any Kafka consumer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker exec kafkacat \
  kafkacat -b kafka:29092 \
           -t rabbit-test-00
           -C -u&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The message we sent to RabbitMQ shows up in Kafka:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;{&#34;transaction&#34;: &#34;PAYMENT&#34;, &#34;amount&#34;: &#34;$125.0&#34;, &#34;timestamp&#34;: &#34;Wed 8 Jan 2020 10:41:45 GMT&#34;}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you open another window and use the same &lt;code&gt;curl&lt;/code&gt; statement (bottom pane) above to send more messages to RabbitMQ, you&amp;#8217;ll see them appear in the Kafka topic (top pane) straight away:&lt;/p&gt;
&lt;/div&gt;
&lt;script id=&#34;asciicast-A0dpWpN7WVs1UVnf0BjLNqqnv&#34; src=&#34;https://asciinema.org/a/A0dpWpN7WVs1UVnf0BjLNqqnv.js&#34; async&gt;&lt;/script&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One of the important things to note in the configuration of the connector is that we&amp;#8217;re using the &lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/KIP-128%3A+Add+ByteArrayConverter+for+Kafka+Connect&#34;&gt;&lt;code&gt;ByteArrayConverter&lt;/code&gt;&lt;/a&gt; for the value of the message, which just takes whatever bytes are on the RabbitMQ message and writes them to the Kafka message. Whilst on first look it appears that we&amp;#8217;ve got a JSON message on RabbitMQ and so would evidently use the JsonConverter, this is not the case. If we do that, the converter will try to encode the bytes as JSON, and we&amp;#8217;ll end up with this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&#34;eyJ0cmFuc2FjdGlvbiI6ICJQQVlNRU5UIiwgImFtb3VudCI6ICIkNDcuMyIsICJ0aW1lc3RhbXAiOiAiV2VkIDggSmFuIDIwMjAgMTM6MDE6MjEgR01UIiB9&#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To understand more about converters and serialisation see this article: &lt;a href=&#34;https://www.confluent.io/blog/kafka-connect-deep-dive-converters-serialization-explained/&#34;&gt;Kafka Connect Deep Dive – Converters and Serialization Explained&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can dig into the payload further with kafkacat to examine the headers etc:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker exec kafkacat \
  kafkacat -b kafka:29092 -t rabbit-test-00 -C -u -q \
  -f &#39;Topic %t / Partition %p / Offset: %o / Timestamp: %T\nHeaders: %h\nKey (%K bytes): %k\nPayload (%S bytes): %s\n--\n&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The output looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Topic rabbit-test-00 / Partition 0 / Offset: 48 / Timestamp: 1578480718010
Headers: rabbitmq.consumer.tag=amq.ctag--gWoke550mjIPbeJhquS9g,rabbitmq.content.type=NULL,rabbitmq.content.encoding=NULL,rabbitmq.delivery.mode=1,rabbitmq.priority=0,rabbitmq.correlation.id=NULL,rabbitmq.reply.to=NULL,rabbitmq.expiration=NULL,rabbitmq.message.id=NULL,rabbitmq.timestamp=NULL,rabbitmq.type=NULL,rabbitmq.user.id=NULL,rabbitmq.app.id=NULL,rabbitmq.delivery.tag=45,rabbitmq.redeliver=false,rabbitmq.exchange=,rabbitmq.routing.key=test-queue-01
Key (-1 bytes):
Payload (91 bytes): {&#34;transaction&#34;: &#34;PAYMENT&#34;, &#34;amount&#34;: &#34;$125.0&#34;, &#34;timestamp&#34;: &#34;Wed 8 Jan 2020 10:51:57 GMT&#34; }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_apply_a_schema_and_manipulate_the_data_in_ksqldb&#34;&gt;Apply a schema and manipulate the data in ksqlDB&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So far we&amp;#8217;ve got the message (which happens to be JSON) from RabbitMQ into a Kafka topic. Now let&amp;#8217;s actually declare the schema so that we can work with the data. For that we&amp;#8217;re going to use ksqlDB to do a little bit of stream processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Fire up the ksqlDB CLI:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker exec -it ksqldb-cli ksql http://ksqldb-server:8088&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Inspect the raw topic contents:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&amp;gt; PRINT &#39;rabbit-test-00&#39; FROM BEGINNING;
Format:JSON
{&#34;ROWTIME&#34;:1578477403591,&#34;ROWKEY&#34;:&#34;null&#34;,&#34;transaction&#34;:&#34;PAYMENT&#34;,&#34;amount&#34;:&#34;$125.0&#34;}
{&#34;ROWTIME&#34;:1578477598555,&#34;ROWKEY&#34;:&#34;null&#34;,&#34;transaction&#34;:&#34;PAYMENT&#34;,&#34;amount&#34;:&#34;$125.0&#34;}
{&#34;ROWTIME&#34;:1578478171540,&#34;ROWKEY&#34;:&#34;null&#34;,&#34;transaction&#34;:&#34;PAYMENT&#34;,&#34;amount&#34;:&#34;$125.0&#34;}
{&#34;ROWTIME&#34;:1578480036859,&#34;ROWKEY&#34;:&#34;null&#34;,&#34;transaction&#34;:&#34;PAYMENT&#34;,&#34;amount&#34;:&#34;$125.0&#34;,&#34;timestamp&#34;:&#34;Wed 8 Jan 2020 10:40:36 GMT&#34;}
{&#34;ROWTIME&#34;:1578480105771,&#34;ROWKEY&#34;:&#34;null&#34;,&#34;transaction&#34;:&#34;PAYMENT&#34;,&#34;amount&#34;:&#34;$125.0&#34;,&#34;timestamp&#34;:&#34;Wed 8 Jan 2020 10:41:45 GMT&#34;}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Declare the stream (which is just the existing Kafka topic with an explicit schema):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;CREATE STREAM rabbit (transaction VARCHAR,
                      amount VARCHAR,
                      timestamp VARCHAR)
  WITH (KAFKA_TOPIC=&#39;rabbit-test-00&#39;,
        VALUE_FORMAT=&#39;JSON&#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we can query the stream of data, starting at the beginning:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&amp;gt; SET &#39;auto.offset.reset&#39; = &#39;earliest&#39;;
Successfully changed local property &#39;auto.offset.reset&#39; to &#39;earliest&#39;. Use the UNSET command to revert your change.

ksql&amp;gt; SELECT transaction, amount, timestamp FROM rabbit EMIT CHANGES;
+------------+---------+----------------------------+
|TRANSACTION |AMOUNT   |TIMESTAMP                   |
+------------+---------+----------------------------+
|PAYMENT     |$125.0   |null                        |
|PAYMENT     |$125.0   |null                        |
|PAYMENT     |$125.0   |null                        |
|PAYMENT     |$125.0   |Wed 8 Jan 2020 10:40:36 GMT |
|PAYMENT     |$125.0   |Wed 8 Jan 2020 10:41:45 GMT |&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;code&gt;AMOUNT&lt;/code&gt; column is clearly a currency, but the source data is a character string (&lt;code&gt;$125.0&lt;/code&gt;). Let&amp;#8217;s write a stream processor to split these into more appropriate columns, and also drop messages with no timestamp (that we&amp;#8217;ll class as invalid data for this example):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;CREATE STREAM TRANSACTIONS WITH (VALUE_FORMAT=&#39;AVRO&#39;) AS
  SELECT TRANSACTION AS TX_TYPE,
         SUBSTRING(AMOUNT,1,1) AS CURRENCY,
         CAST(SUBSTRING(AMOUNT,2,LEN(AMOUNT)-1) AS DECIMAL(9,2)) AS TX_AMOUNT,
         TIMESTAMP AS TX_TIMESTAMP
    FROM rabbit
   WHERE TIMESTAMP IS NOT NULL
    EMIT CHANGES;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This creates a new Kafka topic, populated by the transformed data driven by the original Kafka topic populated from RabbitMQ:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&amp;gt; SELECT TX_TYPE, CURRENCY, TX_AMOUNT, TX_TIMESTAMP FROM TRANSACTIONS EMIT CHANGES;
+--------+----------+----------+----------------------------+
|TX_TYPE |CURRENCY  |TX_AMOUNT |TX_TIMESTAMP                |
+--------+----------+----------+----------------------------+
|PAYMENT |$         |125.00    |Wed 8 Jan 2020 10:40:36 GMT |
|PAYMENT |$         |125.00    |Wed 8 Jan 2020 10:41:45 GMT |&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Note that the messages without a timestamp are not present in the new stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Compare our source schema:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&amp;gt; DESCRIBE rabbit;

Name                 : RABBIT
 Field       | Type
-----------------------------------------
 ROWTIME     | BIGINT           (system)
 ROWKEY      | VARCHAR(STRING)  (system)
 TRANSACTION | VARCHAR(STRING)
 AMOUNT      | VARCHAR(STRING)
 TIMESTAMP   | VARCHAR(STRING)
-----------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;with the transformed schema&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&amp;gt; DESCRIBE TRANSACTIONS;

Name                 : TRANSACTIONS
 Field        | Type
------------------------------------------
 ROWTIME      | BIGINT           (system)
 ROWKEY       | VARCHAR(STRING)  (system)
 TX_TYPE      | VARCHAR(STRING)
 CURRENCY     | VARCHAR(STRING)
 TX_AMOUNT    | DECIMAL
 TX_TIMESTAMP | VARCHAR(STRING)
------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Because we&amp;#8217;ve applied a schema to the data we can now make better sense of it, as well as do useful things like write it to a database. Since we have a proper schema for the data (stored for us in the Schema Registry because we&amp;#8217;re using Avro) Kafka Connect can actually build the target database table that it&amp;#8217;s going to write data to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;CREATE SINK CONNECTOR SINK_POSTGRES WITH (
    &#39;connector.class&#39;     = &#39;io.confluent.connect.jdbc.JdbcSinkConnector&#39;,
    &#39;connection.url&#39;      = &#39;jdbc:postgresql://postgres:5432/&#39;,
    &#39;connection.user&#39;     = &#39;postgres&#39;,
    &#39;connection.password&#39; = &#39;postgres&#39;,
    &#39;topics&#39;              = &#39;TRANSACTIONS&#39;,
    &#39;key.converter&#39;       = &#39;org.apache.kafka.connect.storage.StringConverter&#39;,
    &#39;auto.create&#39;         = &#39;true&#39;,
    &#39;transforms&#39;          = &#39;dropSysCols&#39;,
    &#39;transforms.dropSysCols.type&#39; = &#39;org.apache.kafka.connect.transforms.ReplaceField$Value&#39;,
    &#39;transforms.dropSysCols.blacklist&#39; = &#39;ROWKEY,ROWTIME&#39;
  );&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now in Postgres we have the data almost as soon as it&amp;#8217;s written to RabbitMQ, with the light transformation applied to it:&lt;/p&gt;
&lt;/div&gt;
&lt;script id=&#34;asciicast-292407&#34; src=&#34;https://asciinema.org/a/292407.js&#34; async&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Analysing network behaviour with ksqlDB and MongoDB</title>
      <link>https://rmoff.github.io/2019/12/20/analysing-network-behaviour-with-ksqldb-and-mongodb/</link>
      <pubDate>2019-12-20</pubDate>
      
      <guid>https://rmoff.github.io/2019/12/20/analysing-network-behaviour-with-ksqldb-and-mongodb/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.github.io/images/2019/12/IMG_1399.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this post I want to build on &lt;a href=&#34;https://rmoff.net/2019/12/18/detecting-and-analysing-ssh-attacks-with-ksqldb/&#34;&gt;my previous one&lt;/a&gt; and show another use of the Syslog data that I&amp;#8217;m capturing. Instead of looking for &lt;a href=&#34;https://rmoff.net/2019/12/18/detecting-and-analysing-ssh-attacks-with-ksqldb/&#34;&gt;SSH attacks&lt;/a&gt;, I&amp;#8217;m going to analyse the behaviour of my networking components.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
You can find all the code to run this on &lt;a href=&#34;https://github.com/confluentinc/demo-scene/tree/master/syslog&#34;&gt;GitHub&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_getting_syslog_data_into_kafka&#34;&gt;Getting Syslog data into Kafka&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As before, let&amp;#8217;s create ourselves a &lt;a href=&#34;https://www.confluent.io/hub/confluentinc/kafka-connect-syslog&#34;&gt;syslog connector&lt;/a&gt; in ksqlDB:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;CREATE SOURCE CONNECTOR SOURCE_SYSLOG_UDP_01 WITH (
    &#39;tasks.max&#39; = &#39;1&#39;,
    &#39;connector.class&#39; = &#39;io.confluent.connect.syslog.SyslogSourceConnector&#39;,
    &#39;topic&#39; = &#39;syslog&#39;,
    &#39;syslog.port&#39; = &#39;42514&#39;,
    &#39;syslog.listener&#39; = &#39;UDP&#39;,
    &#39;syslog.reverse.dns.remote.ip&#39; = &#39;true&#39;,
    &#39;confluent.license&#39; = &#39;&#39;,
    &#39;confluent.topic.bootstrap.servers&#39; = &#39;kafka:29092&#39;,
    &#39;confluent.topic.replication.factor&#39; = &#39;1&#39;
);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check that it&amp;#8217;s running :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DESCRIBE&lt;/span&gt; CONNECTOR SOURCE_SYSLOG_UDP_01;

Name                 : SOURCE_SYSLOG_UDP_01
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Class&lt;/span&gt;                : io.confluent.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;connect&lt;/span&gt;.syslog.SyslogSourceConnector
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Type&lt;/span&gt;                 : &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;source&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;State&lt;/span&gt;                : RUNNING
WorkerId             : kafka&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;connect&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;8083&lt;/span&gt;

 Task ID &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;State&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; Error Trace
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; RUNNING &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_configuring_unifi_devices_to_send_syslog_data_to_kafka&#34;&gt;Configuring Unifi devices to send Syslog data to Kafka&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now configure my networking equipment (switches, access points, routers) to route their syslog data to this machine&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/12/syslog_networking.png&#34; alt=&#34;syslog networking&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m using &lt;a href=&#34;https://www.ui.com/&#34;&gt;Ubiquiti&lt;/a&gt;&#39;s &lt;a href=&#34;https://unifi-network.ui.com/&#34;&gt;UniFi&lt;/a&gt; network, so just make this configuration change through the UI:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/12/unifi01.png&#34; alt=&#34;unifi01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now if I dump the Syslog Kafka topic to screen I can see it being populated with messages from my network devices:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; PRINT syslog;
Format:AVRO
&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;24&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt; AM UTC, usgmoffattme, &lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;RFC3164&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;root : TTY=unknown ; PWD=/ ; USER=root ; COMMAND=/usr/sbin/ipsec statusall&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;usgmoffattme&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tag&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;sudo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;extension&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;severity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;appName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;facility&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;remoteAddress&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;192.168.10.1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rawMessage&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;lt;86&amp;gt;Dec 20 10:24:35 usgmoffattme sudo:     root : TTY=unknown ; PWD=/ ; USER=root ; COMMAND=/usr/sbin/ipsec statusall&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;processId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;messageId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;structuredData&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceVendor&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceProduct&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceEventClassId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;1576837475000&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;25&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;52&lt;/span&gt; AM UTC, usgmoffattme, &lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;RFC3164&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;[WAN_IN-3006-A]IN=eth0 OUT=eth1 MAC=f0:9f:c2:12:a8:f4:04:2a:e2:c7:4c:1a:08:00 SRC=x.x.x.x DST=192.168.10.105 LEN=60 TOS=0x00 PREC=0x00 TTL=51 ID=30052 DF PROTO=TCP SPT=35214 DPT=22 WINDOW=29200 RES=0x00 SYN URGP=0 &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;usgmoffattme&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tag&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;kernel&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;extension&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;severity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;appName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;facility&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;remoteAddress&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;192.168.10.1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rawMessage&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;lt;4&amp;gt;Dec 20 10:25:52 usgmoffattme kernel: [WAN_IN-3006-A]IN=eth0 OUT=eth1 MAC=f0:9f:c2:12:a8:f4:04:2a:e2:c7:4c:1a:08:00 SRC=x.x.x.x DST=192.168.10.105 LEN=60 TOS=0x00 PREC=0x00 TTL=51 ID=30052 DF PROTO=TCP SPT=35214 DPT=22 WINDOW=29200 RES=0x00 SYN URGP=0 &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;processId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;messageId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;structuredData&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceVendor&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceProduct&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceEventClassId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;1576837552000&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_analysing_syslog_hosts_with_ksqldb&#34;&gt;Analysing Syslog hosts with ksqlDB&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;Let&amp;#8217;s have a look at which devices we&amp;#8217;ve got Syslog data for&lt;/strong&gt;. First off we&amp;#8217;ll declare a ksqlDB stream on top of the topic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;CREATE STREAM SYSLOG WITH (KAFKA_TOPIC=&#39;syslog&#39;, VALUE_FORMAT=&#39;AVRO&#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
Since we&amp;#8217;re writing to the topic using Avro we don&amp;#8217;t need to enter a schema here (since it already exists in the Schema Registry). ksqlDB works with JSON and CSV (🤮) too but you&amp;#8217;d have to declare the schema at this point.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we can use the schema of the data to query the data. We&amp;#8217;re going to tell ksqlDB to read all the data in the Kafka topic by setting &lt;code&gt;SET &#39;auto.offset.reset&#39; = &#39;earliest&#39;;&lt;/code&gt; and then run an aggregation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; SYSLOG_MESSAGE_COUNT &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SYSLOG &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt; EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------------------------+---------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;                              &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;SYSLOG_MESSAGE_COUNT &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------------------------+---------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;asgard03                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;17278&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;BZ2,&lt;span style=&#34;color:#666&#34;&gt;24&lt;/span&gt;a43cde91a0,v4.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10871&lt;/span&gt;:   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3023&lt;/span&gt;                 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;BZ2,dc9fdbec6a10,v4.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10871&lt;/span&gt;:   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5194&lt;/span&gt;                 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;MacBook&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;Pro                       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;42269&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;proxmox01                         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;37279&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;rpi&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;03&lt;/span&gt;                            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;30125&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;U7PG2,&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt;e829e930a0,v4.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10871&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;6592&lt;/span&gt;                 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;U7PG2,f09fc2238301,v4.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10871&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;38283&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;USC8,fcecdabfcf6d,v4.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;66&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10832&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt;                   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;usgmoffattme                      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;45695&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You might look at that query and think it looks pretty like any other SQL you&amp;#8217;ve seen, except for the &lt;code&gt;EMIT CHANGES&lt;/code&gt;. All that means is that ksqlDB will keep sending us the changes to the data as it occurs - so each new Syslog event that arrives will increase the aggregate value of the &lt;code&gt;COUNT(*)&lt;/code&gt; per host, and so it is re-emitted:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/12/ksqldb_syslog_01.gif&#34; alt=&#34;ksqldb syslog 01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The alternative is to materialise this data into a state store…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; HOST_SYSLOG_AGG &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;, 
               &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; MESSAGE_COUNT 
          &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SYSLOG 
      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;…that we can then query directly:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; MESSAGE_COUNT &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; HOST_SYSLOG_AGG &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; ROWKEY&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;asgard03&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;MESSAGE_COUNT    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;17278&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
Query terminated
ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/12/ksqldb_syslog_02.gif&#34; alt=&#34;ksqldb syslog 02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Note that the query says &lt;code&gt;Query terminated&lt;/code&gt; since it returns back to the user. It&amp;#8217;s called a &#34;pull query&#34; - the user requests the state of a key from ksqlDB, which is returned. Contrast that to the above &#34;push query&#34; in which &lt;code&gt;EMIT CHANGES&lt;/code&gt; tells ksqlDB to keep sending us the changes to the state as it occurs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_creating_a_dedicated_unifi_syslog_stream&#34;&gt;Creating a dedicated Unifi Syslog stream&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So…we&amp;#8217;ve got Syslog data for a bunch of different hosts. Let&amp;#8217;s create a new Kafka topic that&amp;#8217;s populated in realtime with Syslog messages just for our network devices. Which are my network devices? These ones:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;BZ2,24a43cde91a0,v4.0.69.10871:  
BZ2,dc9fdbec6a10,v4.0.69.10871:  
U7PG2,18e829e930a0,v4.0.69.10871:
U7PG2,f09fc2238301,v4.0.69.10871:
USC8,fcecdabfcf6d,v4.0.66.10832  
usgmoffattme                     &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are a couple of ways to select messages with which to populate this new topic. I could hardcode a predicate list of all the hostnames of my network devices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM UBNT_SYSLOG 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SYSLOG
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;BZ2,24a43cde91a0,v4.0.69.10871:&amp;#39;&lt;/span&gt;
       &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;OR&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;BZ2,dc9fdbec6a10,v4.0.69.10871:&amp;#39;&lt;/span&gt;
       &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;OR&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;U7PG2,18e829e930a0,v4.0.69.10871:&amp;#39;&lt;/span&gt;
       &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;OR&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;U7PG2,f09fc2238301,v4.0.69.10871:&amp;#39;&lt;/span&gt;
       &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;OR&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;USC8,fcecdabfcf6d,v4.0.66.10832&amp;#39;&lt;/span&gt;
       &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;OR&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;usgmoffattme&amp;#39;&lt;/span&gt; 
    EMIT CHANGES;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;That&amp;#8217;s only so useful whilst that list doesn&amp;#8217;t change. I could wildcard it based on the patterns in the naming (&lt;code&gt;U7PG2&lt;/code&gt; is the prefix of one of the access point types, etc):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM UBNT_SYSLOG 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SYSLOG
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIKE&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;BZ2%&amp;#39;&lt;/span&gt;
       &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;OR&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIKE&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;U7PG2%&amp;#39;&lt;/span&gt;
       &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;OR&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIKE&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;USC8%&amp;#39;&lt;/span&gt;
       &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;OR&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;usgmoffattme&amp;#39;&lt;/span&gt; 
    EMIT CHANGES;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is better because the stream will adapt as new devices are added—but only if they match those patterns. The best way to do it is simply have a list of network devices in a ksqlDB table (which is backed by a Kafka topic)…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; UBNT_NETWORK_DEVICES (ROWKEY STRING &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;KEY&lt;/span&gt;) 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;network_devices&amp;#39;&lt;/span&gt;,VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;AVRO&amp;#39;&lt;/span&gt;, PARTITIONS&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;);

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INTO&lt;/span&gt; UBNT_NETWORK_DEVICES &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;BZ2,24a43cde91a0,v4.0.69.10871:&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INTO&lt;/span&gt; UBNT_NETWORK_DEVICES &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;BZ2,dc9fdbec6a10,v4.0.69.10871:&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INTO&lt;/span&gt; UBNT_NETWORK_DEVICES &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;U7PG2,18e829e930a0,v4.0.69.10871:&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INTO&lt;/span&gt; UBNT_NETWORK_DEVICES &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;U7PG2,f09fc2238301,v4.0.69.10871:&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INTO&lt;/span&gt; UBNT_NETWORK_DEVICES &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;USC8,fcecdabfcf6d,v4.0.66.10832&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INTO&lt;/span&gt; UBNT_NETWORK_DEVICES &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;usgmoffattme&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;…and then join to this to create the stream. By using an &lt;code&gt;INNER JOIN&lt;/code&gt; I force it to only return messages for which there is a corresponding host on the &lt;code&gt;UBNT_NETWORK_DEVICES&lt;/code&gt; table. Now any time I add a new network device I just add it to the table (with an &lt;code&gt;INSERT INTO&lt;/code&gt;) and it gets picked up automagically in the join.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM UBNT_SYSLOG 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; S.&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; 
         &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SYSLOG S 
              &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; UBNT_NETWORK_DEVICES U
              &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; S.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; U.ROWKEY
        EMIT CHANGES;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now I have a new Kafka topic called &lt;code&gt;UBNT_SYSLOG&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SHOW&lt;/span&gt; TOPICS;

 Kafka Topic                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; Partitions &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; Partition Replicas
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-------------------------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;
 network_devices                 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
 syslog                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
 UBNT_SYSLOG                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-------------------------------------------------------------------&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and when I check the number of messages for each host, I can see that it only contains messages for my Unifi hosts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; S_HOST, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; SYSLOG_MESSAGE_COUNT 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; UBNT_SYSLOG 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;BY&lt;/span&gt; S_HOST 
    EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------------------------+---------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;S_HOST                            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;SYSLOG_MESSAGE_COUNT &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------------------------+---------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;BZ2,dc9fdbec6a10,v4.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10871&lt;/span&gt;:   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3106&lt;/span&gt;                 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;U7PG2,&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt;e829e930a0,v4.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10871&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3757&lt;/span&gt;                 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;BZ2,&lt;span style=&#34;color:#666&#34;&gt;24&lt;/span&gt;a43cde91a0,v4.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10871&lt;/span&gt;:   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1590&lt;/span&gt;                 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;U7PG2,f09fc2238301,v4.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10871&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;17658&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;usgmoffattme                      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;28964&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_access_point_usage&#34;&gt;Access point usage&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I want to revisit &lt;a href=&#34;https://www.confluent.io/blog/real-time-syslog-processing-apache-kafka-ksql-enriching-events-with-external-data/&#34;&gt;this example&lt;/a&gt; to show how we can easily wrangle and enrich the raw Syslog data. When I come home and my iPhone connects to my network, the Access Point logs this, with a raw Syslog message that looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;Dec&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;59&lt;/span&gt; BZ2,dc9fdbec6a10,v4.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10871&lt;/span&gt;: hostapd: ath1: STA &lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt;:c7:bf:da:db:&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;e IEEE &lt;span style=&#34;color:#666&#34;&gt;802&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;: associated&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can parse this down into usable fields using ksqlDB, which we&amp;#8217;re going to write to a new stream to make subsequent processing easier:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM AP_CLIENT_EVENTS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TIMESTAMPTOSTRING(S_DATE,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Europe/London&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; EVENT_TIME, 
             S_REMOTEADDRESS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; AP_IP, 
             SPLIT(S_MESSAGE,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; CLIENT_MAC, 
             SPLIT(S_MESSAGE,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;IEEE 802.11: &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; ACTION 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; UBNT_SYSLOG 
       &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; S_MESSAGE &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIKE&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;%associated%&amp;#39;&lt;/span&gt; 
       EMIT CHANGES;

ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; EVENT_TIME, AP_IP, CLIENT_MAC, ACTION 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; AP_CLIENT_EVENTS 
        EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------+---------------+------------------+--------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;EVENT_TIME          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;AP_IP          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;CLIENT_MAC        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ACTION        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------+---------------+------------------+--------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;168&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;67&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt;:c7:bf:da:db:&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;e &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;associated    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;07&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;168&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;68&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;f0:c3:&lt;span style=&#34;color:#666&#34;&gt;71&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;a:&lt;span style=&#34;color:#666&#34;&gt;04&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;disassociated &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;09&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;168&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;67&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt;:c7:bf:da:db:&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;e &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;disassociated &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;168&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;67&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;c8:f6:&lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:d3 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;associated    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But we&amp;#8217;ve just got some access point IP addresses and client MAC addresses. What devices actually &lt;em&gt;are&lt;/em&gt; they?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_using_data_from_mongodb_in_ksqldb&#34;&gt;Using data from MongoDB in ksqlDB&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Unifi uses MongoDB as its data store for information about the network, including things like the MAC address and name of client devices, IP addresses of access points, and so on. We can ingest this data into ksqlDB using &lt;a href=&#34;https://debezium.io/documentation/reference/1.0/connectors/mongodb.html&#34;&gt;Debezium&lt;/a&gt; and use it for lookups in our queries. Let&amp;#8217;s pull in information about the network devices and clients:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SOURCE&lt;/span&gt; CONNECTOR SOURCE_MONGODB_UNIFI_01 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;connector.class&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;io.debezium.connector.mongodb.MongoDbConnector&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;mongodb.hosts&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;rs0/mongodb:27017&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;mongodb.name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;unifi&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;collection.whitelist&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;ace.device, ace.user&amp;#39;&lt;/span&gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With the connector running we get a snapshot of the current MongoDB collections, along with &lt;em&gt;any changes to them&lt;/em&gt;, stored in Kafka topics that we can register in ksqlDB. We register them as ksqlDB streams first, because we need to make sure that before creating them as tables we&amp;#8217;ve set the partitioning key correctly:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM DEVICES_RAW &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;unifi.ace.device&amp;#39;&lt;/span&gt;, VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;AVRO&amp;#39;&lt;/span&gt;);
ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM USERS_RAW   &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;unifi.ace.user&amp;#39;&lt;/span&gt;,   VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;AVRO&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;From the streams we can extract the current details about the devices and users:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; EXTRACTJSONFIELD(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AFTER&lt;/span&gt; ,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;$.mac&amp;#39;&lt;/span&gt;)   &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; MAC, 
             EXTRACTJSONFIELD(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AFTER&lt;/span&gt; ,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;$.ip&amp;#39;&lt;/span&gt;)    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; IP, 
             EXTRACTJSONFIELD(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AFTER&lt;/span&gt; ,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;$.name&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; NAME, 
             EXTRACTJSONFIELD(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AFTER&lt;/span&gt; ,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;$.model&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; MODEL, 
             EXTRACTJSONFIELD(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AFTER&lt;/span&gt; ,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;$.type&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TYPE&lt;/span&gt; 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; DEVICES_RAW 
        EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;------------------+------------------------+------+------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;MAC               &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;NAME                    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;MODEL &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TYPE&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;------------------+------------------------+------+------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;f0:&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;f:xx:xx:xx:f4 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;usg.moffatt.me          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;UGW3  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ugw   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;24&lt;/span&gt;:a4:xx:xx:xx:a0 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Attic        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;BZ2   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;uap   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt;:e8:xx:xx:xx:a0 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Study (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;new&lt;/span&gt;)  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;U7PG2 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;uap   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;f0:&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;f:xx:xx:xx:&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Sitting Room &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;U7PG2 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;uap   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;dc:&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;f:xx:xx:xx:&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Kitchen      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;BZ2   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;uap   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;fc:ec:xx:xx:xx:&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;d &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Switch &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Study          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;USC8  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;usw   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
I&amp;#8217;m using &lt;code&gt;EXTRACTJSONFIELD&lt;/code&gt; instead of the &lt;code&gt;io.debezium.connector.mongodb.transforms.ExtractNewDocumentState&lt;/code&gt; transformation because the schema in MongoDB changes between documents and caused a Schema Registry compatibility check failure.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we&amp;#8217;ll write the snapshot of data (plus any new changes that come through from MongoDB) into new Kafka topics, with the data tidied up into a proper schema, and the messages keyed on the column on which they&amp;#8217;re going to be joined later on:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM DEVICES_REKEY &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt;
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;  EXTRACTJSONFIELD(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AFTER&lt;/span&gt; ,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;$.mac&amp;#39;&lt;/span&gt;)   &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; MAC, 
                EXTRACTJSONFIELD(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AFTER&lt;/span&gt; ,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;$.ip&amp;#39;&lt;/span&gt;)    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; IP, 
                EXTRACTJSONFIELD(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AFTER&lt;/span&gt; ,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;$.name&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; NAME, 
                EXTRACTJSONFIELD(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AFTER&lt;/span&gt; ,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;$.model&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; MODEL, 
                EXTRACTJSONFIELD(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AFTER&lt;/span&gt; ,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;$.type&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TYPE&lt;/span&gt; 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt;    DEVICES_RAW 
        PARTITION &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;BY&lt;/span&gt; IP;

ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM USERS_REKEY &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt;
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;  EXTRACTJSONFIELD(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AFTER&lt;/span&gt; ,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;$.mac&amp;#39;&lt;/span&gt;)      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; MAC, 
                EXTRACTJSONFIELD(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AFTER&lt;/span&gt; ,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;$.name&amp;#39;&lt;/span&gt;)     &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; NAME, 
                EXTRACTJSONFIELD(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AFTER&lt;/span&gt; ,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;$.hostname&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; HOSTNAME, 
                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CAST&lt;/span&gt;(EXTRACTJSONFIELD(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AFTER&lt;/span&gt; ,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;$.is_guest&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;BOOLEAN&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; IS_GUEST, 
                EXTRACTJSONFIELD(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AFTER&lt;/span&gt; ,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;$.oui&amp;#39;&lt;/span&gt;)      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; OUI 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt;    USERS_RAW 
        PARTITION &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;BY&lt;/span&gt; MAC;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_data_wrangling_with_ksqldb&#34;&gt;Data wrangling with ksqlDB&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Looking at the user data we notice it&amp;#8217;s going to need a bit of cleaning up to give us a single field by which to label a user&amp;#8217;s connection. There&amp;#8217;s a mix of fields that give us an identifiable label (&lt;code&gt;NAME&lt;/code&gt; / &lt;code&gt;HOSTNAME&lt;/code&gt;) that we need to wrangle together.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; MAC,NAME,HOSTNAME,OUI,IS_GUEST &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; USERS_REKEY EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;------------------+----------------------------+--------------------------+---------+---------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;MAC               &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;NAME                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;HOSTNAME                  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;OUI      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;IS_GUEST &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;------------------+----------------------------+--------------------------+---------+---------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt;:b4:&lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;d:b2:&lt;span style=&#34;color:#666&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Nest                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;AA01AC17140ADS          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;NestLabs &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;44&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;d:e0:&lt;span style=&#34;color:#666&#34;&gt;94&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Robin &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Kindle              &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;                      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;AmazonTe &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;b8:ac:&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;f:&lt;span style=&#34;color:#666&#34;&gt;54&lt;/span&gt;:cf:&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;e &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;crashplan.moffatt.me        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;rmoff&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;Inspiron&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1764&lt;/span&gt;       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Dell     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;66&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;monitoring&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;.moffatt.me    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;                      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;36&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;39&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;61&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;36&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;cdh57&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;node&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;.moffatt.me &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;                      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;c&lt;/span&gt;:cf:&lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;f:&lt;span style=&#34;color:#666&#34;&gt;52&lt;/span&gt;:e9:c3 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Wifi Plug &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Sitting Room    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ESP_52E9C3                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Espressi &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;84&lt;/span&gt;:c7:ea:&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;c&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;53&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;android&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;f1b22cbacced1ca4  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;SonyMobi &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ac:&lt;span style=&#34;color:#666&#34;&gt;29&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;a:&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;f:&lt;span style=&#34;color:#666&#34;&gt;42&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;iPhone                    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Apple    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;c&lt;/span&gt;:b7:&lt;span style=&#34;color:#666&#34;&gt;49&lt;/span&gt;:a7:d2:&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;b &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;HUAWEI_P10&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;f56f4a35871f46 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;HuaweiTe &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;dc:&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;f:db:ed:&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;a:&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;                      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Ubiquiti &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There&amp;#8217;s also the network devices themselves that are also &#39;users&#39; on the network, but which don&amp;#8217;t have a useful label (see the last entry in the table above). For those we&amp;#8217;re going to merge in some data from the &lt;code&gt;DEVICES&lt;/code&gt; table.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First up, we clean the normal users with some SQL into a new derived stream, excluding any network devices (&lt;code&gt;OUI != &#39;Ubiquiti&#39;&lt;/code&gt;). Here we&amp;#8217;re saying to derive a new &lt;code&gt;NAME&lt;/code&gt; field based on:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Existing &lt;code&gt;NAME&lt;/code&gt; plus &lt;code&gt;HOSTNAME&lt;/code&gt; if it exists&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;NAME&lt;/code&gt; doesn&amp;#8217;t exist then try to use &lt;code&gt;HOSTNAME&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If neither exist then take the device manufacturer (&lt;code&gt;OUI&lt;/code&gt;) and concatenate it with the only other identifier, that of whether the device is a guest or not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM USERS_REKEY_CLEANSED &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt;
      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; MAC, 
             &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CASE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHEN&lt;/span&gt; NAME &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;THEN&lt;/span&gt; 
                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CASE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHEN&lt;/span&gt; HOSTNAME &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;THEN&lt;/span&gt;
                    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CASE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHEN&lt;/span&gt; IS_GUEST &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;THEN&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;guest_&amp;#39;&lt;/span&gt; 
                    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;nonguest_&amp;#39;&lt;/span&gt; 
                    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;END&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; OUI 
                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ELSE&lt;/span&gt; HOSTNAME 
                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;END&lt;/span&gt;
            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CASE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHEN&lt;/span&gt; HOSTNAME &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;THEN&lt;/span&gt; NAME 
                    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ELSE&lt;/span&gt; NAME &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39; (&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; HOSTNAME &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;
                 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;END&lt;/span&gt;
            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;END&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; NAME
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; USERS_REKEY 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; OUI &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Ubiquiti&amp;#39;&lt;/span&gt;
        EMIT CHANGES;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Then we insert into the users stream the network devices so that we have a reference for those too when they are active against access points:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INTO&lt;/span&gt; USERS_REKEY_CLEANSED (ROWKEY, MAC, NAME) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; MAC, MAC, NAME &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; DEVICES&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This gives us client names that look like this, which is much more useful:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; MAC, NAME &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; USERS_REKEY_CLEANSED EMIT CHANGES &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;------------------+----------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;MAC               &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;NAME                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;------------------+----------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt;:b4:&lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;d:b2:&lt;span style=&#34;color:#666&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Nest                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;44&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;d:e0:&lt;span style=&#34;color:#666&#34;&gt;94&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Robin &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;  Kindle             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;66&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;monitoring&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;.moffatt.me    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;c&lt;/span&gt;:cf:&lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;f:&lt;span style=&#34;color:#666&#34;&gt;52&lt;/span&gt;:e9:c3 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Wifi Plug &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Sitting Room    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;84&lt;/span&gt;:c7:ea:&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;c&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;53&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;nonguest_SonyMobi           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we declare tables on these two streams which have now had the partitioning key set correctly. The tables are what we&amp;#8217;ll use for the join.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; DEVICES &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;DEVICES_REKEY&amp;#39;&lt;/span&gt;,VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;AVRO&amp;#39;&lt;/span&gt;);
ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; USERS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;USERS_REKEY_CLEANSED&amp;#39;&lt;/span&gt;,VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;AVRO&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_using_ksqldb_to_lookup_reference_data_for_a_stream_of_events&#34;&gt;Using ksqlDB to lookup reference data for a stream of events&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We&amp;#8217;re now in a position to join to the stream of network events to the lookup data from MongoDB:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; E.EVENT_TIME, 
             E.AP_IP, 
             D.NAME, 
             E.CLIENT_MAC, 
             E.ACTION 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; AP_CLIENT_EVENTS E 
             &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LEFT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;OUTER&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; DEVICES D 
                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; E.AP_IP &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; D.ROWKEY
      EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------+--------------+-------------------+------------------+--------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;EVENT_TIME          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;AP_IP         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;NAME               &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;CLIENT_MAC        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ACTION        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------+--------------+-------------------+------------------+--------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;168&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Kitchen &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt;:c7:bf:da:db:&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;e &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;associated    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;07&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;168&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Attic   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;f0:c3:&lt;span style=&#34;color:#666&#34;&gt;71&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;a:&lt;span style=&#34;color:#666&#34;&gt;04&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;disassociated &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;09&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;168&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Kitchen &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt;:c7:bf:da:db:&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;e &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;disassociated &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;168&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Kitchen &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;c8:f6:&lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:d3 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;associated    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;43&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;168&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Attic   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;:b4:cd:&lt;span style=&#34;color:#666&#34;&gt;58&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;f &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;associated    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;ksqlDB doesn&amp;#8217;t support multi-way joins, so we need two hops to get to the finished stream:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM AP_CLIENT_EVENTS_STG_01 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; E.EVENT_TIME, 
                E.AP_IP, 
                D.NAME, 
                E.CLIENT_MAC, 
                E.ACTION 
            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; AP_CLIENT_EVENTS E 
                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LEFT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;OUTER&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; DEVICES D 
                    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; E.AP_IP &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; D.ROWKEY
        EMIT CHANGES;

ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM AP_CLIENT_EVENTS_ENRICHED &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; E.EVENT_TIME, 
                E.AP_IP, 
                E.NAME &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; AP_NAME, 
                E.CLIENT_MAC, 
                U.NAME &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; CLIENT_NAME,
                E.ACTION 
            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; AP_CLIENT_EVENTS_STG_01 E 
                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LEFT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;OUTER&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; USERS U
                    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; E.CLIENT_MAC &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; U.ROWKEY
        EMIT CHANGES;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Finally, we have a stream of access point events, enriched with the name of the access point and the user device connecting or disconnecting from it. It&amp;#8217;s processing all the &lt;em&gt;existing&lt;/em&gt; events on the Kafka topic, as well as new ones &lt;em&gt;as they arrive&lt;/em&gt;. With a handful of SQL statements we&amp;#8217;ve filtered and parsed a raw Syslog into a really useful stream of data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; EVENT_TIME, AP_NAME, CLIENT_NAME, ACTION
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; AP_CLIENT_EVENTS_ENRICHED 
        EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------+-------------------+------------+--------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;EVENT_TIME          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;AP_NAME            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;CLIENT_NAME &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ACTION        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------+-------------------+------------+--------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Kitchen &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;LB110       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;associated    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;07&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Attic   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;asgard&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;04&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;disassociated &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;09&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Kitchen &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;LB110       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;disassociated &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Kitchen &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Toms&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;iPad   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;associated    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/12/ksqldb_syslog_03.gif&#34; alt=&#34;ksqldb syslog 03&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_stateful_aggregation_in_ksqldb&#34;&gt;Stateful aggregation in ksqlDB&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As we saw above, ksqlDB can wrangling data for cleansing and enrichment, and it can join between Kafka topics. ksqlDB can also build stateful aggregations. Here&amp;#8217;s an example of writing a ksqlDB table with the number of disassociation events per five-minute window:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; AP_5MIN_AGG &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt;
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TIMESTAMPTOSTRING(WINDOWSTART(),&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Europe/London&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; WINDOW_START_TS,
           AP_NAME,
           &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; EVENTS
      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; AP_CLIENT_EVENTS_ENRICHED
           WINDOW TUMBLING (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SIZE&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; MINUTES)
     &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; ACTION&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;disassociated&amp;#39;&lt;/span&gt;
     &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;BY&lt;/span&gt; AP_NAME
     EMIT CHANGES;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we can query it, in one of two ways:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&#34;Push&#34; query&lt;/strong&gt; (receive a stream of events from the ksqlDB server as the state changes):&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; WINDOW_START_TS, AP_NAME, EVENTS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; AP_5MIN_AGG EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------+-------------------------+-------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;WINDOW_START_TS      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;AP_NAME                  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;EVENTS &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------+-------------------------+-------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;05&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Attic         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;05&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Kitchen       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Study (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;new&lt;/span&gt;)   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Sitting Room  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Kitchen       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Attic         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;29&lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Attic         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Sitting Room  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Study (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;new&lt;/span&gt;)   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&#34;Pull&#34;&lt;/strong&gt; query (fetch the current state from ksqlDB to the client)&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; ROWKEY, EVENTS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; AP_5MIN_AGG &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; ROWKEY&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Unifi AP - Attic&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AND&lt;/span&gt; WINDOWSTART &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;2019-12-20T16:30:00&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;------------------+-------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ROWKEY            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;EVENTS &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;------------------+-------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Attic  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;29&lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
Query terminated
ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;ksqlDB has a REST API so external clients can also access the state held within it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#008000&#34;&gt;time&lt;/span&gt; curl -s -X POST &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;            http://proxmox01.moffatt.me:18088/query &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;            -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;content-type: application/vnd.ksql.v1+json; charset=utf-8&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;            -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;ksql&amp;#34;:&amp;#34;SELECT ROWKEY, EVENTS FROM AP_5MIN_AGG WHERE ROWKEY=\&amp;#39;&lt;/span&gt;Unifi AP - Attic&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\&amp;#39;&lt;/span&gt; AND &lt;span style=&#34;color:#19177c&#34;&gt;WINDOWSTART&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-12-20T16:30:00&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\&amp;#39;&lt;/span&gt;;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;}&amp;#39; |
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        jq -c &amp;#39;.[] | select(.row!=null).row.columns&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        0.12 real         0.00 user         0.00 sys
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;[&amp;#34;&lt;/span&gt;Unifi AP - Attic&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;,29]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_anomoly_detection_with_ksqldb&#34;&gt;Anomoly detection with ksqlDB&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Building on the above aggregation, we can populate a Kafka topic with a message any time there are more than ten disassociation events for a given access point in a five minute window:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; AP_ALERTS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;ap_alerts_01&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt;
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; WINDOW_START_TS, AP_NAME, EVENTS 
          &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; AP_5MIN_AGG 
          &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; EVENTS &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;
          EMIT CHANGES;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If we don&amp;#8217;t want to store the intermediate aggregate state then we could rewrite this as a single table query using the &lt;code&gt;GROUP BY… HAVING&lt;/code&gt; syntax:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; AP_ALERTS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;ap_alerts_01&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt;
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TIMESTAMPTOSTRING(WINDOWSTART(),&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Europe/London&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; WINDOW_START_TS, 
           AP_NAME, 
           &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; EVENTS 
      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; AP_CLIENT_EVENTS_ENRICHED 
           WINDOW TUMBLING (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SIZE&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; MINUTES) 
     &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; ACTION&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;disassociated&amp;#39;&lt;/span&gt; 
     &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;BY&lt;/span&gt; AP_NAME 
     &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HAVING&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; 
     EMIT CHANGES;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;However we write it, the result is just a Kafka topic that backs the ksqlDB table. This means that any alerting app that can be driven by a Kafka topic can be hooked up to this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; PRINT ap_alerts_01;
Format:AVRO
&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; AM UTC, Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Kitcheno&lt;span style=&#34;color:#666&#34;&gt;@&lt;/span&gt;, &lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;WINDOW_START_TS&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2019-12-17 09:10:00&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AP_NAME&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Unifi AP - Kitchen&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;EVENTS&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;42&lt;/span&gt; PM UTC, Unifi AP &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; Attico$$&lt;span style=&#34;&#34;&gt;�&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;@&lt;/span&gt;, &lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;WINDOW_START_TS&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2019-12-20 16:30:00&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AP_NAME&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Unifi AP - Attic&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;EVENTS&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;29&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_visualising_the_relationship_between_access_points_and_clients&#34;&gt;Visualising the relationship between Access Points and Clients&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Having built this streaming pipeline in ksqlDB that takes the raw Syslog and generates a Kafka topic with a list of Access Points events, we can also use this to stream into Neo4j:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; SINK CONNECTOR SINK_NEO4J_UNIFI_AP_01 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;connector.class&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;streams.kafka.connect.sink.Neo4jSinkConnector&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;key.converter&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;org.apache.kafka.connect.storage.StringConverter&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;topics&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;AP_CLIENT_EVENTS_ENRICHED&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;neo4j.server.uri&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;bolt://neo4j:7687&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;neo4j.authentication.basic.username&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;neo4j&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;neo4j.authentication.basic.password&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;connect&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;neo4j.topic.cypher.AP_CLIENT_EVENTS_ENRICHED&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;MERGE (a:AP{Name: event.AP_NAME, IP: event.AP_IP})  MERGE (c:Client{Name: event.CLIENT_NAME, MAC: event.CLIENT_MAC}) MERGE (c)-[:INTERACTED_WITH {action: event.ACTION}]-&amp;gt;(a)&amp;#39;&lt;/span&gt;
  ); &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With the data in Neo4j it&amp;#8217;s easy to query it for the association patterns of a specific device:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;MATCH&lt;/span&gt; (n:Client &lt;span style=&#34;&#34;&gt;{&lt;/span&gt;Name:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;asgard-04&amp;#39;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;)&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;[rel :INTERACTED_WITH ]&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;(a:AP) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;RETURN&lt;/span&gt; n,a,rel&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/12/neo_ap_01.png&#34; alt=&#34;neo ap 01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can also look at the pattern across numerous devices. Here you can visually identify devices that are probably statically located in my house and only connect to a single AP, and others that roam across all of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;MATCH&lt;/span&gt; (n:Client )&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;[rel :INTERACTED_WITH &lt;span style=&#34;&#34;&gt;{&lt;/span&gt;action:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;associated&amp;#39;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;(a:AP) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;RETURN&lt;/span&gt; n,a,rel &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/12/neo_ap_02.png&#34; alt=&#34;neo ap 02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_sounds_interesting_right&#34;&gt;Sounds interesting, right?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can find all the code to run this on &lt;a href=&#34;https://github.com/confluentinc/demo-scene/tree/master/syslog&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Head to &lt;a href=&#34;https://ksqldb.io/quickstart.html&#34; class=&#34;bare&#34;&gt;https://ksqldb.io/quickstart.html&lt;/a&gt; to try the ksqlDB quickstart&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Join the Confluent Community slack group at &lt;a href=&#34;http://cnfl.io/slack&#34; class=&#34;bare&#34;&gt;http://cnfl.io/slack&lt;/a&gt; and hang out on the #ksqldb channel&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Detecting and Analysing SSH Attacks with ksqlDB</title>
      <link>https://rmoff.github.io/2019/12/18/detecting-and-analysing-ssh-attacks-with-ksqldb/</link>
      <pubDate>2019-12-18</pubDate>
      
      <guid>https://rmoff.github.io/2019/12/18/detecting-and-analysing-ssh-attacks-with-ksqldb/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.github.io/images/2019/12/IMG_1537.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;ve &lt;a href=&#34;https://www.confluent.io/blog/real-time-syslog-processing-apache-kafka-ksql-part-1-filtering/&#34;&gt;written previously&lt;/a&gt; about ingesting Syslog into Kafka and using KSQL to analyse it. I want to revisit the subject since it&amp;#8217;s nearly two years since I wrote about it and some things have changed since then.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;ksqlDB now includes the ability to define connectors from within it, which makes setting things up loads easier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can find the &lt;a href=&#34;https://github.com/confluentinc/demo-scene/tree/master/syslog&#34;&gt;full rig to run this on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_create_and_configure_the_syslog_connector&#34;&gt;Create and configure the Syslog connector&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To start with, create a source connector:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SOURCE&lt;/span&gt; CONNECTOR SOURCE_SYSLOG_UDP_01 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;tasks.max&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;connector.class&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;io.confluent.connect.syslog.SyslogSourceConnector&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;topic&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;syslog&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;syslog.port&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;42514&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;syslog.listener&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;UDP&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;syslog.reverse.dns.remote.ip&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;confluent.license&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;confluent.topic.bootstrap.servers&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;kafka:29092&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;confluent.topic.replication.factor&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This creates a &lt;a href=&#34;http://rmoff.dev/ksldn19-kafka-connect&#34;&gt;Kafka Connect&lt;/a&gt; &lt;a href=&#34;https://www.confluent.io/hub/confluentinc/kafka-connect-syslog&#34;&gt;syslog connector&lt;/a&gt;, running either on the embedded Kafka Connect worker on ksqlDB, or an external Kafka Connect worker (which is what I&amp;#8217;m using).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check that the connector is working (the &lt;code&gt;State&lt;/code&gt; should be &lt;code&gt;RUNNING&lt;/code&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DESCRIBE&lt;/span&gt; CONNECTOR SOURCE_SYSLOG_UDP_01;

Name                 : SOURCE_SYSLOG_UDP_01
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Class&lt;/span&gt;                : io.confluent.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;connect&lt;/span&gt;.syslog.SyslogSourceConnector
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Type&lt;/span&gt;                 : &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;source&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;State&lt;/span&gt;                : RUNNING
WorkerId             : kafka&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;connect&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;8083&lt;/span&gt;

 Task ID &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;State&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; Error Trace
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; RUNNING &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And now test it out by sending a dummy Syslog message from the shell prompt via netcat (&lt;code&gt;nc&lt;/code&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;lt;34&amp;gt;1 2019-12-18T22:14:15.003Z asgard.example.com su - ID47 - Your tea is brewing&amp;#34;&lt;/span&gt; | nc -u localhost &lt;span style=&#34;color:#666&#34;&gt;42514&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Don&amp;#8217;t forget your networking in all this - if you&amp;#8217;re running Kafka Connect in a container then you need to open up the inbound port. Also note that I&amp;#8217;m using UDP so you have to use &lt;code&gt;-u&lt;/code&gt; with netcat (&lt;code&gt;nc&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can examine the Kafka topic that the Syslog message is written to with &lt;code&gt;PRINT&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; PRINT syslog &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; BEGINNING;
Format:AVRO
&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt; PM UTC, &lt;span style=&#34;&#34;&gt;$&lt;/span&gt;asgard.example.com, &lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;RFC5424&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Your tea is brewing&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;asgard.example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tag&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;extension&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;severity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;appName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;su&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;facility&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;remoteAddress&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;172.25.0.1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rawMessage&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;lt;34&amp;gt;1 2019-12-18T22:14:15.003Z asgard.example.com su - ID47 - Your tea is brewing\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;processId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;messageId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ID47&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;structuredData&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceVendor&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceProduct&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceEventClassId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;1576707255003&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Assuming this is working you can now update your actual devices to route their Syslog data to the machine on which Kafka Connect is running. Here&amp;#8217;s an example of the necessary configuration for &lt;code&gt;rsyslog&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;*.* @proxmox01.moffatt.me:42514&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As before, pay attention to your network. If the machines are external to the host machine running Docker (and Kafka Connect is in a container) then you need to use the &lt;em&gt;host&lt;/em&gt; machine&amp;#8217;s name (&lt;code&gt;proxmox01.moffatt.me&lt;/code&gt; in the above example) to route the traffic, and ensure that the Docker container has its port published to the host.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/12/syslog.png&#34; alt=&#34;syslog&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_working_with_syslog_data_in_ksqldb&#34;&gt;Working with Syslog data in ksqlDB&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The first thing to do is register this Kafka topic with ksqlDB:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM SYSLOG &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;syslog&amp;#39;&lt;/span&gt;, VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;AVRO&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Once registered, we can run SQL commands against it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SYSLOG EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ROWTIM&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ROWKEY&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;NAME  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TYPE&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;MESSAG&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;VERSIO&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LEVEL&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;TAG   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;EXTENS&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;SEVERI&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;APPNAM&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;FACILI&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;REMOTE&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;RAWMES&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;PROCES&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;MESSAG&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;STRUCT&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;DEVICE&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;DEVICE&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;DEVICE&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;DEVICE&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;DATE&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;E     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;E     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;N     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ION   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;TY    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;E     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;TY    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ADDRES&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;SAGE  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;SID   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;EID   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;UREDDA&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;VENDOR&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;PRODUC&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;VERSIO&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;EVENTC&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;S     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;TA    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;T     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;N     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;LASSID&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;157670&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;&#34;&gt;$&lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;RFC542&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Your t&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;asgard&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;su    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;172&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ID47  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;157670&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;725500&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;asgard&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ea &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;.examp&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;725500&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;.examp&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;brewin&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;le.com&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt;T2&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;le.com&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;g&lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;003&lt;/span&gt;Z&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; asgar&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;d.exam&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ple.co&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;m su &lt;span style=&#34;color:#666&#34;&gt;-|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; ID47 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|-&lt;/span&gt; Your&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; tea i&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;s brew&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ing&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_selecting_specific_fields_from_a_kafka_message&#34;&gt;Selecting specific fields from a Kafka message&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There&amp;#8217;s a lot of columns in here that we&amp;#8217;re not so interested in. Because we&amp;#8217;re in the land of SQL and schemas, we can just specify the columns that we do want (pulling from the live Kafka topic of Syslog data as it arrives):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TIMESTAMPTOSTRING(&lt;span style=&#34;color:#008000&#34;&gt;DATE&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; SYSLOG_TS, 
             &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;, 
             FACILITY, 
             MESSAGE, 
             REMOTEADDRESS 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SYSLOG 
        EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------+-------------------+---------+--------------------+--------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;SYSLOG_TS           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;               &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;FACILITY &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;MESSAGE             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;REMOTEADDRESS &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------+-------------------+---------+--------------------+--------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;asgard.example.com &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Your tea &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;is&lt;/span&gt; brewing &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;172&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;25&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_enriching_kafka_messages_with_joins_in_ksqldb&#34;&gt;Enriching Kafka messages with joins in ksqlDB&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can also make things easier to understand by building a reference table for the &lt;code&gt;FACILITY&lt;/code&gt; code based on &lt;a href=&#34;https://tools.ietf.org/html/rfc5424&#34;&gt;the Syslog RFC&lt;/a&gt;. This creates and populates a Kafka topic, with a ksqlDB table registered on top of it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; FACILITY (ROWKEY STRING &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;KEY&lt;/span&gt;, DESCRIPTION &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;) 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;facility&amp;#39;&lt;/span&gt;,VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;AVRO&amp;#39;&lt;/span&gt;, PARTITIONS&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INTO&lt;/span&gt; FACILITY &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;kernel messages&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INTO&lt;/span&gt; FACILITY &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;user-level messages&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INTO&lt;/span&gt; FACILITY &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;mail system&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INTO&lt;/span&gt; FACILITY &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;system daemons&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INTO&lt;/span&gt; FACILITY &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;security/authorization messages&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INTO&lt;/span&gt; FACILITY &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;5&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;messages generated internally by syslogd&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INTO&lt;/span&gt; FACILITY &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;6&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;line printer subsystem&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With this table we can enhance the view that we get over the stream of data as it arrives:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TIMESTAMPTOSTRING(S.&lt;span style=&#34;color:#008000&#34;&gt;DATE&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; SYSLOG_TS, 
             S.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;, 
             F.DESCRIPTION &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; FACILITY, 
             S.MESSAGE, 
             S.REMOTEADDRESS 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SYSLOG S
             &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LEFT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;OUTER&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;JOIN&lt;/span&gt;
             FACILITY F &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; S.FACILITY&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;F.ROWKEY
     EMIT CHANGES;

&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------+----------------+----------------+----------------+----------------+ 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;SYSLOG_TS       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;FACILITY        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;MESSAGE         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;REMOTEADDRESS   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; 
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------+----------------+----------------+----------------+----------------+ 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;asgard.example.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;security&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;authori&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Your tea &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;is&lt;/span&gt; brew&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;172&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;25&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; 
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;om              &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;zation messages &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ing             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;You can also use &lt;code&gt;CASE&lt;/code&gt; to enrich fields; for a short list of hard-coded values like these from the RFC one might consider doing this instead:&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;SELECT  […]
        CASE WHEN FACILITY=0 THEN &#39;kernel messages&#39;
            WHEN FACILITY=1 THEN &#39;user-level messages&#39;
            WHEN FACILITY=2 THEN &#39;mail system&#39;
            ELSE &#39;&amp;lt;unknown&amp;gt;&#39;
        END AS FACILITY_DESCRIPTION
        […]
       FROM SYSLOG EMIT CHANGES;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_processing_existing_kafka_data&#34;&gt;Processing existing Kafka data&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But wait! Someone told me that Apache Kafka stores data and doesn&amp;#8217;t delete it just because someone consumed it. We can query &lt;em&gt;existing&lt;/em&gt; data on the topic too, by telling ksqlDB to start its query at the beginning:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;auto.offset.reset&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;earliest&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we get to see &lt;em&gt;all&lt;/em&gt; the messages on the topic!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TIMESTAMPTOSTRING(S.&lt;span style=&#34;color:#008000&#34;&gt;DATE&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; SYSLOG_TS, 
             S.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;, 
             F.DESCRIPTION &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; FACILITY, 
             S.MESSAGE, 
             S.REMOTEADDRESS 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SYSLOG S
             &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LEFT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;OUTER&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;JOIN&lt;/span&gt;
             FACILITY F &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; S.FACILITY&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;F.ROWKEY
     EMIT CHANGES;

&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------+----------------+----------------+----------------+----------------+ 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;SYSLOG_TS       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;FACILITY        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;MESSAGE         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;REMOTEADDRESS   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; 
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------+----------------+----------------+----------------+----------------+ 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;usgmoffattme    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;messages generat&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;set&lt;/span&gt; SCM_CREDENTI&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;172&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;25&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; 
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;58&lt;/span&gt;             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ed internally &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;by&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ALS failed &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;/|                | 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;|                |                | syslogd        |dev/log&amp;#39;&lt;/span&gt;: Protoc&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; 
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ol &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;not&lt;/span&gt; available&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; 
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;usgmoffattme    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;kernel messages &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;imklog &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;, l&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;172&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;25&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; 
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;58&lt;/span&gt;             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;og &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;pro&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; 
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;kmsg started. &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; 
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;BZ2,dc9fdbec6a10&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;system&lt;/span&gt; daemons  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Logread connecte&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;172&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;25&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; 
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;,v4.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10871&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;d &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;168&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; 
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;83&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;42514&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; 
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;asgard.example.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;security&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;authori&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Your tea &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;is&lt;/span&gt; brew&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;172&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;25&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; 
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;om              &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;zation messages &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ing             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; 
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;That&amp;#8217;s quite a lot of messages and quite a lot of noise. Let&amp;#8217;s filter this sucker down into messages just for a particular host:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TIMESTAMPTOSTRING(S.&lt;span style=&#34;color:#008000&#34;&gt;DATE&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; SYSLOG_TS, 
             F.DESCRIPTION &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; FACILITY, 
             S.MESSAGE &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; MESSAGE
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SYSLOG S
             &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LEFT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;OUTER&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;JOIN&lt;/span&gt;
             FACILITY F &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; S.FACILITY&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;F.ROWKEY
       &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; S.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;rpi-03&amp;#39;&lt;/span&gt;
         EMIT CHANGES;

&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------+--------------------------------+--------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;SYSLOG_TS            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;FACILITY                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;MESSAGE                         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------+--------------------------------+--------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;security&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;authorization&lt;/span&gt; messages &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Invalid &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;user&lt;/span&gt; soledad &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;73&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;76&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;102&lt;/span&gt;                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;security&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;authorization&lt;/span&gt; messages &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;input_userauth_request: invalid &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;user&lt;/span&gt; soledad [preauth]          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;security&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;authorization&lt;/span&gt; messages &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Received &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;disconnect&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;73&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;102&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;: Bye Bye [preauth]    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;clock daemon                    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;(smmsp) CMD (test &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;x &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;etc&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;init.d&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                                &lt;span style=&#34;color:#666&#34;&gt;|/&lt;/span&gt;sendmail &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;usr&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;share&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;sendmail&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                                &lt;span style=&#34;color:#666&#34;&gt;|/&lt;/span&gt;sendmail cron&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;msp)             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;security&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;authorization&lt;/span&gt; messages &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;pam_unix(cron:&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;session&lt;/span&gt;): &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;session&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;opened &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;user&lt;/span&gt; root &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;by&lt;/span&gt; (uid&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;40&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;mail &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;system&lt;/span&gt;                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;My unqualified &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;host&lt;/span&gt; name (rpi&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;unknown&lt;/span&gt;; sleeping &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; retry   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Turns out this machine is open to the big bad internet and is being routinely probed and brute-force SSH attempts made on it. This is interesting stuff to analyse and understand what&amp;#8217;s happening as it happens—which is why stream processing is so very useful in this space. Let&amp;#8217;s create a new Kafka topic populated just with any SSH login attempts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM SYSLOG_INVALID_USERS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt;   SYSLOG 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt;  MESSAGE &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIKE&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Invalid user%&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The stream is backed by a new Kafka topic:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SHOW&lt;/span&gt; TOPICS;

 Kafka Topic                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; Partitions &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; Partition Replicas
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-------------------------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;]
 syslog                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
 SYSLOG_INVALID_USERS            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The stream only has messages on it that match the pattern above that we&amp;#8217;ve used to identify attempted SSH logins:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TIMESTAMPTOSTRING(&lt;span style=&#34;color:#008000&#34;&gt;DATE&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; SYSLOG_TS,
              &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;,
              MESSAGE
          &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SYSLOG_INVALID_USERS 
          EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------+--------------+--------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;SYSLOG_TS           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;MESSAGE                                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------+--------------+--------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;51&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;usgmoffattme  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Invalid &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;user&lt;/span&gt; foo &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;168&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;83&lt;/span&gt;         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;55&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;rpi&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;03&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Invalid &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;user&lt;/span&gt; dbus &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;51&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;254&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;140&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;235&lt;/span&gt;       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;55&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;rpi&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;03&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Invalid &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;user&lt;/span&gt; tchs &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;62&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;227&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;rpi&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;03&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Invalid &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;user&lt;/span&gt; postgres &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;103&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;52&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;48&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;09&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;rpi&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;03&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Invalid &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;user&lt;/span&gt; umns &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;62&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;227&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can process the live stream of data further, using &lt;code&gt;SPLIT&lt;/code&gt; and &lt;code&gt;REPLACE&lt;/code&gt; functions to parse the &lt;code&gt;MESSAGE&lt;/code&gt; fields to create an array:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; SPLIT(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;REPLACE&lt;/span&gt;(MESSAGE,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Invalid user &amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39; from &amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; ATTACK_DETAILS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SYSLOG_INVALID_USERS EMIT CHANGES &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ATTACK_DETAILS          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;[foo, &lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;168&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;83&lt;/span&gt;]    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Limit&lt;/span&gt; Reached
Query terminated&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Based on this we can create a second new stream, derived from the first:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM SSH_ATTACKS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TIMESTAMPTOSTRING(&lt;span style=&#34;color:#008000&#34;&gt;DATE&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; SYSLOG_TS, 
           &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;,
           SPLIT(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;REPLACE&lt;/span&gt;(MESSAGE,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Invalid user &amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39; from &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; ATTACK_USER, 
           SPLIT(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;REPLACE&lt;/span&gt;(MESSAGE,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Invalid user &amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39; from &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; ATTACK_IP 
      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SYSLOG_INVALID_USERS 
      EMIT CHANGES;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we have a ksqlDB stream of all attempted logins, with the IP and user ID that was used. This includes all historic data, and any new events as they occur:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; SYSLOG_TS, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;, ATTACK_USER, ATTACK_IP &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SSH_ATTACKS EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------+-------------+------------+--------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;SYSLOG_TS           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;HOST&lt;/span&gt;         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ATTACK_USER &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ATTACK_IP     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------+-------------+------------+--------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;51&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;usgmoffattme &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;foo         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;168&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;usgmoffattme &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;oracle      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;168&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;43&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;usgmoffattme &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;oracle      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;168&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;usgmoffattme &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;vncserver   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;192&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;168&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s take a moment to appreciate what we&amp;#8217;ve built here. We&amp;#8217;ve taken a stream of Syslog events…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;…
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;RFC3164&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;: stahtd[2991]: [STA-TRACKER].stahtd_dump_event(): {\&amp;#34;query_30\&amp;#34;:\&amp;#34;unifi.moffatt.me.\&amp;#34;,\&amp;#34;message_type\&amp;#34;:\&amp;#34;STA_ASSOC_TRACKER\&amp;#34;,\&amp;#34;query_9\&amp;#34;:\&amp;#34;unifi.moffatt.me.\&amp;#34;,\&amp;#34;query_1\&amp;#34;:\&amp;#34;b8-pkc-l6wr6.europe-west2.gcp.confluent.cloud.\&amp;#34;,\&amp;#34;vap\&amp;#34;:\&amp;#34;vwire5\&amp;#34;,\&amp;#34;query_18\&amp;#34;:\&amp;#34;b5-pkc-l6wr6.europe-west2.gcp.confluent.cloud.\&amp;#34;,\&amp;#34;query_server_30\&amp;#34;:\&amp;#34;192.168.10.1\&amp;#34;,\&amp;#34;mac\&amp;#34;:\&amp;#34;18:e8:29:eb:30:a0\&amp;#34;,\&amp;#34;event_type\&amp;#34;:\&amp;#34;dns timeout\&amp;#34;,\&amp;#34;assoc_status\&amp;#34;:\&amp;#34;0\&amp;#34;,\&amp;#34;query_server_1\&amp;#34;:\&amp;#34;192.168.10.1\&amp;#34;,\&amp;#34;query_server_4\&amp;#34;:\&amp;#34;192.168.10.1\&amp;#34;,\&amp;#34;query_server_9\&amp;#34;:\&amp;#34;192.168.10.1\&amp;#34;,\&amp;#34;query_23\&amp;#34;:\&amp;#34;api.eu.amazonalexa.com.\&amp;#34;,\&amp;#34;query_server_8\&amp;#34;:\&amp;#34;192.168.10.1\&amp;#34;,\&amp;#34;query_3\&amp;#34;:\&amp;#34;asimov.vortex.data.microsoft.com.akadns.net.\&amp;#34;,\&amp;#34;query_server_3\&amp;#34;:\&amp;#34;192.168.10.1\&amp;#34;,\&amp;#34;query_4\&amp;#34;:\&amp;#34;asimov.vortex.data.microsoft.com.akadns.net.\&amp;#34;,\&amp;#34;query_8\&amp;#34;:\&amp;#34;local.\&amp;#34;,\&amp;#34;query_server_18\&amp;#34;:\&amp;#34;192.168.10.1\&amp;#34;,\&amp;#34;query_server_23\&amp;#34;:\&amp;#34;192.168.10.1\&amp;#34;}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;U7PG2,f09fc2238301,v4.0.69.10871:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tag&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;extension&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;severity&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;appName&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;facility&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;remoteAddress&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;172.25.0.1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rawMessage&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;lt;14&amp;gt;Dec 18 12:51:24 U7PG2,f09fc2238301,v4.0.69.10871: : stahtd[2991]: [STA-TRACKER].stahtd_dump_event(): {\&amp;#34;query_30\&amp;#34;:\&amp;#34;unifi.moffatt.me.\&amp;#34;,\&amp;#34;message_type\&amp;#34;:\&amp;#34;STA_ASSOC_TRACKER\&amp;#34;,\&amp;#34;query_9\&amp;#34;:\&amp;#34;unifi.moffatt.me.\&amp;#34;,\&amp;#34;query_1\&amp;#34;:\&amp;#34;b8-pkc-l6wr6.europe-west2.gcp.confluent.cloud.\&amp;#34;,\&amp;#34;vap\&amp;#34;:\&amp;#34;vwire5\&amp;#34;,\&amp;#34;query_18\&amp;#34;:\&amp;#34;b5-pkc-l6wr6.europe-west2.gcp.confluent.cloud.\&amp;#34;,\&amp;#34;query_server_30\&amp;#34;:\&amp;#34;192.168.10.1\&amp;#34;,\&amp;#34;mac\&amp;#34;:\&amp;#34;18:e8:29:eb:30:a0\&amp;#34;,\&amp;#34;event_type\&amp;#34;:\&amp;#34;dns timeout\&amp;#34;,\&amp;#34;assoc_status\&amp;#34;:\&amp;#34;0\&amp;#34;,\&amp;#34;query_server_1\&amp;#34;:\&amp;#34;192.168.10.1\&amp;#34;,\&amp;#34;query_server_4\&amp;#34;:\&amp;#34;192.168.10.1\&amp;#34;,\&amp;#34;query_server_9\&amp;#34;:\&amp;#34;192.168.10.1\&amp;#34;,\&amp;#34;query_23\&amp;#34;:\&amp;#34;api.eu.amazonalexa.com.\&amp;#34;,\&amp;#34;query_server_8\&amp;#34;:\&amp;#34;192.168.10.1\&amp;#34;,\&amp;#34;query_3\&amp;#34;:\&amp;#34;asimov.vortex.data.microsoft.com.akadns.net.\&amp;#34;,\&amp;#34;query_server_3\&amp;#34;:\&amp;#34;192.168.10.1\&amp;#34;,\&amp;#34;query_4\&amp;#34;:\&amp;#34;asimov.vortex.data.microsoft.com.akadns.net.\&amp;#34;,\&amp;#34;query_8\&amp;#34;:\&amp;#34;local.\&amp;#34;,\&amp;#34;query_server_18\&amp;#34;:\&amp;#34;192.168.10.1\&amp;#34;,\&amp;#34;query_server_23\&amp;#34;:\&amp;#34;192.168.10.1\&amp;#34;}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;processId&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;messageId&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;structuredData&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceVendor&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceProduct&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceVersion&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceEventClassId&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;1576673484000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;RFC3164&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Invalid user foo from 192.168.10.83&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;usgmoffattme&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tag&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;sshd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;extension&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;severity&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;appName&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;facility&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;remoteAddress&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;172.25.0.1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rawMessage&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;lt;38&amp;gt;Dec 18 12:51:26 usgmoffattme sshd[30243]: Invalid user foo from 192.168.10.83&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;processId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;30243&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;messageId&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;structuredData&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceVendor&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceProduct&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceVersion&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceEventClassId&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;1576673486000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;RFC3164&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;DHCPREQUEST on eth0 to 62.253.131.171 port 67&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;usgmoffattme&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tag&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;dhclient&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;extension&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;severity&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;appName&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;facility&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;remoteAddress&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;172.25.0.1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rawMessage&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;lt;30&amp;gt;Dec 18 12:51:35 usgmoffattme dhclient: DHCPREQUEST on eth0 to 62.253.131.171 port 67&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;processId&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;messageId&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;structuredData&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceVendor&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceProduct&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceVersion&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;deviceEventClassId&amp;#34;&lt;/span&gt;: null, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;1576673495000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
…&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;…and filtered it for messages matching a pattern, derived new field of interest, and streamed this to a Kafka topic. All of this is done using SQL - a very expressive and easy-to-use language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So let&amp;#8217;s now take the data we&amp;#8217;re using within ksqlDB can also be streamed to other places for use there. Maybe we want to analyse the logs through something like Kibana, so we stream just the SSH attack logs to Elasticsearch.  ksqlDB is serving the purpose here of filtering down &lt;em&gt;all&lt;/em&gt; syslogs into just a subset of those that we&amp;#8217;re interested in examining further:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; SINK CONNECTOR SINK_ELASTIC_SYSLOG &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;connector.class&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;io.confluent.connect.elasticsearch.ElasticsearchSinkConnector&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;connection.url&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;http://elasticsearch:9200&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;type.name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;behavior.on.malformed.documents&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;warn&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;errors.tolerance&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;all&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;errors.log.enable&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;errors.log.include.messages&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;topics&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;SYSLOG_INVALID_USERS&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;key.ignore&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;schema.ignore&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;key.converter&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;org.apache.kafka.connect.storage.StringConverter&amp;#39;&lt;/span&gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/12/kibana_ssh_01.png&#34; alt=&#34;kibana ssh 01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Maybe we actually want to analyse the full set of syslogs in Kibana - we can do that too. It depends entirely on the use case that we have in mind, and the relative volumes, as to where it makes sense to do the filtering (ksqlDB vs ad-hoc in Kibana):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; SINK CONNECTOR SINK_ELASTIC_ALL_SYSLOG &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;connector.class&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;io.confluent.connect.elasticsearch.ElasticsearchSinkConnector&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;connection.url&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;http://elasticsearch:9200&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;type.name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;behavior.on.malformed.documents&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;warn&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;errors.tolerance&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;all&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;errors.log.enable&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;errors.log.include.messages&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;topics&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;syslog&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;key.ignore&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;schema.ignore&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;key.converter&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;org.apache.kafka.connect.storage.StringConverter&amp;#39;&lt;/span&gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/12/kibana_ssh_02.png&#34; alt=&#34;kibana ssh 02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can also model the data in Neo4j to look at the relationship between attacked and attacking hosts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; SINK CONNECTOR SINK_NEO4J_SSH_ATTACKS_01 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;connector.class&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;streams.kafka.connect.sink.Neo4jSinkConnector&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;key.converter&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;org.apache.kafka.connect.storage.StringConverter&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;topics&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;SSH_ATTACKS&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;neo4j.server.uri&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;bolt://neo4j:7687&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;neo4j.authentication.basic.username&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;neo4j&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;neo4j.authentication.basic.password&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;connect&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;neo4j.topic.cypher.SSH_ATTACKS&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;WITH event WHERE event.HOST is not null MERGE (h:Host{Hostname: event.HOST})  MERGE (a:Attacker{IP: event.ATTACK_IP}) MERGE (u:Username{name: event.ATTACK_USER}) MERGE (u)&amp;lt;-[:USED_LOGIN_ID]-(a)-[:ATTACKED {timestamp: event.SYSLOG_TS, user: event.ATTACK_USER}]-&amp;gt;(h)&amp;#39;&lt;/span&gt;
  ); &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What I like about Neo4j is that with the browser you can just poke about the data to understand what it looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/12/neo_ssh_02.png&#34; alt=&#34;neo ssh 02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But as you realise certain elements to it you can drop down into Cypher to express a more selective criteria. For example, in digging around the data it became clear that you&amp;#8217;ll get some attack hosts that try one or two usernames and then move on, whilst others try many different users:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/12/neo_ssh_03.png&#34; alt=&#34;neo ssh 03&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Maybe we want to see how many usernames each attack host uses?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;MATCH&lt;/span&gt; (u:Username)&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--(a:Attacker)--(h:Host) 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; a,h,&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;COUNT&lt;/span&gt;(DISINCT u) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; user_count
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;RETURN&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DISTINCT&lt;/span&gt; a, user_count 
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;BY&lt;/span&gt; user_count &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DESC&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/12/neo_ssh_04.png&#34; alt=&#34;neo ssh 04&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_aggregates_and_pull_queries&#34;&gt;Aggregates and Pull Queries&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s get back to ksqlDB to finish with. We&amp;#8217;ve got a stream of Syslog events coming in, as well as the existing events stored. What else can we do with this data? We can build a stateful aggregation on it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; SSH_ATTACKS_BY_USER &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt;
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; ATTACK_USER,
           &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; ATTEMPTS
      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SSH_ATTACKS
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;BY&lt;/span&gt; ATTACK_USER;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s the cool thing with ksqlDB. I can ask ksqlDB to tell me when the state changes - this is a &lt;strong&gt;push&lt;/strong&gt; query. It doesn&amp;#8217;t end until it is cancelled. When the aggregate changes, I get the new value pushed to me (here the &lt;code&gt;oracle&lt;/code&gt; count when from &lt;code&gt;4&lt;/code&gt; to &lt;code&gt;5&lt;/code&gt; whilst the query was running):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; ATTACK_USER, ATTEMPTS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SSH_ATTACKS_BY_USER EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------+-----------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ATTACK_USER   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ATTEMPTS   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------+-----------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;foo           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;vncserver     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;hugh          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;rick          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;oracle        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;oracle        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;

Press CTRL&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;to&lt;/span&gt; interrupt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I can also ask ksqlDB what the &lt;em&gt;current state&lt;/em&gt; is - this is a &lt;strong&gt;pull&lt;/strong&gt; query, and completes as soon as the value is returned (just like when you run a query against a &#34;normal&#34; database):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; ATTACK_USER, ATTEMPTS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SSH_ATTACKS_BY_USER &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; ROWKEY&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;oracle&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------+-----------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ATTACK_USER   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ATTEMPTS   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------+-----------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;oracle        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
Query terminated
ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can use the REST API to run this query yourself from within your application. Here&amp;#8217;s an example with &lt;code&gt;curl&lt;/code&gt;, wrapped with &lt;code&gt;time&lt;/code&gt; to show just how quick it is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#008000&#34;&gt;time&lt;/span&gt; curl -s -X POST &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;            http://ksqldb-server:8088/query &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;            -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;content-type: application/vnd.ksql.v1+json; charset=utf-8&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;            -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;ksql&amp;#34;:&amp;#34;SELECT ATTACK_USER, ATTEMPTS FROM SSH_ATTACKS_BY_USER WHERE ROWKEY=\&amp;#39;&lt;/span&gt;oracle&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\&amp;#39;&lt;/span&gt;;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;}&amp;#39; |
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        jq -c &amp;#39;.[] | select(.row!=null).row.columns&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        0.06 real         0.00 user         0.00 sys
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;[&amp;#34;&lt;/span&gt;oracle&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;,5]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;ksqlDB can also do time-based aggregation. How many SSH attacks were there per user by hour?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; SSH_HOURLY_ATTACKS_BY_USER &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt;
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; ATTACK_USER,
           &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; ATTEMPTS
      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SSH_ATTACKS
           WINDOW TUMBLING (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SIZE&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; HOUR)
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;BY&lt;/span&gt; ATTACK_USER;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Push&lt;/strong&gt; query (server sends clients state as it changes):&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SSH_HOURLY_ATTACKS_BY_USER &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; ROWKEY&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------+---------------+-------------+----------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ROWKEY           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;WINDOWSTART    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ATTACK_USER  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ATTEMPTS  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------+---------------+-------------+----------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;oracle           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1576454400000&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;oracle       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;oracle           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1576540800000&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;oracle       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;oracle           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1576627200000&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;oracle       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
Query terminated
ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pull&lt;/strong&gt; query (client requests current state from server and then exits):&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SSH_HOURLY_ATTACKS_BY_USER &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; ROWKEY&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;oracle&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AND&lt;/span&gt; WINDOWSTART &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;2019-12-18T00:00:00&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------+---------------+-------------+----------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ROWKEY           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;WINDOWSTART    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ATTACK_USER  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ATTEMPTS  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------+---------------+-------------+----------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;oracle           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1576627200000&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;oracle       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
Query terminated
ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_ksqldb_syslog_processing_recap&#34;&gt;ksqlDB &amp;amp; Syslog processing : Recap&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s near real-time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s streaming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It stores data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It can process historical data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It can &lt;em&gt;reprocess&lt;/em&gt; historical data e.g. to refine filters and enrichment processing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It can be used to drive alerts (route messages matching a pattern to a topic, that drives the alert)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It can be used to drive threshold alerts (the SQL clause &lt;code&gt;HAVING&lt;/code&gt; works perfectly in ksqlDB)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It can be used to stream data down to other targets for further analysis&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Copy MongoDB collections from remote to local instance</title>
      <link>https://rmoff.github.io/2019/12/17/copy-mongodb-collections-from-remote-to-local-instance/</link>
      <pubDate>2019-12-17</pubDate>
      
      <guid>https://rmoff.github.io/2019/12/17/copy-mongodb-collections-from-remote-to-local-instance/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.github.io/images/2019/12/IMG_1581.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is revisiting &lt;a href=&#34;https://rmoff.net/2018/03/27/cloning-ubiquitis-mongodb-instance-to-a-separate-server/&#34;&gt;the blog I wrote a while back&lt;/a&gt;, which showed using &lt;code&gt;mongodump&lt;/code&gt; and &lt;code&gt;mongorestore&lt;/code&gt; to copy a MongoDB database from one machine (a Unifi CloudKey) to another. This time instead of a manual lift and shift, I wanted a simple way to automate the update of the target with changes made on the source.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The source is as before, &lt;a href=&#34;https://www.ui.com/unifi/unifi-cloud-key/&#34;&gt;Unifi&amp;#8217;s CloudKey&lt;/a&gt;, which runs MongoDB to store its data about the network - devices, access points, events, and so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_why&#34;&gt;Why?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So that I can get this interesting data from somewhere that I cannot mess with into a place from which I can easily stream it into Kafka.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_the_constraints&#34;&gt;The constraints&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Unifi uses MongoDB &lt;strong&gt;v2.4.10&lt;/strong&gt; which is pretty darn old&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I must not break the source - it runs my home network and my kids will be mad if it stops working just so that I can hack around on it. I want the least-impact option, and I definitely don&amp;#8217;t want to start reconfiguring MongoDB with replicas and stuff like that&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My target MongoDB is running in Docker&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_the_solution&#34;&gt;The solution&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It&amp;#8217;s as hacky as they come. Instead of &lt;code&gt;mongodump&lt;/code&gt; to a file which I then copy to the target and repopulate with &lt;code&gt;mongorestore&lt;/code&gt;, I use Linux pipes and remote command execution with SSH to stream the dump from the source directly into the target.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First bring up a MongoDB container:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run --rm &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;           --publish &lt;span style=&#34;color:#666&#34;&gt;27017&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;           --name mongodb &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;           mongo:4.2.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Then copy across the data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ssh robin@unifi &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    mongodump --port &lt;span style=&#34;color:#666&#34;&gt;27117&lt;/span&gt; --db&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;ace --collection&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;device --out&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;- | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;docker &lt;span style=&#34;color:#008000&#34;&gt;exec&lt;/span&gt; mongodb &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    mongorestore --dir&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;- --db&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;ace --collection&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;device&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In detail:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ssh robin@unifi&lt;/code&gt; connects remotely to the Unifi cloudkey server (using existing &lt;a href=&#34;https://www.rittmanmead.com/blog/2014/12/linux-cluster-sysadmin-ssh-keys/&#34;&gt;SSH keys&lt;/a&gt; for password-less authentication)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;\&lt;/code&gt; is the line continuation character just to make all of this easier to read&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mongodump&lt;/code&gt; is called and the important point here is that I specify &lt;code&gt;--out=-&lt;/code&gt; which instead of dumping to file dumps to &lt;code&gt;stdout&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;|&lt;/code&gt; the magic pipe! This routes the &lt;code&gt;stdout&lt;/code&gt; from &lt;code&gt;mongodump&lt;/code&gt; into…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker exec&lt;/code&gt; runs the following command on the MongoDB container. Because I specify the &lt;code&gt;--interactive&lt;/code&gt; argument it passes the stdout of the previous step as &lt;code&gt;stdin&lt;/code&gt; into…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mongorestore&lt;/code&gt; which reads from &lt;code&gt;stdin&lt;/code&gt; because I&amp;#8217;ve specified &lt;code&gt;--dir=-&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The rest of the parameters are just specifying the database and collection that I want to copy. When this runs you can see the documents get created:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;…&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-12-17T22:10:51.609+0000    restoring ace.device from -
connected to: &lt;span style=&#34;color:#666&#34;&gt;127&lt;/span&gt;.0.0.1:27117
&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-12-17T22:10:51.807+0000    no indexes to restore
&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-12-17T22:10:51.807+0000    finished restoring ace.device &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; documents, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; failures&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-12-17T22:10:51.807+0000    &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; document&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; restored successfully. &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; document&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; failed to restore.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you re-run it you just get duplicate key violations, which is to be expected, and means that in theory I can just rerun this process on a timed loop and pick up any new documents whilst ignoring existing ones. Not very efficient, but fairly effective :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-12-17T22:12:18.253+0000    continuing through error: E11000 duplicate key error collection: ace.device index: _id_ dup key: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; _id: ObjectId&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;583854cde4b001431e4e4982&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-12-17T22:12:18.253+0000    continuing through error: E11000 duplicate key error collection: ace.device index: _id_ dup key: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; _id: ObjectId&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;5d77b7a8cf2b2b01c42811b5&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-12-17T22:12:18.253+0000    continuing through error: E11000 duplicate key error collection: ace.device index: _id_ dup key: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; _id: ObjectId&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;58385328e4b001431e4e497a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-12-17T22:12:18.254+0000    continuing through error: E11000 duplicate key error collection: ace.device index: _id_ dup key: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; _id: ObjectId&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;58b3fb48e4b0b79e50242621&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-12-17T22:12:18.254+0000    continuing through error: E11000 duplicate key error collection: ace.device index: _id_ dup key: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; _id: ObjectId&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;58b406f1e4b0e334d74c46e4&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-12-17T22:12:18.254+0000    no indexes to restore
&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-12-17T22:12:18.254+0000    finished restoring ace.device &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; documents, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; failures&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-12-17T22:12:18.254+0000    &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; document&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; restored successfully. &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; document&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; failed to restore.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_iterating_across_collections&#34;&gt;Iterating across collections&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Because we&amp;#8217;re using stdout/stdin we have to specify the database and collection. To loop over them you can just use a &lt;a href=&#34;https://www.cyberciti.biz/faq/bash-for-loop/&#34;&gt;for loop in bash&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; c in collection_foo collection_bar
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;do&lt;/span&gt;
    ssh robin@unifi &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;        mongodump --port &lt;span style=&#34;color:#666&#34;&gt;27117&lt;/span&gt; --db&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;ace --collection&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$c&lt;/span&gt; --out&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;- | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    docker &lt;span style=&#34;color:#008000&#34;&gt;exec&lt;/span&gt; --interactive mongodb &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;        mongorestore --dir&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;- --db&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;ace --collection&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$c&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This will run the same import/export for &lt;code&gt;collection_foo&lt;/code&gt; and &lt;code&gt;collection_bar&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Kafka Connect - Request timed out</title>
      <link>https://rmoff.github.io/2019/11/29/kafka-connect-request-timed-out/</link>
      <pubDate>2019-11-29</pubDate>
      
      <guid>https://rmoff.github.io/2019/11/29/kafka-connect-request-timed-out/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.github.io/img/default-header-img.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A short &amp;amp; sweet blog post to help people Googling for this error, and me next time I encounter it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The scenario: trying to create a connector in Kafka Connect (running in distributed mode, one worker) failed with the &lt;code&gt;curl&lt;/code&gt; response&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;HTTP/1.1 &lt;span style=&#34;color:#666&#34;&gt;500&lt;/span&gt; Internal Server Error
Date: Fri, &lt;span style=&#34;color:#666&#34;&gt;29&lt;/span&gt; Nov &lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;:33:53 GMT
Content-Type: application/json
Content-Length: &lt;span style=&#34;color:#666&#34;&gt;48&lt;/span&gt;
Server: Jetty&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;.4.18.v20190429&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;error_code&amp;#34;&lt;/span&gt;:500,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Request timed out&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But, no error in the Kafka Connect worker log (at &lt;code&gt;INFO&lt;/code&gt; level anyway). Most puzzling. After a lot of back &amp;amp; forth comparing my config with a working environment I tracked this down to a mis-configuration of my Kafka broker. Running a single broker, I had not specified an override value for the configuration &lt;code&gt;offsets.topic.replication.factor&lt;/code&gt;, which meant that it took the default of three. Three replicas, but only one broker…that&amp;#8217;s not going to be a good situation, and well it wasn&amp;#8217;t on checking my broker log which was full of continually repeating errors:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-11-29 &lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;:40:46,841&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; ERROR &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;KafkaApi-1&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Number of alive brokers &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; does not meet the required replication factor &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; the offsets topic &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;configured via &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;offsets.topic.replication.factor&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;. This error can be ignored &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; the cluster is starting up and not all brokers are up yet. &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;kafka.server.KafkaApis&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-11-29 &lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;:40:46,945&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; ERROR &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;KafkaApi-1&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Number of alive brokers &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; does not meet the required replication factor &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; the offsets topic &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;configured via &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;offsets.topic.replication.factor&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;. This error can be ignored &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; the cluster is starting up and not all brokers are up yet. &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;kafka.server.KafkaApis&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-11-29 &lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;:40:47,048&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; ERROR &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;KafkaApi-1&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Number of alive brokers &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; does not meet the required replication factor &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; the offsets topic &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;configured via &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;offsets.topic.replication.factor&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;. This error can be ignored &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; the cluster is starting up and not all brokers are up yet. &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;kafka.server.KafkaApis&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;…&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Presumably since Kafka Connect uses the offsets topic for its &lt;a href=&#34;https://rmoff.net/2019/11/22/common-mistakes-made-when-configuring-multiple-kafka-connect-workers/&#34;&gt;own internal load balancing&lt;/a&gt; the absence of it caused Kafka Connect to not be able to create a connector.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The solution? Configure Kafka correctly :) Since I was using Docker Compose for my cluster I set:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;After bouncing the Kafka broker, Kafka Connect worked fine.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Logged as &lt;a href=&#34;https://issues.apache.org/jira/browse/KAFKA-9252&#34;&gt;KAFKA-9252&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Using tcpdump With Docker</title>
      <link>https://rmoff.github.io/2019/11/29/using-tcpdump-with-docker/</link>
      <pubDate>2019-11-29</pubDate>
      
      <guid>https://rmoff.github.io/2019/11/29/using-tcpdump-with-docker/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.github.io/images/2019/11/IMG_1337.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I was doing some troubleshooting between two services recently and wanting to poke around to see what was happening in the REST calls between them. Normally I&amp;#8217;d reach for &lt;code&gt;tcpdump&lt;/code&gt; to do this but imagine my horror when I saw:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;root@ksqldb-server:/# tcpdump
bash: tcpdump: &lt;span style=&#34;color:#008000&#34;&gt;command&lt;/span&gt; not found&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Of course, being Docker containers and being built with the correct philosophy of not including the kitchen sink, &lt;code&gt;tcpdump&lt;/code&gt; wasn&amp;#8217;t present.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;My &lt;a href=&#34;https://twitter.com/rmoff/status/1195382425536348165&#34;&gt;erstwhile companion on my IT career, Google&lt;/a&gt;, soon pointed me to the answer courtesy of &lt;a href=&#34;https://twitter.com/xxradar&#34;&gt;Philippe Bogaerts&lt;/a&gt; in his blog post &lt;a href=&#34;https://medium.com/@xxradar/how-to-tcpdump-effectively-in-docker-2ed0a09b5406&#34;&gt;How to TCPdump effectively in Docker&lt;/a&gt;. Here I&amp;#8217;ll shamelessly plagiarise the salient points and apply them to my Docker situation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First up, you can build Docker images using &lt;a href=&#34;http://tldp.org/LDP/abs/html/here-docs.html&#34;&gt;Here Documents&lt;/a&gt; which is pretty cool:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker build -t tcpdump - &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;lt;&amp;lt;EOF 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;FROM ubuntu 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y tcpdump 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CMD tcpdump -i eth0 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So that&amp;#8217;s built me a local image with &lt;code&gt;tcpdump&lt;/code&gt; on:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker images
REPOSITORY   TAG      IMAGE ID      CREATED             SIZE
tcpdump      latest   eebe12b8051f  &lt;span style=&#34;color:#666&#34;&gt;31&lt;/span&gt; minutes ago      &lt;span style=&#34;color:#666&#34;&gt;98&lt;/span&gt;.3MB&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m interested in the communication between these two containers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker ps
CONTAINER ID        IMAGE                                          COMMAND                   CREATED             STATUS                  PORTS                              NAMES
20a7bb264c82        confluentinc/ksqldb-server:0.6.0               &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/usr/bin/docker/run&amp;#34;&lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt; hours ago        Up &lt;span style=&#34;color:#666&#34;&gt;42&lt;/span&gt; minutes           &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:8088-&amp;gt;8088/tcp             ksqldb-server
df2be147f1ef        confluentinc/cp-kafka-connect:5.4.0-beta1      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;bash -c &amp;#39;echo \&amp;#34;Inst…&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt; hours ago        Up &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt; hours &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;healthy&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:8083-&amp;gt;8083/tcp, &lt;span style=&#34;color:#666&#34;&gt;9092&lt;/span&gt;/tcp   kafka-connect-01&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Using Docker&amp;#8217;s ability to run a container that &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#network-container&#34;&gt;attaches to the network of another&lt;/a&gt; with the &lt;code&gt;--network=container:&amp;lt;container_name&amp;gt;&lt;/code&gt; option we can now run &lt;code&gt;tcpdump&lt;/code&gt; &#34;piggybacked&#34; on my container of interest:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run --tty --net&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;container:ksqldb-server tcpdump&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;From this we can see all the network chatter going on:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker run --tty --net&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;container:ksqldb-server tcpdump
tcpdump: verbose output suppressed, use -v or -vv &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; full protocol decode
listening on eth0, link-type EN10MB &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;Ethernet&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;, capture size &lt;span style=&#34;color:#666&#34;&gt;262144&lt;/span&gt; bytes
&lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;:11:11.547672 IP kafka.ksqldb-twitter_default.29092 &amp;gt; ksqldb-server.59926: Flags &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;P.&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, seq &lt;span style=&#34;color:#666&#34;&gt;373631892&lt;/span&gt;:373631900, ack &lt;span style=&#34;color:#666&#34;&gt;22720794&lt;/span&gt;, win &lt;span style=&#34;color:#666&#34;&gt;15552&lt;/span&gt;, options &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span style=&#34;color:#666&#34;&gt;65125468&lt;/span&gt; ecr &lt;span style=&#34;color:#666&#34;&gt;65125418&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, length &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;:11:11.547806 IP kafka.ksqldb-twitter_default.29092 &amp;gt; ksqldb-server.59926: Flags &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;P.&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, seq &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;:22, ack &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, win &lt;span style=&#34;color:#666&#34;&gt;15552&lt;/span&gt;, options &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span style=&#34;color:#666&#34;&gt;65125468&lt;/span&gt; ecr &lt;span style=&#34;color:#666&#34;&gt;65125418&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, length &lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;:11:11.547955 IP ksqldb-server.59926 &amp;gt; kafka.ksqldb-twitter_default.29092: Flags &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, ack &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;, win &lt;span style=&#34;color:#666&#34;&gt;32044&lt;/span&gt;, options &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span style=&#34;color:#666&#34;&gt;65125468&lt;/span&gt; ecr &lt;span style=&#34;color:#666&#34;&gt;65125468&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, length &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;…&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What we can see here is our container (&lt;a href=&#34;https://ksqldb.io&#34;&gt;ksqlDB server&lt;/a&gt;) talking to the Kafka broker &lt;code&gt;kafka.ksqldb-twitter_default.29092&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;kafka&lt;/code&gt; is the broker&amp;#8217;s hostname&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ksqldb-twitter_default&lt;/code&gt; the name of the Docker network (that in this case Docker Compose has created)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;29092&lt;/code&gt; the &lt;a href=&#34;https://rmoff.net/2018/08/02/kafka-listeners-explained/&#34;&gt;Kafka broker&amp;#8217;s listener port&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m not interested in this traffic, so instead of using the default runtime arguments for &lt;code&gt;tcpdump&lt;/code&gt; that were defined in the &lt;code&gt;CMD&lt;/code&gt; section when we built the Docker image above, we can override it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run --tty --net&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;container:ksqldb-server tcpdump tcpdump -N -A &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;port 8083&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first &lt;code&gt;tcpdump&lt;/code&gt; is the name of the Docker image to run&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The second &lt;code&gt;tcpdump&lt;/code&gt; overrides the command to execute (bypassing the &lt;code&gt;CMD&lt;/code&gt; default of the image), and calls &lt;code&gt;tcpdump&lt;/code&gt; with arguments:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-N&lt;/code&gt; - Don&amp;#8217;t include the domain qualifications (in this case the &lt;code&gt;ksqldb-twitter_default&lt;/code&gt; network name)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-A&lt;/code&gt; - render in ASCII&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#39;port 8083&#39;&lt;/code&gt; - Only show traffic on port 8083&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we get to see the stuff we&amp;#8217;re interested in, like the ksqlDB server sending a REST call to create a connector&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;:15:02.394620 IP ksqldb-server.52086 &amp;gt; kafka-connect-01.8083: Flags &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;P.&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, seq &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;:898, ack &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, win &lt;span style=&#34;color:#666&#34;&gt;229&lt;/span&gt;, options &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span style=&#34;color:#666&#34;&gt;65148580&lt;/span&gt; ecr &lt;span style=&#34;color:#666&#34;&gt;65148580&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, length &lt;span style=&#34;color:#666&#34;&gt;897&lt;/span&gt;
E.....@.@..9.........v...^..7..............
........POST /connectors HTTP/1.1
Content-Length: &lt;span style=&#34;color:#666&#34;&gt;662&lt;/span&gt;
Content-Type: application/json; &lt;span style=&#34;color:#19177c&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;UTF-8
Host: kafka-connect-01:8083
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.5.3 &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;Java/1.8.0_222&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
Accept-Encoding: gzip,deflate

&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;SOURCE_TWITTER_01&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;connector.class&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;com.github.jcustenborder.kafka.connect.twitter.TwitterSourceConnector&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;twitter.oauth.accessToken&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;file&lt;/span&gt;:/data/credentials.pro
[…]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;My thanks to &lt;a href=&#34;https://twitter.com/xxradar&#34;&gt;Philippe Bogaerts&lt;/a&gt; for his excellent blog post &lt;a href=&#34;https://medium.com/@xxradar/how-to-tcpdump-effectively-in-docker-2ed0a09b5406&#34;&gt;How to TCPdump effectively in Docker&lt;/a&gt; on which this one is entirely based&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Common mistakes made when configuring multiple Kafka Connect workers</title>
      <link>https://rmoff.github.io/2019/11/22/common-mistakes-made-when-configuring-multiple-kafka-connect-workers/</link>
      <pubDate>2019-11-22</pubDate>
      
      <guid>https://rmoff.github.io/2019/11/22/common-mistakes-made-when-configuring-multiple-kafka-connect-workers/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.github.io/images/2019/11/IMG_1281.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Kafka Connect can be deployed in two modes: &lt;strong&gt;Standalone&lt;/strong&gt; or &lt;strong&gt;Distributed&lt;/strong&gt;. You can learn more about them in my &lt;a href=&#34;http://rmoff.dev/ksldn19-kafka-connect&#34;&gt;Kafka Summit London 2019 talk&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I usually recommend &lt;strong&gt;Distributed&lt;/strong&gt; for several reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It can scale&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is fault-tolerant&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It can be run on a single node sandbox or a multi-node production environment&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is the same configuration method however you run it&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I usually find that &lt;strong&gt;Standalone&lt;/strong&gt; is appropriate when:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You need to guarantee locality of task execution, such as picking up a log file from a folder on a specific machine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You don&amp;#8217;t care about scale or fault-tolerance ;-)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You like re-learning how to configure something when you realise that you &lt;em&gt;do&lt;/em&gt; care about scale or fault-tolerance X-D&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;My last snarky point on the list is why even if you&amp;#8217;re just playing around with Kafka Connect on a laptop, learning it in Distributed mode means you learn it once, and then you&amp;#8217;re all set. If you start with Standalone and its &lt;code&gt;.properties&lt;/code&gt; method of passing configuration files to the worker at startup, and then come to use Distributed you have to re-learn how to use the REST interface etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/11/connect.png&#34; alt=&#34;connect&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So anyway…a long lead into a short article pointing out some of the common mistakes that can be made when setting up multiple Kafka Connect workers in a cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As always, refer to &lt;a href=&#34;https://docs.confluent.io/current/connect/concepts.html#distributed-workers&#34;&gt;the documentation&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_mistake_1_rest_advertised_host_name_set_to_localhost&#34;&gt;Mistake 1: &lt;code&gt;rest.advertised.host.name&lt;/code&gt; set to &lt;code&gt;localhost&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;code&gt;rest.advertised.host.name&lt;/code&gt; (or if you&amp;#8217;re using Docker, &lt;code&gt;CONNECT_REST_ADVERTISED_HOST_NAME&lt;/code&gt;) is how a Connect worker communicates with other workers in the cluster. If you set it to &lt;code&gt;localhost&lt;/code&gt; then each worker in the cluster will only ever be able to contact itself when you use the REST interface, e.g. to send configuration updates. If the worker happens to be the leader of the connect cluster then the command will work, but if it&amp;#8217;s not then you&amp;#8217;ll get this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;{&#34;error_code&#34;:409,&#34;message&#34;:&#34;Cannot complete request because of a conflicting operation (e.g. worker rebalance)&#34;}⏎&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you front your Kafka Connect workers with a load balancer with a random/round-robin policy then you&amp;#8217;ll see the above error &#34;randomly&#34;, since you&amp;#8217;ll only get it if you happen to be forwarded to a worker that is not the leader.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The second problem with doing this is that even though you might get connectors running successfully (if you send the config REST call to a worker that is the leader) the tasks that run across the cluster will all be identified as running on &lt;code&gt;localhost&lt;/code&gt;, which makes it impossible to determine which worker they&amp;#8217;re on. Here&amp;#8217;s an example of a connector running a six tasks across three workers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ curl -s &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;http://localhost:8083/connectors?expand=info&amp;amp;expand=status&amp;#34;&lt;/span&gt; | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;            jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#34;source-datagen-01&amp;#34;.status.tasks&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;state&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;worker_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;localhost:8083&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;state&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;worker_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;localhost:8083&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;state&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;worker_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;localhost:8083&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;state&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;worker_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;localhost:8083&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;state&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;worker_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;localhost:8083&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;state&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;worker_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;localhost:8083&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;FIX&lt;/strong&gt;: make sure &lt;code&gt;rest.advertised.host.name&lt;/code&gt; / &lt;code&gt;CONNECT_REST_ADVERTISED_HOST_NAME&lt;/code&gt; is set to &lt;em&gt;the hostname of the worker that is resolvable to the other workers&lt;/em&gt;. If you&amp;#8217;ve got a private network (e.g. Docker, VPC, etc) then this is the &lt;strong&gt;internal&lt;/strong&gt; hostname/IP of the workers. It is nothing to do with the &lt;strong&gt;external&lt;/strong&gt; hostname that you might access it by through a load balancer etc.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_mistake_2_rest_advertised_host_name_set_to_something_not_resolvable_by_the_workers&#34;&gt;Mistake 2: &lt;code&gt;rest.advertised.host.name&lt;/code&gt; set to something not resolvable by the workers&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is a variation on the above problem. The &lt;code&gt;rest.advertised.host.name&lt;/code&gt; (or if you&amp;#8217;re using Docker, &lt;code&gt;CONNECT_REST_ADVERTISED_HOST_NAME&lt;/code&gt;) is how a Connect worker communicates with other workers in the cluster. It needs to be something that can be &lt;em&gt;resolved by the other workers&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A problem that can arise is if you set this to an address that may be resolvable outside the Kafka Connect cluster (e.g. an external DNS hostname) but which isn&amp;#8217;t within the cluster&amp;#8217;s network.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you do this then similarly to above, if you send the REST call to the worker that happens to be the leader of the cluster then things will work - but if it&amp;#8217;s not the leader you&amp;#8217;ll get&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;{&#34;error_code&#34;:500,&#34;message&#34;:&#34;IO Error trying to forward REST request: java.net.UnknownHostException: foobar2: Name or service not known&#34;}⏎&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;(where &lt;code&gt;foobar2&lt;/code&gt; is the hostname of the leader worker of the cluster)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Since Kafka Connect uses Kafka topics to distribute configuration, if you &lt;em&gt;do&lt;/em&gt; send the REST call to the leader then it writes the config to the topic which the other workers then pick up - hence the connector will still execute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;FIX&lt;/strong&gt;: make sure &lt;code&gt;rest.advertised.host.name&lt;/code&gt; / &lt;code&gt;CONNECT_REST_ADVERTISED_HOST_NAME&lt;/code&gt; is set to &lt;em&gt;the hostname of the worker that is resolvable to the other workers&lt;/em&gt;. If you&amp;#8217;ve got a private network (e.g. Docker, VPC, etc) then this is the &lt;strong&gt;internal&lt;/strong&gt; hostname/IP of the workers. It is nothing to do with the &lt;strong&gt;external&lt;/strong&gt; hostname that you might access it by through a load balancer etc.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_mistake_3_sharing_the_same_kafka_topics_for_different_kafka_connect_clusters&#34;&gt;Mistake 3: Sharing the same Kafka topics for different Kafka Connect clusters&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Kafka Connect uses Kafka topics to share and persist information about connector configuration, offsets, and the status of tasks. For each Kafka Connect cluster that you run, you need &lt;strong&gt;a unique set of three Kafka topics&lt;/strong&gt;. If you try to share them, even having set a different &lt;code&gt;group.id&lt;/code&gt; for your Kafka Connect workers, you&amp;#8217;ll find that each cluster will start running the other&amp;#8217;s connectors too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can see why by examining the config topic; it doesn&amp;#8217;t include the &lt;code&gt;group.id&lt;/code&gt; in the key for the messages that share the configuration (&lt;em&gt;perhaps it should&lt;/em&gt;?), which means that any worker reading from this topic will assume that it&amp;#8217;s for it to run and share amongst its cluster&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kafkacat -b localhost:9092 -t _kafka-connect-configs -o beginning -f &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;key: %k, payload: %s\n&amp;#39;&lt;/span&gt; -u -C

key: connector-source-datagen-01, payload: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;connector.class&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.kafka.connect.datagen.DatagenConnector&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;key.converter&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;kafka.topic&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;item_details_01&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;max.interval&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;250&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;quickstart&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tasks.max&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;source-datagen-01&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}}&lt;/span&gt;
key: task-source-datagen-01-0, payload: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;connector.class&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.kafka.connect.datagen.DatagenConnector&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;quickstart&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;task.class&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.kafka.connect.datagen.DatagenTask&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tasks.max&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;source-datagen-01&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;kafka.topic&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;item_details_01&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;max.interval&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;250&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;key.converter&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}}&lt;/span&gt;
key: task-source-datagen-01-1, payload: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;connector.class&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.kafka.connect.datagen.DatagenConnector&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;quickstart&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;task.class&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.kafka.connect.datagen.DatagenTask&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tasks.max&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;source-datagen-01&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;kafka.topic&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;item_details_01&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;max.interval&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;250&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;key.converter&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}}&lt;/span&gt;
key: task-source-datagen-01-2, payload: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;connector.class&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.kafka.connect.datagen.DatagenConnector&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;quickstart&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;task.class&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.kafka.connect.datagen.DatagenTask&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tasks.max&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;source-datagen-01&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;kafka.topic&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;item_details_01&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;max.interval&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;250&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;key.converter&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}}&lt;/span&gt;
key: task-source-datagen-01-3, payload: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;connector.class&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.kafka.connect.datagen.DatagenConnector&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;quickstart&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;task.class&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.kafka.connect.datagen.DatagenTask&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tasks.max&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;source-datagen-01&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;kafka.topic&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;item_details_01&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;max.interval&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;250&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;key.converter&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}}&lt;/span&gt;
key: task-source-datagen-01-4, payload: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;connector.class&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.kafka.connect.datagen.DatagenConnector&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;quickstart&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;task.class&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.kafka.connect.datagen.DatagenTask&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tasks.max&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;source-datagen-01&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;kafka.topic&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;item_details_01&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;max.interval&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;250&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;key.converter&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}}&lt;/span&gt;
key: task-source-datagen-01-5, payload: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;connector.class&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.kafka.connect.datagen.DatagenConnector&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;quickstart&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;task.class&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.kafka.connect.datagen.DatagenTask&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tasks.max&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;source-datagen-01&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;kafka.topic&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;item_details_01&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;max.interval&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;250&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;key.converter&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}}&lt;/span&gt;
key: commit-source-datagen-01, payload: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tasks&amp;#34;&lt;/span&gt;:6&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_interested_to_know_more&#34;&gt;Interested to know more?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can see my notes and try out the test rig on Docker Compose &lt;a href=&#34;https://github.com/confluentinc/demo-scene/tree/master/connect-cluster&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Streaming data from SQL Server to Kafka to Snowflake ❄️ with Kafka Connect</title>
      <link>https://rmoff.github.io/2019/11/20/streaming-data-from-sql-server-to-kafka-to-snowflake-with-kafka-connect/</link>
      <pubDate>2019-11-20</pubDate>
      
      <guid>https://rmoff.github.io/2019/11/20/streaming-data-from-sql-server-to-kafka-to-snowflake-with-kafka-connect/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.github.io/images/2019/11/IMG_1318.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.snowflake.com/&#34;&gt;Snowflake&lt;/a&gt; is &lt;em&gt;the data warehouse built for the cloud&lt;/em&gt;, so let&amp;#8217;s get all ☁️ cloudy and stream some data from Kafka running in &lt;a href=&#34;https://confluent.cloud&#34;&gt;Confluent Cloud&lt;/a&gt; to Snowflake!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What I&amp;#8217;m showing also works just as well for an on-premises Kafka cluster. I&amp;#8217;m using SQL Server as an example data source, with Debezium to capture and stream and changes from it into Kafka.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/11/sf01.png&#34; alt=&#34;sf01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m assuming that you&amp;#8217;ve signed up for &lt;a href=&#34;https://confluent.cloud/&#34;&gt;Confluent Cloud&lt;/a&gt; and &lt;a href=&#34;https://www.snowflake.com/try-the-data-warehouse-built-for-the-cloud/&#34;&gt;Snowflake&lt;/a&gt; and are the proud owner of credentials for both. I&amp;#8217;m going to use a demo rig based on Docker to provision SQL Server and a Kafka Connect worker, but you can use your own setup if you want.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All the code shown here is based on &lt;a href=&#34;https://github.com/confluentinc/demo-scene/tree/master/pipeline-to-the-cloud&#34;&gt;this github repo&lt;/a&gt;. If you&amp;#8217;re following along then make sure you set up &lt;code&gt;.env&lt;/code&gt; (copy the template from &lt;code&gt;.env.example&lt;/code&gt;) with all of your cloud details. This &lt;code&gt;.env&lt;/code&gt; file gets mounted in the Docker container to &lt;code&gt;/data/credentials.properties&lt;/code&gt;, which is what&amp;#8217;s referenced in the connector configurations below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_sql_server_️_kafka_with_debezium&#34;&gt;SQL Server ➡️ Kafka with Debezium&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;SQL Server needs to be configured for CDC at a database level:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;USE [demo]
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;GO&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;EXEC&lt;/span&gt; sys.sp_cdc_enable_db
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;GO&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and then per table:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;USE [demo]

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;EXEC&lt;/span&gt; sys.sp_cdc_enable_table
&lt;span style=&#34;color:#666&#34;&gt;@&lt;/span&gt;source_schema &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;dbo&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;color:#666&#34;&gt;@&lt;/span&gt;source_name   &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;ORDERS&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;color:#666&#34;&gt;@&lt;/span&gt;role_name     &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,
&lt;span style=&#34;color:#666&#34;&gt;@&lt;/span&gt;supports_net_changes &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;GO&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Once that&amp;#8217;s done you can setup the connector. If you&amp;#8217;ve not installed it already then make sure you&amp;#8217;ve installed the Debezium SQL Server connector in your Kafka Connect worker and restarted it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;confluent-hub install --no-prompt debezium/debezium-connector-sqlserver:0.10.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check that the plugin has been loaded successfully:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ curl -s localhost:8083/connector-plugins|jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.[].class&amp;#39;&lt;/span&gt;|grep debezium
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.debezium.connector.sqlserver.SqlServerConnector&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Debezium will write to a topic with all of the data from SQL Server. Debezium also needs its own topic for tracking the DDL—and we need to pre-create both these topics (see &lt;a href=&#34;https://rmoff.net/2019/10/16/using-kafka-connect-and-debezium-with-confluent-cloud/&#34;&gt;this article&lt;/a&gt; for more details):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ccloud kafka topic create --partitions &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; dbz_dbhistory.mssql.asgard-01
$ ccloud kafka topic create mssql-01-mssql.dbo.ORDERS
$ ccloud kafka topic list
                 Name
+-------------------------------------+
  dbz_dbhistory.mssql.asgard-01
  mssql-01-mssql.dbo.ORDERS&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now create the connector. It&amp;#8217;s a bit more verbose because we&amp;#8217;re using a secure Kafka cluster and Debezium needs the details passed directly to it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -i -X PUT -H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    http://localhost:8083/connectors/source-debezium-mssql-01/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;connector.class&amp;#34;: &amp;#34;io.debezium.connector.sqlserver.SqlServerConnector&amp;#34;, 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.hostname&amp;#34;: &amp;#34;mssql&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.port&amp;#34;: &amp;#34;1433&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.user&amp;#34;: &amp;#34;sa&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.password&amp;#34;: &amp;#34;Admin123&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.dbname&amp;#34;: &amp;#34;demo&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.server.name&amp;#34;: &amp;#34;mssql&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;table.whitelist&amp;#34;:&amp;#34;dbo.orders&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.history.kafka.bootstrap.servers&amp;#34;: &amp;#34;${file:/data/credentials.properties:CCLOUD_BROKER_HOST}:9092&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.history.kafka.topic&amp;#34;: &amp;#34;dbz_dbhistory.mssql.asgard-01&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.history.consumer.security.protocol&amp;#34;: &amp;#34;SASL_SSL&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.history.consumer.ssl.endpoint.identification.algorithm&amp;#34;: &amp;#34;https&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.history.consumer.sasl.mechanism&amp;#34;: &amp;#34;PLAIN&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.history.consumer.sasl.jaas.config&amp;#34;: &amp;#34;org.apache.kafka.common.security.plain.PlainLoginModule required username=\&amp;#34;${file:/data/credentials.properties:CCLOUD_API_KEY}\&amp;#34; password=\&amp;#34;${file:/data/credentials.properties:CCLOUD_API_SECRET}\&amp;#34;;&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.history.producer.security.protocol&amp;#34;: &amp;#34;SASL_SSL&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.history.producer.ssl.endpoint.identification.algorithm&amp;#34;: &amp;#34;https&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.history.producer.sasl.mechanism&amp;#34;: &amp;#34;PLAIN&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.history.producer.sasl.jaas.config&amp;#34;: &amp;#34;org.apache.kafka.common.security.plain.PlainLoginModule required username=\&amp;#34;${file:/data/credentials.properties:CCLOUD_API_KEY}\&amp;#34; password=\&amp;#34;${file:/data/credentials.properties:CCLOUD_API_SECRET}\&amp;#34;;&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;decimal.handling.mode&amp;#34;:&amp;#34;double&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;transforms&amp;#34;: &amp;#34;unwrap,addTopicPrefix&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;transforms.unwrap.type&amp;#34;: &amp;#34;io.debezium.transforms.ExtractNewRecordState&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;transforms.addTopicPrefix.type&amp;#34;:&amp;#34;org.apache.kafka.connect.transforms.RegexRouter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;transforms.addTopicPrefix.regex&amp;#34;:&amp;#34;(.*)&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;transforms.addTopicPrefix.replacement&amp;#34;:&amp;#34;mssql-01-$1&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With that running we can then check the data from Kafka. Note that we&amp;#8217;re using Avro to serialise the data, with the Schema Registry running as part of Confluent Cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ccloud kafka topic consume --from-beginning mssql-04-mssql.dbo.ORDERS
Starting Kafka Consumer. ^C to &lt;span style=&#34;color:#008000&#34;&gt;exit&lt;/span&gt;
����������@Proper Job
���q&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
ףp�?Wainwright
��Ҝ333333@Proper Job
�ޜ��Q��@Galena&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Because it&amp;#8217;s Avro, it renders here as a bunch of &lt;em&gt;odd&lt;/em&gt; characters. We can use a tool such as &lt;code&gt;kafkacat&lt;/code&gt; if we want to deserialise it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;source&lt;/span&gt; .env
docker run --rm edenhill/kafkacat:1.5.0 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -X security.protocol&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;SASL_SSL -X sasl.mechanisms&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;PLAIN &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -X ssl.ca.location&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;./etc/ssl/cert.pem -X api.version.request&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -b &lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_BROKER_HOST&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;:9092 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -X sasl.username&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_API_KEY&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -X sasl.password&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_API_SECRET&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -r https://&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_SCHEMA_REGISTRY_API_KEY&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_SCHEMA_REGISTRY_API_SECRET&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;@&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_SCHEMA_REGISTRY_HOST&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -s avro &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -t mssql-04-mssql.dbo.ORDERS &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -f &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Topic %t[%p], offset: %o, Headers: %h, key: %k, payload: %S bytes: %s\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -C -o beginning -c5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Topic mssql-04-mssql.dbo.ORDERS&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, offset: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, Headers: , key: , payload: &lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt; bytes: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;customer_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_ts&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;18233&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_total_usd&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;double&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;.8900000000000001&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;item&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Wainwright&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}}&lt;/span&gt;
Topic mssql-04-mssql.dbo.ORDERS&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, offset: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, Headers: , key: , payload: &lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt; bytes: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;customer_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_ts&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;18225&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_total_usd&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;double&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;.9100000000000001&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;item&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Galena&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}}&lt;/span&gt;
Topic mssql-04-mssql.dbo.ORDERS&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, offset: &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, Headers: , key: , payload: &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; bytes: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;customer_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;19&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_ts&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;18227&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_total_usd&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;double&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;.6900000000000004&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;item&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Landlord&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}}&lt;/span&gt;
Topic mssql-04-mssql.dbo.ORDERS&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, offset: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, Headers: , key: , payload: &lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt; bytes: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;customer_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_ts&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;18228&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_total_usd&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;double&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;.6699999999999999&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;item&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Proper Job&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}}&lt;/span&gt;
Topic mssql-04-mssql.dbo.ORDERS&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, offset: &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, Headers: , key: , payload: &lt;span style=&#34;color:#666&#34;&gt;39&lt;/span&gt; bytes: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;customer_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_ts&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;18229&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_total_usd&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;double&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;.2400000000000002&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;item&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Black Sheep Ale&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_kafka_️_snowflake_️&#34;&gt;Kafka ➡️ Snowflake ❄️&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_setting_up_snowflake_account_and_key_pair&#34;&gt;Setting up Snowflake account and key pair&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To send data to Snowflake you first need to generate a private/public key pair that will be used for authentication. Generate the keys:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Create Private key - keep this safe, do not share!&lt;/span&gt;
openssl genrsa -out snowflake_key.pem &lt;span style=&#34;color:#666&#34;&gt;2048&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Generate public key from private key. You can share your public key.&lt;/span&gt; 
openssl rsa -in snowflake_key.pem  -pubout -out snowflake_key.pub&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should now have two files:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ls -l snowflake_key*
-rw-r--r--  &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; rmoff  staff  &lt;span style=&#34;color:#666&#34;&gt;1679&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;21&lt;/span&gt; Nov &lt;span style=&#34;color:#666&#34;&gt;09&lt;/span&gt;:28 snowflake_key.pem
-rw-r--r--  &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; rmoff  staff   &lt;span style=&#34;color:#666&#34;&gt;451&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;21&lt;/span&gt; Nov &lt;span style=&#34;color:#666&#34;&gt;09&lt;/span&gt;:28 snowflake_key.pub&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now you need to get your &lt;strong&gt;public&lt;/strong&gt; key:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cat snowflake_key.pub
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAya/BRlyhsfdlJQnPqoRn
lJfxKxujoyionNBPIDFpVpGZ9C1ZE7Q1kGIrEoZfq1t2p6lT8cX6gIZkMDF10I/8
yqHGiCdSEQBuMYXwWpnl3C1sttFHNfxbsjiKSZDlMTbEmzwU5s5LpMt8YvFWp8Iu
3ilHK9Vwy0wbsMDCjDcrC6xCS6qp1n4oso+V24aaxKd/mUtpPy9toAx2NC5GMoDb
tehlbTyPkk/9qFl7GUsf46HbQMEGoGkRrY9VFm+3Z8wCwsFNpURIvLEBcrTFdnmn
IgDBa96+dKgaN8qV6RW3ZMheQOJH1tP3M0qXsLNbR00E7yAlCYjNQD3hXjGKL3Oc
5wIDAQAB
-----END PUBLIC KEY-----&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But minus the header and footer and joined over a single line. You can do this manually, or automagically:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ grep -v &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;BEGIN PUBLIC&amp;#34;&lt;/span&gt; snowflake_key.pub | grep -v &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;END PUBLIC&amp;#34;&lt;/span&gt;|tr -d &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n&lt;/span&gt;
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAya/BRlyhsfdlJQnPqoRnlJfxKxujoyionNBPIDFpVpGZ9C1ZE7Q1kGIrEoZfq1t2p6lT8cX6gIZkMDF10I/8yqHGiCdSEQBuMYXwWpnl3C1sttFHNfxbsjiKSZDlMTbEmzwU5s5LpMt8YvFWp8Iu3ilHK9Vwy0wbsMDCjDcrC6xCS6qp1n4oso+V24aaxKd/mUtpPy9toAx2NC5GMoDbtehlbTyPkk/9qFl7GUsf46HbQMEGoGkRrY9VFm+3Z8wCwsFNpURIvLEBcrTFdnmnIgDBa96+dKgaN8qV6RW3ZMheQOJH1tP3M0qXsLNbR00E7yAlCYjNQD3hXjGKL3Oc5wIDAQAB&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now head to Snowflake, where we need to create a user for loading the data. First up, switch to the &lt;code&gt;SECURITYADMIN&lt;/code&gt; role.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/11/sf02.png&#34; alt=&#34;sf02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
Make sure you do this in the &lt;code&gt;Context&lt;/code&gt; section of the worksheet, not the top-right dropdown (otherwise you&amp;#8217;ll get &lt;code&gt;SQL access control error: Insufficient privileges to operate on account &#39;xyz&#39;&lt;/code&gt;).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now create the user, here called &lt;code&gt;kafka&lt;/code&gt;. Because we&amp;#8217;re in demo-land we&amp;#8217;re also granting Kafka the keys to the kingdom (&lt;code&gt;SYSADMIN&lt;/code&gt;), just to make everything nice &#39;n easy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;CREATE USER kafka RSA_PUBLIC_KEY=&#39;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAya/BRlyhsfdlJQnPqoRnlJfxKxujoyionNBPIDFpVpGZ9C1ZE7Q1kGIrEoZfq1t2p6lT8cX6gIZkMDF10I/8yqHGiCdSEQBuMYXwWpnl3C1sttFHNfxbsjiKSZDlMTbEmzwU5s5LpMt8YvFWp8Iu3ilHK9Vwy0wbsMDCjDcrC6xCS6qp1n4oso+V24aaxKd/mUtpPy9toAx2NC5GMoDbtehlbTyPkk/9qFl7GUsf46HbQMEGoGkRrY9VFm+3Z8wCwsFNpURIvLEBcrTFdnmnIgDBa96+dKgaN8qV6RW3ZMheQOJH1tP3M0qXsLNbR00E7yAlCYjNQD3hXjGKL3Oc5wIDAQAB&#39;
GRANT ROLE SYSADMIN TO USER kafka;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/11/sf03.png&#34; alt=&#34;sf03&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we need to extract the private key for the key pair, which is in the &lt;code&gt;.pem&lt;/code&gt; file that we created, minus the header and footer and on a single line:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/11/sf04.png&#34; alt=&#34;sf04&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
Your private key is &lt;strong&gt;private&lt;/strong&gt; - don&amp;#8217;t share it with anyone who shouldn&amp;#8217;t have access to the account, and definitely don&amp;#8217;t post it on the internet on a blog post!
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As before you can extract the key automagically with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;grep -v &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;BEGIN RSA PRIVATE&amp;#34;&lt;/span&gt; snowflake_key.pem | grep -v &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;END RSA PRIVATE&amp;#34;&lt;/span&gt;|tr -d &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Put this value, along with the URL of your Snowflake environment and the user that we created (&lt;code&gt;kafka&lt;/code&gt;) in the &lt;code&gt;.env&lt;/code&gt; file&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/11/sf05.png&#34; alt=&#34;sf05&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This &lt;code&gt;.env&lt;/code&gt; file gets mounted in the Docker container to &lt;code&gt;/data/credentials.properties&lt;/code&gt; which is what&amp;#8217;s referenced in the connector configuration below.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_setting_up_the_snowflake_connector&#34;&gt;Setting up the Snowflake connector&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Install the connector:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;confluent-hub install --no-prompt snowflakeinc/snowflake-kafka-connector:0.5.5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Restart the Kafka Connect connector and check that it&amp;#8217;s been loaded:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ curl -s localhost:8083/connector-plugins|jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.[].class&amp;#39;&lt;/span&gt;|grep snowflake
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;com.snowflake.kafka.connector.SnowflakeSinkConnector&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now set up your connector configuration. A few important settings of note:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;topics&lt;/code&gt; - A comma separated list of one or more topics that are to be streamed to Snowflake. You can optionally map topics to table names with &lt;code&gt;snowflake.topic2table.map&lt;/code&gt; but this is not mandatory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;value.converter&lt;/code&gt; - Snowflake provide their own converters. Use either:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;com.snowflake.kafka.connector.records.SnowflakeAvroConverter&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;com.snowflake.kafka.connector.records.SnowflakeJsonConverter&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Authentication / sensitive information&lt;/strong&gt; I&amp;#8217;ve &lt;a href=&#34;https://rmoff.net/2019/05/24/putting-kafka-connect-passwords-in-a-separate-file-/-externalising-secrets/&#34;&gt;embedded these in a separate file&lt;/a&gt; (&lt;code&gt;.env&lt;/code&gt;) that&amp;#8217;s loaded by the connector directly:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;snowflake.url.name&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;snowflake.user.name&lt;/code&gt; - we created the user &lt;code&gt;kafka&lt;/code&gt; for this above&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;snowflake.private.key&lt;/code&gt; - this is the key that we extracted in the step above&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can see all of the configuration options in &lt;a href=&#34;https://docs.snowflake.net/manuals/user-guide/kafka-connector-install.html#kafka-configuration-properties&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Create the connector:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -i -X PUT -H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    http://localhost:8083/connectors/sink_snowflake_01/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connector.class&amp;#34;:&amp;#34;com.snowflake.kafka.connector.SnowflakeSinkConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;tasks.max&amp;#34;:1,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;topics&amp;#34;:&amp;#34;mssql-01-mssql.dbo.ORDERS&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;snowflake.url.name&amp;#34;:&amp;#34;${file:/data/credentials.properties:SNOWFLAKE_HOST}&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;snowflake.user.name&amp;#34;:&amp;#34;${file:/data/credentials.properties:SNOWFLAKE_USER}&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;snowflake.user.role&amp;#34;:&amp;#34;SYSADMIN&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;snowflake.private.key&amp;#34;:&amp;#34;${file:/data/credentials.properties:SNOWFLAKE_PRIVATE_KEY}&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;snowflake.database.name&amp;#34;:&amp;#34;DEMO_DB&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;snowflake.schema.name&amp;#34;:&amp;#34;PUBLIC&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;key.converter&amp;#34;:&amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;value.converter&amp;#34;:&amp;#34;com.snowflake.kafka.connector.records.SnowflakeAvroConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;value.converter.schema.registry.url&amp;#34;:&amp;#34;https://${file:/data/credentials.properties:CCLOUD_SCHEMA_REGISTRY_HOST}&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;value.converter.basic.auth.credentials.source&amp;#34;:&amp;#34;USER_INFO&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;value.converter.basic.auth.user.info&amp;#34;:&amp;#34;${file:/data/credentials.properties:CCLOUD_SCHEMA_REGISTRY_API_KEY}:${file:/data/credentials.properties:CCLOUD_SCHEMA_REGISTRY_API_SECRET}&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check that it&amp;#8217;s running:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ curl -s &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;http://localhost:8083/connectors?expand=info&amp;amp;expand=status&amp;#34;&lt;/span&gt; | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;           jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;. | to_entries[] | [ .value.info.type, .key, .value.status.connector.state,.value.status.tasks[].state,.value.info.config.&amp;#34;connector.class&amp;#34;]|join(&amp;#34;:|:&amp;#34;)&amp;#39;&lt;/span&gt; | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;           column -s : -t| sed &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;s/\&amp;#34;//g&amp;#39;&lt;/span&gt;| sort
sink    |  sink_snowflake_01         |  RUNNING  |  RUNNING  |  com.snowflake.kafka.connector.SnowflakeSinkConnector&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now head over to Snowflake and you&amp;#8217;ll see your table created and data loaded:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/11/sf06.png&#34; alt=&#34;sf06&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The connector writes the Kafka message payload to the &lt;code&gt;RECORD_CONTENT&lt;/code&gt; field and its metadata (partition, offset, etc) to &lt;code&gt;RECORD_METADATA&lt;/code&gt;. You can access the nested values using the colon as a seperator, e.g.:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; RECORD_CONTENT:customer_id &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; CUSTOMER_ID,
       RECORD_CONTENT:item &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; ITEM, 
       RECORD_CONTENT:order_total_usd &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; ORDER_TOTAL_USD
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;DEMO_DB&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;PUBLIC&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;MSSQL_01_MSSQL_DBO_ORDERS_97237615&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/11/sf07.png&#34; alt=&#34;sf07&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_footnote_a_few_gotchas&#34;&gt;Footnote : a few gotchas&lt;/h3&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Gotcha 01 : The &lt;strong&gt;connector name&lt;/strong&gt; must be a valid Snowflake identifier. If it&amp;#8217;s not you&amp;#8217;ll get this error:&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;SF_KAFKA_CONNECTOR&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; name is empty or invalid. It should match Snowflake object identifier syntax. Please see the documentation. &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;com.snowflake.kafka.connector.Utils:246&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the example above, the connector name is &lt;code&gt;sink_snowflake_01&lt;/code&gt;. If I tried to name it &lt;code&gt;sink-snowflake-01&lt;/code&gt; (i.e. using &lt;code&gt;-&lt;/code&gt; instead of &lt;code&gt;_&lt;/code&gt;) then it would fail 🤷‍♂️&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;See &lt;a href=&#34;https://github.com/snowflakedb/snowflake-kafka-connector/issues/62&#34;&gt;this issue&lt;/a&gt; on the Snowflake connector repo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;: don&amp;#8217;t name your connector with characters that aren&amp;#8217;t &lt;a href=&#34;https://docs.snowflake.net/manuals/sql-reference/identifiers-syntax.html&#34;&gt;valid in a Snowflake object name&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have to use Snowflake&amp;#8217;s own converters, or else you get:&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;SF_KAFKA_CONNECTOR&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Exception: Invalid record data
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;SF_KAFKA_CONNECTOR&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Error Code: &lt;span style=&#34;color:#666&#34;&gt;0019&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;SF_KAFKA_CONNECTOR&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Detail: Unrecognizable record content, please use Snowflake Converters&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;: Depending on how your data is serialised, use &lt;code&gt;com.snowflake.kafka.connector.records.SnowflakeJsonConverter&lt;/code&gt; or &lt;code&gt;com.snowflake.kafka.connector.records.SnowflakeAvroConverter&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes the connector will fail with an error and need restarting:&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;SF_KAFKA_CONNECTOR&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Exception: Failed to put records
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;SF_KAFKA_CONNECTOR&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Error Code: &lt;span style=&#34;color:#666&#34;&gt;5014&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;SF_KAFKA_CONNECTOR&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Detail: SinkTask hasn&lt;span style=&#34;&#34;&gt;&amp;#39;&lt;/span&gt;t been initialized before calling PUT &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;function&lt;/span&gt;
  at com.snowflake.kafka.connector.internal.SnowflakeErrors.getException&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;SnowflakeErrors.java:362&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  at com.snowflake.kafka.connector.internal.SnowflakeErrors.getException&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;SnowflakeErrors.java:321&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  at com.snowflake.kafka.connector.SnowflakeSinkTask.getSink&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;SnowflakeSinkTask.java:94&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  at com.snowflake.kafka.connector.SnowflakeSinkTask.put&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;SnowflakeSinkTask.java:195&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  at org.apache.kafka.connect.runtime.WorkerSinkTask.deliverMessages&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;WorkerSinkTask.java:538&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  at org.apache.kafka.connect.runtime.WorkerSinkTask.poll&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;WorkerSinkTask.java:321&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  at org.apache.kafka.connect.runtime.WorkerSinkTask.iteration&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;WorkerSinkTask.java:224&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  at org.apache.kafka.connect.runtime.WorkerSinkTask.execute&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;WorkerSinkTask.java:192&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  at org.apache.kafka.connect.runtime.WorkerTask.doRun&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;WorkerTask.java:177&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  at org.apache.kafka.connect.runtime.WorkerTask.run&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;WorkerTask.java:227&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  at java.util.concurrent.Executors&lt;span style=&#34;color:#19177c&#34;&gt;$RunnableAdapter&lt;/span&gt;.call&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;Executors.java:511&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  at java.util.concurrent.FutureTask.run&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;FutureTask.java:266&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  at java.util.concurrent.ThreadPoolExecutor.runWorker&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;ThreadPoolExecutor.java:1149&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  at java.util.concurrent.ThreadPoolExecutor&lt;span style=&#34;color:#19177c&#34;&gt;$Worker&lt;/span&gt;.run&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;ThreadPoolExecutor.java:624&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  at java.lang.Thread.run&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;Thread.java:748&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;: Restart the Connect task via the REST API. If your connector is called &lt;code&gt;sink_snowflake_01&lt;/code&gt; then you can run this to restart task &lt;code&gt;0&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -X POST http://localhost:8083/connectors/sink_snowflake_01/tasks/0/restart&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Running Dockerised Kafka Connect worker on GCP</title>
      <link>https://rmoff.github.io/2019/11/12/running-dockerised-kafka-connect-worker-on-gcp/</link>
      <pubDate>2019-11-12</pubDate>
      
      <guid>https://rmoff.github.io/2019/11/12/running-dockerised-kafka-connect-worker-on-gcp/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.github.io/images/2019/11/IMG_1070.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I &lt;a href=&#34;http://talks.rmoff.net/&#34;&gt;talk and write about Kafka and Confluent Platform&lt;/a&gt; a lot, and more and more of the demos that I&amp;#8217;m building are around &lt;a href=&#34;https://confluent.cloud&#34;&gt;Confluent Cloud&lt;/a&gt;. This means that I don&amp;#8217;t have to run or manage my own Kafka brokers, Zookeeper, Schema Registry, KSQL servers, etc which makes things a ton easier. Whilst there are managed connectors on Confluent Cloud (S3 etc), I need to run my own Kafka Connect worker for those connectors not yet provided. An example is the MQTT source connector that I use in &lt;a href=&#34;https://rmoff.dev/kssf19-ksql-video&#34;&gt;this demo&lt;/a&gt;. Up until now I&amp;#8217;d either run this worker locally, or manually build a cloud VM. Locally is fine, as it&amp;#8217;s all Docker, easily spun up in a single &lt;code&gt;docker-compose up -d&lt;/code&gt; command. I wanted something that would keep running whilst my laptop was off, but that was as close to my local build as possible—enter GCP and its functionality to run a container on a VM automagically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;You can see &lt;a href=&#34;https://github.com/confluentinc/demo-scene/blob/master/mqtt-tracker/launch-worker-container_gcloud.sh&#34;&gt;the full script here&lt;/a&gt;&lt;/strong&gt;. The rest of this article just walks through the how and why.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_the_script&#34;&gt;The script&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s a walk through of what the script&amp;#8217;s doing and how to use it. First up, you need to create a &lt;code&gt;.env&lt;/code&gt; file with your secrets and config in:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#19177c&#34;&gt;CONFLUENTPLATFORM_VERSION&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;.4.0-beta1
#   
&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_BROKER_HOST&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_API_KEY&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_API_SECRET&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
#
&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_SCHEMA_REGISTRY_URL&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_SCHEMA_REGISTRY_API_KEY&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_SCHEMA_REGISTRY_API_SECRET&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is then passed to &lt;code&gt;source&lt;/code&gt; to make the values available to the shell&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;source&lt;/span&gt; .env&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m running Kafka Connect in distributed mode, which &lt;a href=&#34;http://rmoff.dev/ksldn19-kafka-connect&#34;&gt;I generally recommend in all instances - even on a single node&lt;/a&gt;. There&amp;#8217;s no reason not to, and it makes it easier to understand (and work with IMO) to learn a single deployment method instead of two. Since I&amp;#8217;m using distributed mode, all of the state for the worker is stored in Kafka itself. This is pretty cool, but it does mean that if you run multiple workers with the same persistence topics configured things will get funky. For that reason, I have a prefix for the worker and topics, which is based on the current timestamp—if you&amp;#8217;re using this script yourself you might want to vary this (or not; YMMV):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#19177c&#34;&gt;epoch&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;date +%s&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Whilst Kafka Connect uses the Admin API to create its own internal topics (for state persistence) the topic(s) that the connector itself writes to need to be created manually. Here I use &lt;code&gt;kafka-topics&lt;/code&gt; to do that, through Docker running locally. I use Docker just for isolation and ease portability; if you want to use your own local install then you can. To use Confluent Cloud with &lt;code&gt;kafka-topics&lt;/code&gt; you need to have a local file with the necessary authentication details in, which is then passed with &lt;code&gt;--command-config&lt;/code&gt; in &lt;code&gt;kafka-topics&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cat &amp;gt; /tmp/config-&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;epoch&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;.properties &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;ssl.endpoint.identification.algorithm=https
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;sasl.mechanism=PLAIN
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=&amp;#34;${CCLOUD_API_KEY}&amp;#34; password=&amp;#34;${CCLOUD_API_SECRET}&amp;#34;;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;security.protocol=SASL_SSL
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;request.timeout.ms=20000
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;retry.backoff.ms=500
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;EOF&lt;/span&gt;

docker run --rm --volume /tmp/config-&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;epoch&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;.properties:/tmp/config.properties &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    confluentinc/cp-kafka:&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;CONFLUENTPLATFORM_VERSION&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt; /usr/bin/kafka-topics &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    --command-config /tmp/config.properties &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    --bootstrap-server &lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_BROKER_HOST&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;:9092 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    --create &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    --topic data_mqtt &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    --partitions &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    --replication-factor &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now that we&amp;#8217;ve got the topic created, we can spin up the worker itself. Or, almost. Because first we need to build a file with the necessary environment variables in for the worker. You &lt;em&gt;can&lt;/em&gt; pass environment variables directly in the &lt;code&gt;gcloud&lt;/code&gt; invocation but it&amp;#8217;s not a pretty sight&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/11/container_env.png&#34; alt=&#34;container env&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Even if it works, it&amp;#8217;s not particularly maintainable. Whilst you can externalise the environment variables into a file that you pass in with &lt;code&gt;container-env-file&lt;/code&gt; you can&amp;#8217;t interpolate secure values in that file which means that you end up with a file which is both config and authentication credentials, which is not ideal. Hence, the config is inline in this script and interpolated with credentials held in environment variables (via &lt;code&gt;.env&lt;/code&gt;) at runtime into a temporary file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#19177c&#34;&gt;PROPERTIES_FILE&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;/tmp/connect-worker-&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;epoch&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;_gcloud_env.properties

cat &amp;gt; &lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;PROPERTIES_FILE&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN=[%d] %p %X{connector.context}%m (%c:%L)%n
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_CUB_KAFKA_TIMEOUT=300  
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_BOOTSTRAP_SERVERS=${CCLOUD_BROKER_HOST}:9092
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_REST_ADVERTISED_HOST_NAME=kafka-connect-01
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_REST_PORT=8083  
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_GROUP_ID=kafka-connect-group-${epoch}
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_CONFIG_STORAGE_TOPIC=_kafka-connect-group-${epoch}-configs  
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_OFFSET_STORAGE_TOPIC=_kafka-connect-group-${epoch}-offsets  
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_STATUS_STORAGE_TOPIC=_kafka-connect-group-${epoch}-status  
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_KEY_CONVERTER=io.confluent.connect.avro.AvroConverter  
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL=${CCLOUD_SCHEMA_REGISTRY_URL}
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_KEY_CONVERTER_BASIC_AUTH_CREDENTIALS_SOURCE=USER_INFO
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO=${CCLOUD_SCHEMA_REGISTRY_API_KEY}:${CCLOUD_SCHEMA_REGISTRY_API_SECRET}
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_VALUE_CONVERTER=io.confluent.connect.avro.AvroConverter  
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL=${CCLOUD_SCHEMA_REGISTRY_URL}
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_VALUE_CONVERTER_BASIC_AUTH_CREDENTIALS_SOURCE=USER_INFO
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO=${CCLOUD_SCHEMA_REGISTRY_API_KEY}:${CCLOUD_SCHEMA_REGISTRY_API_SECRET}
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_INTERNAL_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_INTERNAL_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_LOG4J_ROOT_LOGLEVEL=INFO
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_LOG4J_LOGGERS=org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR=3
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR=3
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_STATUS_STORAGE_REPLICATION_FACTOR=3
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_PLUGIN_PATH=/usr/share/java,/usr/share/confluent-hub-components/
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM=https
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_SASL_MECHANISM=PLAIN
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_SECURITY_PROTOCOL=SASL_SSL
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_SASL_JAAS_CONFIG=org.apache.kafka.common.security.plain.PlainLoginModule required username=&amp;#34;${CCLOUD_API_KEY}&amp;#34; password=&amp;#34;${CCLOUD_API_SECRET}&amp;#34;;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_CONSUMER_SECURITY_PROTOCOL=SASL_SSL
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_CONSUMER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM=https
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_CONSUMER_SASL_MECHANISM=PLAIN
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_CONSUMER_SASL_JAAS_CONFIG=org.apache.kafka.common.security.plain.PlainLoginModule required username=&amp;#34;${CCLOUD_API_KEY}&amp;#34; password=&amp;#34;${CCLOUD_API_SECRET}&amp;#34;;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_PRODUCER_SECURITY_PROTOCOL=SASL_SSL
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_PRODUCER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM=https
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_PRODUCER_SASL_MECHANISM=PLAIN
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CONNECT_PRODUCER_SASL_JAAS_CONFIG=org.apache.kafka.common.security.plain.PlainLoginModule required username=&amp;#34;${CCLOUD_API_KEY}&amp;#34; password=&amp;#34;${CCLOUD_API_SECRET}&amp;#34;;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now, finally, we can launch the container, using the &lt;code&gt;gcloud beta compute instances create-with-container&lt;/code&gt; option. The options I built out using the GCP web UI and then before launching clicked the magic button&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.github.io/images/2019/11/equiv.png&#34; alt=&#34;equiv&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It&amp;#8217;s fairly standard list of parameters, including &lt;code&gt;container-image&lt;/code&gt; to refer to the docker image, &lt;code&gt;container-env-file&lt;/code&gt; to point to the environment file that we built above—and then &lt;code&gt;container-command&lt;/code&gt; and &lt;code&gt;container-arg&lt;/code&gt; to run custom commands, which:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Install the connector plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Launch the Kafka Connect worker process&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wait for the worker to be ready&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Submit a connector configuration&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;gcloud beta compute &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	--project&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;devx-testing instances create-with-container rmoff-connect-mqtt-&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;epoch&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	--machine-type&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;n1-standard-1 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	--subnet&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;default &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	--metadata&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;google-logging-enabled&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	--maintenance-policy&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;MIGRATE &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	--image&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;cos-stable-77-12371-114-0 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	--image-project&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;cos-cloud &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    --no-scopes &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    --no-service-account &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	--boot-disk-size&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;10GB &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	--boot-disk-type&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;pd-standard &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	--boot-disk-device-name&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rmoff-connect-mqtt-&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;epoch&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	--container-restart-policy&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;always &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	--labels&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;container-vm&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;cos-stable-77-12371-114-0 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	--container-image&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;confluentinc/cp-kafka-connect:&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;CONFLUENTPLATFORM_VERSION&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    --container-env-file&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;PROPERTIES_FILE&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	--container-command&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;bash &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	--container-arg&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;-c &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	--container-arg&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;set -x
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        echo &amp;#34;Installing connector plugins&amp;#34; 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        confluent-hub install --no-prompt confluentinc/kafka-connect-mqtt:1.2.3
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        #
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        echo &amp;#34;Launching Kafka Connect worker&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        /etc/confluent/docker/run &amp;amp; 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        #
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        echo &amp;#34;Waiting for Kafka Connect to start listening on localhost:8083 ⏳&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        while : ; do
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            curl_status=$(curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors)
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            echo -e $(date) &amp;#34; Kafka Connect listener HTTP state: &amp;#34; $curl_status &amp;#34; (waiting for 200)&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            if [ $curl_status -eq 200 ] ; then
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            break
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            fi
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            sleep 5 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        done
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        #
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        echo -e &amp;#34;\n--\n+&amp;gt; Creating Kafka Connect MQTT source&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        curl -s -X PUT -H  &amp;#34;Content-Type:application/json&amp;#34; http://localhost:8083/connectors/source-mqtt/config \
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            -d &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{  
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;connector.class&amp;#34; : &amp;#34;io.confluent.connect.mqtt.MqttSourceConnector&amp;#34;, 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;mqtt.server.uri&amp;#34; : &amp;#34;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;MQTT_URL&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#34;, 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;mqtt.password&amp;#34; : &amp;#34;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;MQTT_PASSWORD&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#34;, 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;mqtt.username&amp;#34; : &amp;#34;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;MQTT_USERNAME&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#34;, 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;mqtt.topics&amp;#34; : &amp;#34;owntracks/#&amp;#34;, 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;kafka.topic&amp;#34; : &amp;#34;data_mqtt&amp;#34;, 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;key.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;, 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.converters.ByteArrayConverter&amp;#34;, 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;tasks.max&amp;#34; : &amp;#34;1&amp;#34;, 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;confluent.topic.bootstrap.servers&amp;#34; : &amp;#34;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_BROKER_HOST&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;:9092&amp;#34;, 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;confluent.topic.sasl.jaas.config&amp;#34; : &amp;#34;org.apache.kafka.common.security.plain.PlainLoginModule required username=\&amp;#34;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_API_KEY&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;\&amp;#34; password=\&amp;#34;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_API_SECRET&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;\&amp;#34;;&amp;#34;, 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;confluent.topic.security.protocol&amp;#34;: &amp;#34;SASL_SSL&amp;#34;, 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;confluent.topic.ssl.endpoint.identification.algorithm&amp;#34;: &amp;#34;https&amp;#34;, 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;confluent.topic.sasl.mechanism&amp;#34;: &amp;#34;PLAIN&amp;#34; 
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            }&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        #    
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        sleep infinity&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The bash script that&amp;#8217;s embedded as an argument to &lt;code&gt;bash -c&lt;/code&gt; is mostly as you&amp;#8217;d run it natively, except some funky quoting to deal with single quotes within the command (that enclose the &lt;code&gt;-d&lt;/code&gt; value of &lt;code&gt;curl&lt;/code&gt;)—these are done with &lt;code&gt;&#39;&#34;&#39;&#34;&#39;&lt;/code&gt; which breaks down to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#39;&lt;/code&gt; close the string&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#34;&#39;&#34;&lt;/code&gt; quote a single quote&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#39;&lt;/code&gt; open the string&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_gotchas&#34;&gt;Gotchas&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One problem that I hit a problem was where the VM was created but my container within was not. By looking at the serial port output from bootup using:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;gcloud compute instances get-serial-port-output rmoff-connect-mqtt-1573561087&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I could see the last entry was:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;[   12.759163] IPv6: ADDRCONF(NETDEV_UP): docker0: link is not ready&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Turns out I&amp;#8217;d set &lt;code&gt;--no-address&lt;/code&gt; when creating the VM and this caused the problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To fix it, I just omitted this configuration which meant that the default allocation of an ephemeral IP address happened, and Docker started up nicely.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_my_question_to_you&#34;&gt;My question to you&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Is this an abomination? Am I struggling to do it in an elegant way because I&amp;#8217;m just using the wrong technology? All I want to do is spin up a Connect worker using config and settings that I&amp;#8217;ve built locally, following the philosophy of cattle-not-pets. Yes I can build a cloud VM and config Connect manually, but with all the context switching that I do I want something I can get working, check in to git, and come back to a month later and run without having to think about any of it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Should I be learning k8s, or is that over-engineering it? My gut feel is that it would be because I don&amp;#8217;t need the orchestration and management bells and whistles of k8s—but perhaps they&amp;#8217;re just an added benefit and I should take the leap? What about other options? I gave Terraform a &lt;em&gt;very&lt;/em&gt; quick look but I&amp;#8217;d prefer something closer to my local Docker builds—and I&amp;#8217;m tied to Docker because it&amp;#8217;s the standard platform on which a lot of developers are accepting of for trying demos and new technology. The more non-standard pieces, the higher the friction—we&amp;#8217;ve all seen those demos that have a laundry list of pre-reqs to use, and we&amp;#8217;ve all thought…sod it ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So—tell me if I&amp;#8217;m wrong - &lt;em&gt;do&lt;/em&gt; &lt;code&gt;@&lt;/code&gt; me!
I&amp;#8217;m &lt;strong&gt;&lt;a href=&#34;https://twitter.com/rmoff/&#34;&gt;@rmoff&lt;/a&gt; on Twitter&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Debezium &amp; MySQL v8 : Public Key Retrieval Is Not Allowed</title>
      <link>https://rmoff.github.io/2019/10/23/debezium-mysql-v8-public-key-retrieval-is-not-allowed/</link>
      <pubDate>2019-10-23</pubDate>
      
      <guid>https://rmoff.github.io/2019/10/23/debezium-mysql-v8-public-key-retrieval-is-not-allowed/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.github.io/images/2019/04/IMG_9090.jpg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I started hitting problems when trying Debezium against MySQL v8. When creating the connector:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -i -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Accept:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http://localhost:8083/connectors/source-debezium-mysql-00/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;connector.class&amp;#34;: &amp;#34;io.debezium.connector.mysql.MySqlConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;database.hostname&amp;#34;: &amp;#34;mysql&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;database.port&amp;#34;: &amp;#34;3306&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;database.user&amp;#34;: &amp;#34;debezium&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;database.password&amp;#34;: &amp;#34;dbz&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;database.server.id&amp;#34;: &amp;#34;42&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;database.server.name&amp;#34;: &amp;#34;asgard&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;table.whitelist&amp;#34;: &amp;#34;demo.customers&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;database.history.kafka.bootstrap.servers&amp;#34;: &amp;#34;kafka:29092&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;database.history.kafka.topic&amp;#34;: &amp;#34;asgard.dbhistory.demo&amp;#34; ,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;include.schema.changes&amp;#34;: &amp;#34;true&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;d get the error&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;error_code&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;400&lt;/span&gt;,
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Connector configuration is invalid and contains the following 1 error(s):\nUnable to connect: Public Key Retrieval is not allowed\nYou can also find the above list of errors at the endpoint `/{connectorType}/config/validate`&amp;#34;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The fix for this, courtesy of Jiri on the &lt;a href=&#34;https://gitter.im/debezium/user&#34;&gt;Debezium gitter.im chat room&lt;/a&gt;, is to add to the connector configuraton &lt;code&gt;database.allowPublicKeyRetrieval=true&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -i -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Accept:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http://localhost:8083/connectors/source-debezium-mysql-00/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;connector.class&amp;#34;: &amp;#34;io.debezium.connector.mysql.MySqlConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;database.hostname&amp;#34;: &amp;#34;mysql&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;database.port&amp;#34;: &amp;#34;3306&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;database.user&amp;#34;: &amp;#34;debezium&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;database.password&amp;#34;: &amp;#34;dbz&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;database.server.id&amp;#34;: &amp;#34;42&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;database.allowPublicKeyRetrieval&amp;#34;:&amp;#34;true&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;database.server.name&amp;#34;: &amp;#34;asgard&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;table.whitelist&amp;#34;: &amp;#34;demo.customers&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;database.history.kafka.bootstrap.servers&amp;#34;: &amp;#34;kafka:29092&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;database.history.kafka.topic&amp;#34;: &amp;#34;asgard.dbhistory.demo&amp;#34; ,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;          &amp;#34;include.schema.changes&amp;#34;: &amp;#34;true&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;After this the connector was created successfully, but immediately &lt;code&gt;FAILED&lt;/code&gt; with the following error in the Kafka Connect worker log:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt; 
org.apache.kafka.connect.errors.ConnectException: Failed to authenticate to the MySQL database at mysql:3306 with user &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;debezium&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;…&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
com.github.shyiko.mysql.binlog.network.AuthenticationException: Client does not support authentication protocol requested by server; consider upgrading MySQL client&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A bit of Googling threw up &lt;a href=&#34;https://github.com/shyiko/mysql-binlog-connector-java/issues/240&#34;&gt;this issue on GitHub&lt;/a&gt; with a solution that worked—add &lt;code&gt;WITH mysql_native_password&lt;/code&gt; to the authentication settings for the Debezium user:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;USER&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;debezium&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt; IDENTIFIED &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; mysql_native_password &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;dbz&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;After that, the connector ran successfully 👍&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>