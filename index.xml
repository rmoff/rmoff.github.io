<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rmoff&#39;s random ramblings</title>
    <link>https://rmoff.net/</link>
    <description>Recent content on rmoff&#39;s random ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>2020-07-10</lastBuildDate>
    
        <atom:link href="https://rmoff.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning Golang (some rough notes) - S02E02 - Adding error handling to the Producer</title>
      <link>https://rmoff.net/2020/07/10/learning-golang-some-rough-notes-s02e02-adding-error-handling-to-the-producer/</link>
      <pubDate>2020-07-10</pubDate>
      
      <guid>https://rmoff.net/2020/07/10/learning-golang-some-rough-notes-s02e02-adding-error-handling-to-the-producer/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/07/IMG_5126.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I looked &lt;a href=&#34;https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e01-my-first-kafka-go-producer/&#34;&gt;last time&lt;/a&gt; at the very bare basics of writing a Kafka producer using Go. It worked, but only with everything lined up and pointing the right way. There was no error handling of any sorts. Let&amp;#8217;s see about fixing this now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_a_bit_of_code_tidying&#34;&gt;A bit of code tidying&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To make the code more readable to me, I split out the configuration into a new variable that&amp;#8217;s then passed to the &lt;code&gt;NewProducer&lt;/code&gt;, so instead of the more compact but possibly less readable&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;NewProducer&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ConfigMap&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;bootstrap.servers&#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;localhost:9092&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I have this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ConfigMap&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;boostrap.servers&#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;localhost:9092&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;NewProducer&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_catching_errors_from_newproducer&#34;&gt;Catching errors from &lt;code&gt;NewProducer()&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Instead of &lt;code&gt;p, &lt;em&gt;&lt;/code&gt; when invoking &lt;code&gt;NewProducer&lt;/code&gt; (the &lt;code&gt;&lt;/em&gt;&lt;/code&gt; denoting an empty placeholder variable), we supply a variable into which the error can be stored:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;NewProducer&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we can check it and report back if there&amp;#8217;s a problem:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;😢Oh noes, there&#39;s an error creating the Producer! %v&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// do producing stuff&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If I make a deliberate mistake so that the &lt;code&gt;NewProducer&lt;/code&gt; returns an error we get this&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code&gt;😢 Oh noes, there&#39;s an error creating the Producer! No such configuration property: &#34;boostrap.servers&#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_be_assertive&#34;&gt;Be Assertive!&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can take this a step further and look at the type of error that&amp;#8217;s returned. Whilst &lt;code&gt;e&lt;/code&gt; is a generic interface for holding an error, we can try casting it to a &lt;code&gt;kafka.Error&lt;/code&gt;. Why would we want to do this? Well, &lt;code&gt;kafka.Error&lt;/code&gt; exposes &lt;a href=&#34;https://github.com/confluentinc/confluent-kafka-go/blob/master/kafka/error.go#L35-L41&#34;&gt;properties&lt;/a&gt; including an &lt;a href=&#34;https://docs.confluent.io/current/clients/confluent-kafka-go/index.html#ErrorCode&#34;&gt;ErrorCode&lt;/a&gt; that describes the type of error. From that code we can handle the error in a more useful way than just dumping it to the screen. For example, if it&amp;#8217;s an error about configuration properties (as in the example above) we could tell the user where to find the reference information for this; but including that in an error to the user if it&amp;#8217;s &lt;em&gt;not&lt;/em&gt; a problem in this area would be redundant (and possibly confusing).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To cast it to a &lt;code&gt;kafka.Error&lt;/code&gt; we use a &lt;a href=&#34;https://tour.golang.org/methods/15&#34;&gt;type assertion&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ke&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We also check for success when we do it (just in case it&amp;#8217;s not actually a &lt;code&gt;kafka.Error&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ke&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ok&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ok&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// it&#39;s a kafka.Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// it&#39;s an error, but not a kafka.Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Once we&amp;#8217;ve established that it&amp;#8217;s a &lt;code&gt;kafka.Error&lt;/code&gt; we can use the &lt;code&gt;Code()&lt;/code&gt; function to access the &lt;code&gt;ErrorCode&lt;/code&gt; and handle it with a &lt;code&gt;switch&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ke&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ok&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ok&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
        &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;switch&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ec&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ke&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Code&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ec&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
        &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;case&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ErrInvalidArg&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
            &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;😢 Can&#39;t create the producer because you&#39;ve configured it wrong (code: %d)!&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;%v&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;To see the configuration options, refer to https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ec&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
        &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
            &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;😢 Can&#39;t create the producer (Kafka error code %d)&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;Error: %v&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ec&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
        &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
        &lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// It&#39;s not a kafka.Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
        &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;😢 Oh noes, there&#39;s a generic error creating the Producer! %v&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;())&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So now the same mistake as before in configuring &lt;code&gt;bootstrap.servers&lt;/code&gt; is caught and reported like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code&gt;😢 Can&#39;t create the producer because you&#39;ve configured it wrong (code: -186)!
	No such configuration property: &#34;boostrap.servers&#34;

To see the configuration options, refer to https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_handling_producer_errors&#34;&gt;Handling Producer Errors&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When it comes to the &lt;code&gt;Produce&lt;/code&gt; I&amp;#8217;ve done the same as above - split out the creation of the message into a new variable for clarity, and added a check for error:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Build the message&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Message&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Topic&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;topic&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;},&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;Hello world&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Produce the message&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Produce&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;😢 Darn, there&#39;s an error producing the message! %v&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;())&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But if I kill my Kafka broker and run my code, I don&amp;#8217;t get an error. Why not? Because if you look at the &lt;a href=&#34;https://docs.confluent.io/current/clients/confluent-kafka-go/index.html#Producer.Produce&#34;&gt;documentation for &lt;code&gt;Produce&lt;/code&gt;&lt;/a&gt; you&amp;#8217;ll see that it says&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is an asynchronous call that enqueues the message on the internal transmit queue, thus returning immediately&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So all we&amp;#8217;re doing is &#34;fire and forget&#34;. Put it on an internal queue, and we&amp;#8217;re done. We still don&amp;#8217;t know if it was delivered.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_producer_events&#34;&gt;Producer Events&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Since the Producer is called asychronously, it uses Go &lt;a href=&#34;https://gobyexample.com/channels&#34;&gt;Channels&lt;/a&gt; to provide events back to the calling application about what&amp;#8217;s going on. These can be of different types, covering both errors, and the status of messages that have been sent for producing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.confluent.io/current/clients/confluent-kafka-go/index.html#Error&#34;&gt;Error&lt;/a&gt; events contain … errors ;-)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.confluent.io/current/clients/confluent-kafka-go/index.html#Message&#34;&gt;Message&lt;/a&gt; events contain information about messages that have been sent for producing, including whether it worked or not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can consume these events in two different ways:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Poll the producer&amp;#8217;s &lt;code&gt;Events()&lt;/code&gt; channel and triage by type&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a dedicated delivery report channel, and poll &lt;code&gt;Events()&lt;/code&gt; for errors only&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s an example of the first option, in which we use a &lt;a href=&#34;https://gobyexample.com/goroutines&#34;&gt;Go Routine&lt;/a&gt; to listen to all events and handle them based on type:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
        &lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// The `select` blocks until one of the `case` conditions&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
        &lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// are met - therefore we run it in a Go Routine.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
        &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
            &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;case&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ev&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Events&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                &lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Look at the type of Event we&#39;ve received&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;switch&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ev&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

                &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;case&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Message&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                    &lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// It&#39;s a delivery report&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                    &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ev&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Message&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                    &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                        &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;☠️ Failed to send message &#39;%v&#39; to topic &#39;%v&#39;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;Err: %v&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                            &lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;),&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                            &lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Topic&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;),&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                            &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                    &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                        &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;✅ Message &#39;%v&#39; delivered to topic &#39;%v&#39; (partition %d at offset %d)&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                            &lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;),&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                            &lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Topic&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;),&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                            &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Partition&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                            &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Offset&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                    &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

                &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;case&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                    &lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// It&#39;s an error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                    &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;em&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ev&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                    &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;☠️ Uh oh, caught an error:&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;%v&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;em&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                    &lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// It&#39;s not anything we were expecting&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
                    &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;Got an event that&#39;s not a Message or Error 👻&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;%v&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ev&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

                &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
        &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now when we produce a message successfully we receive a &lt;code&gt;kafka.Message&lt;/code&gt; with a &lt;code&gt;nil&lt;/code&gt; value in &lt;code&gt;TopicPartition.Error&lt;/code&gt; and the offset of the produced message in &lt;code&gt;TopicPartition.Offset&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code&gt;✅ Message &#39;Hello world&#39; delivered to topic &#39;test_topic_02&#39; (partition 0 at offset 0)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And if there&amp;#8217;s a problem we get full details of it&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code&gt;☠️ Uh oh, caught an error:
	foobar:9092/1: Failed to resolve &#39;foobar:9092&#39;: nodename nor servname provided, or not known (after 64ms in state CONNECT)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_phantom_events&#34;&gt;Phantom events&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you run the code as-is you&amp;#8217;ll notice you get this&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;✅&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Message&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Hello&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;world&lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;delivered&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;topic&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;test_topic_02&lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;partition&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;at&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;offset&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;✨&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;All&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;messages&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;flushed&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;the&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Got&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;an&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;that&lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;not&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Message&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;or&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;👻&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Got&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;an&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;that&lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;not&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Message&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;or&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;👻&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Got&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;an&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;that&lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;not&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Message&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;or&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;👻&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Got&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;an&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;that&lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;not&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Message&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;or&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;👻&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Got&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;an&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;that&lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;not&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Message&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;or&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;👻&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;After the &lt;code&gt;Close()&lt;/code&gt; is called, there are still events being consumed by our Go Routine event handler. We don&amp;#8217;t want to be doing this (if the Producer is closed, then its &lt;code&gt;Events()&lt;/code&gt; channel is meaningless), so use this pattern (inspired by &lt;a href=&#34;https://github.com/confluentinc/confluent-kafka-go/blob/master/examples/idempotent_producer_example/idempotent_producer_example.go#L164&#34;&gt;this code&lt;/a&gt;) to avoid it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// For signalling termination from main to go-routine&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;termChan&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0086B3&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;chan&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// For signalling that termination is done from go-routine to main&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doneChan&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0086B3&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;chan&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doTerm&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doTerm&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
        &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

            &lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// channels that we&#39;re listening to&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

        &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;case&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;termChan&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
            &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doTerm&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
        &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

    &lt;/span&gt;&lt;span style=&#34;color: #0086B3&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doneChan&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}()&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// …&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// We&#39;re ready to finish&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;termChan&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// wait for go-routine to terminate&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doneChan&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Now we can exit&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Close&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_make_sure_you_flush&#34;&gt;Make sure you &lt;code&gt;Flush()&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Once we&amp;#8217;ve sent our message to the Producer, we get control back straight away, because it&amp;#8217;s an asynchronous process. If we don&amp;#8217;t put anything else in place the code will run on through to the &lt;code&gt;Close()&lt;/code&gt; and exit. We want to make sure we&amp;#8217;ve sent all the messages successfully - or not. To do this we use the &lt;code&gt;Flush()&lt;/code&gt; function with a timeout of how long we&amp;#8217;ll wait before considering sending messages to have failed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Flush the Producer queue&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Flush&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;⚠️ Failed to flush all messages after 10 seconds. %d message(s) remain&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
    &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;✨ All messages flushed from the queue&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With this in place we get a confirmation on exit of success:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code&gt;✨ All messages flushed from the queue&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;or failure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code&gt;⚠️ Failed to flush all messages after 10 seconds. 1 message(s) remain&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_the_finished_result&#34;&gt;The finished result&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;package&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;import&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;fmt&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

	&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;gopkg.in/confluentinc/confluent-kafka-go.v1/kafka&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// --&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// The topic is passed as a pointer to the Producer, so we can&#39;t&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// use a hard-coded literal. And a variable is a nicer way to do&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// it anyway ;-)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;topic&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;test_topic_02&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// --&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Create Producer instance&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// https://docs.confluent.io/current/clients/confluent-kafka-go/index.html#NewProducer&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Store the config&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ConfigMap&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;bootstrap.servers&#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;localhost:9092&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Variable p holds the new Producer instance.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;NewProducer&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Check for errors in creating the Producer&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ke&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ok&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ok&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
			&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;switch&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ec&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ke&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Code&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ec&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
			&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;case&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ErrInvalidArg&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
				&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;😢 Can&#39;t create the producer because you&#39;ve configured it wrong (code: %d)!&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;%v&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;To see the configuration options, refer to https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ec&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
			&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
				&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;😢 Can&#39;t create the producer (Kafka error code %d)&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;Error: %v&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ec&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
			&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
			&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// It&#39;s not a kafka.Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
			&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;😢 Oh noes, there&#39;s a generic error creating the Producer! %v&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;())&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

	&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

		&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// For signalling termination from main to go-routine&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;termChan&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0086B3&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;chan&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// For signalling that termination is done from go-routine to main&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doneChan&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0086B3&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;chan&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

		&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// --&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Send a message using Produce()&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// https://docs.confluent.io/current/clients/confluent-kafka-go/index.html#Producer.Produce&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Build the message&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Message&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Topic&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;topic&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;},&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
			&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;Hello world&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

		&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Handle any events that we get&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
			&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doTerm&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
			&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doTerm&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
				&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// The `select` blocks until one of the `case` conditions&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
				&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// are met - therefore we run it in a Go Routine.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
				&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
				&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;case&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ev&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Events&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
					&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Look at the type of Event we&#39;ve received&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
					&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;switch&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ev&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

					&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;case&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Message&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
						&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// It&#39;s a delivery report&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
						&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ev&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Message&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
						&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
							&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;☠️ Failed to send message &#39;%v&#39; to topic &#39;%v&#39;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;Err: %v&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
								&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;),&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
								&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Topic&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;),&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
								&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
						&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
							&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;✅ Message &#39;%v&#39; delivered to topic &#39;%v&#39; (partition %d at offset %d)&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
								&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;),&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
								&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Topic&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;),&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
								&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Partition&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
								&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;km&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Offset&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
						&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

					&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;case&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
						&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// It&#39;s an error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
						&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;em&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ev&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
						&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;☠️ Uh oh, caught an error:&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;%v&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;em&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
					&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
						&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// It&#39;s not anything we were expecting&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
						&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;Got an event that&#39;s not a Message or Error 👻&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;%v&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ev&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

					&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
				&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;case&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;termChan&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
					&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doTerm&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

				&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
			&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
			&lt;/span&gt;&lt;span style=&#34;color: #0086B3&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doneChan&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}()&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Produce the message&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Produce&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
			&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;😢 Darn, there&#39;s an error producing the message! %v&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;())&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

		&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// --&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Flush the Producer queue&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Flush&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
			&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;⚠️ Failed to flush all messages after %d milliseconds. %d message(s) remain&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
			&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;✨ All messages flushed from the queue&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// --&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Stop listening to events and close the producer&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// We&#39;re ready to finish&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;termChan&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// wait for go-routine to terminate&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doneChan&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Now we can exit&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Close&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

	&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_more_episodes&#34;&gt;📺 More Episodes…&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;S01E00 - Background&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/&#34;&gt;S01E01 - Pointers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/&#34;&gt;S01E02 - Slices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e03-maps/&#34;&gt;S01E03 - Maps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e04-function-closures/&#34;&gt;S01E04 - Function Closures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/&#34;&gt;S01E05 - Interfaces&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/&#34;&gt;S01E06 - Errors&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e07-readers/&#34;&gt;S01E07 - Readers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e08-images/&#34;&gt;S01E08 - Images&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/&#34;&gt;S01E09 - Concurrency (Channels, Goroutines)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/03/learning-golang-some-rough-notes-s01e10-concurrency-web-crawler/&#34;&gt;S01E10 - Concurrency (Web Crawler)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e00-kafka-and-go/&#34;&gt;S02E00 - Kafka and Go&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e01-my-first-kafka-go-producer/&#34;&gt;S02E01 - My First Kafka Go Producer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;S02E02 - Adding error handling to the Producer&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S02E01 - My First Kafka Go Producer</title>
      <link>https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e01-my-first-kafka-go-producer/</link>
      <pubDate>2020-07-08</pubDate>
      
      <guid>https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e01-my-first-kafka-go-producer/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/07/IMG_5126.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/myfirstkafkaproducer.png&#34; alt=&#34;My First Kafka Go Producer&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To install the Confluent Go client you need to run&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;gopkg&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;confluentinc&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;confluent&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With that done, we can run our first Kafka Go code! Make sure you&amp;#8217;ve got a local Kafka broker running first, and then give this a spin:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;package&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;import&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;gopkg.in/confluentinc/confluent-kafka-go.v1/kafka&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// --&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// The topic is passed as a pointer to the Producer, so we can&#39;t&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// use a hard-coded literal. And a variable is a nicer way to do&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// it anyway ;-)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;topic&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;test_topic&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// --&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Create Producer instance&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// https://docs.confluent.io/current/clients/confluent-kafka-go/index.html#NewProducer&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Variable p holds the new Producer instance. There&#39;s a bunch of config that we _could_&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// specify here but the only essential one is the bootstrap server.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Note that we ignore any error that might happen, by passing _ as the second variable&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// on the left-hand side. This is, obviously, a terrible idea.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

	&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;NewProducer&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ConfigMap&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;bootstrap.servers&#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;localhost:9092&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;})&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// --&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Send a message using Produce()&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// https://docs.confluent.io/current/clients/confluent-kafka-go/index.html#Producer.Produce&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Only essential values are specified here - the topic, partition, and value&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// There is NO handling of errors, timeouts, etc - we just fire &amp;amp; forget this message.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Did it work? ¯\_(ツ)_/¯&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Produce&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Message&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TopicPartition&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Topic&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;topic&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
			&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Partition&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;},&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
		&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&#34;Hello world&#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)},&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;

	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// --&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Close the producer&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
	&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Close&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When you run this, you get a message written to a Kafka topic!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/kafkacat01.gif&#34; alt=&#34;kafkacat01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_dont_try_this_at_home&#34;&gt;Don&amp;#8217;t try this at home!&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Well, try it at home. But don&amp;#8217;t take it anywhere near &lt;em&gt;actual code&lt;/em&gt; that you need to write. As the comments in the code above show, there is &lt;strong&gt;NO&lt;/strong&gt; error handling, whatsoever. I&amp;#8217;m going to explore that in subsequent posts, but want to start at the very simplest example to start with here.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_ide_ftw&#34;&gt;IDE FTW&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;(WTF? &lt;a href=&#34;https://en.wikipedia.org/wiki/Integrated_development_environment&#34;&gt;IDE&lt;/a&gt; &lt;a href=&#34;https://www.yourdictionary.com/ftw&#34;&gt;FTW&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The VS Code environment is nice and helpful for writing Go and brings in function definitions etc&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/vscode02.png&#34; alt=&#34;vscode02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can press Ctrl and click on a function or type and it will take you through to the definition, which is often quicker than looking up the API documentation&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/vscode03.gif&#34; alt=&#34;vscode03&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_more_episodes&#34;&gt;📺 More Episodes…&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;S01E00 - Background&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/&#34;&gt;S01E01 - Pointers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/&#34;&gt;S01E02 - Slices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e03-maps/&#34;&gt;S01E03 - Maps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e04-function-closures/&#34;&gt;S01E04 - Function Closures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/&#34;&gt;S01E05 - Interfaces&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/&#34;&gt;S01E06 - Errors&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e07-readers/&#34;&gt;S01E07 - Readers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e08-images/&#34;&gt;S01E08 - Images&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/&#34;&gt;S01E09 - Concurrency (Channels, Goroutines)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/03/learning-golang-some-rough-notes-s01e10-concurrency-web-crawler/&#34;&gt;S01E10 - Concurrency (Web Crawler)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e00-kafka-and-go/&#34;&gt;S02E00 - Kafka and Go&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;S02E01 - My First Kafka Go Producer&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/10/learning-golang-some-rough-notes-s02e02-adding-error-handling-to-the-producer/&#34;&gt;S02E02 - Adding error handling to the Producer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S02E00 - Kafka and Go</title>
      <link>https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e00-kafka-and-go/</link>
      <pubDate>2020-07-08</pubDate>
      
      <guid>https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e00-kafka-and-go/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/07/IMG_5126.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With the first leg of my journey with Go &lt;a href=&#34;https://rmoff.net/2020/07/03/learning-golang-some-rough-notes-s01e10-concurrency-web-crawler/&#34;&gt;done&lt;/a&gt; (starting from a &lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;&lt;em&gt;very&lt;/em&gt; rudimentary base&lt;/a&gt;), the next step for me was to bring it into my current area of interest and work - Apache Kafka.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are several client libraries available. I&amp;#8217;m going to use the &lt;a href=&#34;https://docs.confluent.io/current/clients/go.html&#34;&gt;the Confluent Go client&lt;/a&gt; for now, and if I feel the need later on might explore the others. The &lt;a href=&#34;https://docs.confluent.io/current/clients/confluent-kafka-go/index.html&#34;&gt;API docs&lt;/a&gt; are comprehensive as are the &lt;a href=&#34;https://github.com/confluentinc/confluent-kafka-go/tree/master/examples&#34;&gt;example code snippets&lt;/a&gt; and some showing &lt;a href=&#34;https://github.com/confluentinc/examples/tree/5.5.1-post/clients/cloud/go&#34;&gt;how to use the Go client with Confluent Cloud&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here I&amp;#8217;m going to try and apply what I&amp;#8217;ve learnt so far to the Kafka client and build my understanding of it from the ground up (instead of blindly copy &amp;amp; pasting which is effective but less educational than taking something apart and reassembling it 😎).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_more_episodes&#34;&gt;📺 More Episodes…&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;S01E00 - Background&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/&#34;&gt;S01E01 - Pointers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/&#34;&gt;S01E02 - Slices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e03-maps/&#34;&gt;S01E03 - Maps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e04-function-closures/&#34;&gt;S01E04 - Function Closures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/&#34;&gt;S01E05 - Interfaces&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/&#34;&gt;S01E06 - Errors&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e07-readers/&#34;&gt;S01E07 - Readers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e08-images/&#34;&gt;S01E08 - Images&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/&#34;&gt;S01E09 - Concurrency (Channels, Goroutines)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/03/learning-golang-some-rough-notes-s01e10-concurrency-web-crawler/&#34;&gt;S01E10 - Concurrency (Web Crawler)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;S02E00 - Kafka and Go&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e01-my-first-kafka-go-producer/&#34;&gt;S02E01 - My First Kafka Go Producer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/10/learning-golang-some-rough-notes-s02e02-adding-error-handling-to-the-producer/&#34;&gt;S02E02 - Adding error handling to the Producer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E10 - Concurrency (Web Crawler)</title>
      <link>https://rmoff.net/2020/07/03/learning-golang-some-rough-notes-s01e10-concurrency-web-crawler/</link>
      <pubDate>2020-07-03</pubDate>
      
      <guid>https://rmoff.net/2020/07/03/learning-golang-some-rough-notes-s01e10-concurrency-web-crawler/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/concurrency/9&#34;&gt;A Tour of Go : sync.Mutex&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the &lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/&#34;&gt;previous exercise&lt;/a&gt; I felt my &lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;absence of a formal CompSci background&lt;/a&gt; with the introduction of Binary Sorted Trees, and now I am concious of it again with learning about mutex. I&amp;#8217;d &lt;em&gt;heard&lt;/em&gt; of them before, mostly when Oracle performance folk were talking about wait types - TIL it stands for &lt;code&gt;mutual exclusion&lt;/code&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What if we … want to make sure only one goroutine can access a variable at a time to avoid conflicts?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This concept is called mutual exclusion, and the conventional name for the data structure that provides it is &lt;strong&gt;mutex&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_exercise_web_crawler&#34;&gt;Exercise: Web Crawler&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/concurrency/10&#34;&gt;A Tour of Go : Exercise: Web Crawler&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This was quite a fun one once I wrapped my head around it. It gave a health dose of copy &amp;amp; paste advice in the form of the &lt;a href=&#34;https://tour.golang.org/concurrency/9&#34;&gt;previous example&lt;/a&gt; which I used to implement the first requirement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_dont_fetch_the_same_url_twice&#34;&gt;Don&amp;#8217;t fetch the same URL twice&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I created a &lt;code&gt;URLs&lt;/code&gt; struct to hold a map of URLs and a boolean of whether they have been crawled or not, and included a mutex so that it can be read and updated safely in concurrent execution&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; URLs &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	c   &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;bool&lt;/span&gt;
	mux sync.Mutex
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; u URLs = URLs{c: &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;bool&lt;/span&gt;)}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;code&gt;URLs&lt;/code&gt; type implements two functions - one to check if a given URL has been crawled, and the other to mark it as such&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (u URLs) &lt;span style=&#34;color:#00f&#34;&gt;IsCrawled&lt;/span&gt;(url &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#b00040&#34;&gt;bool&lt;/span&gt; {
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\n👀 Checking if %v has been crawled…&amp;#34;&lt;/span&gt;, url)
	u.mux.&lt;span style=&#34;color:#00f&#34;&gt;Lock&lt;/span&gt;()
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;defer&lt;/span&gt; u.mux.&lt;span style=&#34;color:#00f&#34;&gt;Unlock&lt;/span&gt;()
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; _, ok &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; u.c[url]; ok &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt; {
		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;…it hasn&amp;#39;t\t&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;
	}
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;…it has\t&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt;
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (u URLs) &lt;span style=&#34;color:#00f&#34;&gt;Crawled&lt;/span&gt;(url &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;) {
	u.mux.&lt;span style=&#34;color:#00f&#34;&gt;Lock&lt;/span&gt;()
	u.c[url] = &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt;
	u.mux.&lt;span style=&#34;color:#00f&#34;&gt;Unlock&lt;/span&gt;()
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To the main &lt;code&gt;Crawl&lt;/code&gt; function I then added calls to these functions and a conditional return:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Check if the URL has been crawled already
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; u.&lt;span style=&#34;color:#00f&#34;&gt;IsCrawled&lt;/span&gt;(url) &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt; {
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt;
}
fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\n➡️ Crawling %v&amp;#34;&lt;/span&gt;, url)
body, urls, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; fetcher.&lt;span style=&#34;color:#00f&#34;&gt;Fetch&lt;/span&gt;(url)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Mark the URL as crawled (assumes that if there&amp;#39;s an error you don&amp;#39;t want to retry it)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;u.&lt;span style=&#34;color:#00f&#34;&gt;Crawled&lt;/span&gt;(url)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As the comment notes, we assume that if a URL has been crawled, then we mark it as such, regardless of error status. If I was feeling adventurous I guess I could implement some kind of retry logic with incremental backoff…but I&amp;#8217;m keeping it simple for now :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_fetch_urls_in_parallel&#34;&gt;Fetch URLs in parallel&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This one I assumed could be done by simply using a Go routine in calling the nested &lt;code&gt;Crawl&lt;/code&gt; functions. What it actually did was just fetch the first URL and exit&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&amp;gt; Checking &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/ has been crawled……it hasn&amp;#39;t	
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	found: https:&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt;golang.org&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;The Go Programming Language&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Off to Google we went and found &lt;a href=&#34;https://stackoverflow.com/a/12250366/350613&#34;&gt;this answer on StackOverflow&lt;/a&gt; which showed the use of &lt;a href=&#34;https://golang.org/pkg/sync/#WaitGroup&#34;&gt;WaitGroups&lt;/a&gt; (nice &lt;a href=&#34;https://gobyexample.com/waitgroups&#34;&gt;example here&lt;/a&gt;). I ripped this off shamelessly into my code and it &lt;em&gt;almost&lt;/em&gt; worked…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;&#34;&gt;👀&lt;/span&gt; Checking &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/ has been crawled……it hasn&amp;#39;t	
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;➡&lt;/span&gt;️ Crawling https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&amp;gt;&lt;span style=&#34;&#34;&gt;✅&lt;/span&gt; found: https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/ &amp;#34;The Go Programming Language&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;👀&lt;/span&gt; Checking &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/pkg/ has been crawled……it hasn&amp;#39;t	
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;➡���&lt;/span&gt; Crawling https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/pkg/
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&amp;gt;&lt;span style=&#34;&#34;&gt;✅&lt;/span&gt; found: https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/pkg/ &amp;#34;Packages&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;👀&lt;/span&gt; Checking &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/ has been crawled……it has	
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;👀&lt;/span&gt; Checking &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/cmd/ has been crawled……it hasn&amp;#39;t	
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;➡&lt;/span&gt;️ Crawling https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/cmd/
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&amp;gt;&lt;span style=&#34;&#34;&gt;⚠&lt;/span&gt;️ not found: https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/cmd/
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;👀&lt;/span&gt; Checking &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/pkg/fmt/ has been crawled……it hasn&amp;#39;t	
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;➡&lt;/span&gt;️ Crawling https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/pkg/fmt/
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&amp;gt;&lt;span style=&#34;&#34;&gt;✅&lt;/span&gt; found: https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/pkg/fmt/ &amp;#34;Package fmt&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;👀&lt;/span&gt; Checking &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/ has been crawled……it has	
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;👀&lt;/span&gt; Checking &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/pkg/ has been crawled……it has	
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;👀&lt;/span&gt; Checking &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/pkg/os/ has been crawled……it hasn&amp;#39;t	
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;➡&lt;/span&gt;️ Crawling https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/pkg/os/
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&amp;gt;&lt;span style=&#34;&#34;&gt;✅&lt;/span&gt; found: https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/pkg/os/ &amp;#34;Package os&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;👀&lt;/span&gt; Checking &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/ has been crawled……it has	
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;👀&lt;/span&gt; Checking &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; https:&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//golang.org/pkg/ has been crawled……it has	
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;👀&lt;/span&gt; Checking &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; https:&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt;golang.org&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;cmd&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; has been crawled&lt;span style=&#34;&#34;&gt;……&lt;/span&gt;it has	&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;but then threw a panic&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;panic: sync: negative WaitGroup counter

goroutine &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; [running]:
sync.(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;WaitGroup).&lt;span style=&#34;color:#00f&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0xc0000a4010&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0xffffffffffffffff&lt;/span&gt;)
	&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;usr&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;local&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;src&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;sync&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;waitgroup.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0x1ec&lt;/span&gt;
sync.(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;WaitGroup).&lt;span style=&#34;color:#00f&#34;&gt;Done&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0xc0000a4010&lt;/span&gt;)
	&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;usr&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;local&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;src&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;sync&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;waitgroup.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0x34&lt;/span&gt;
main.&lt;span style=&#34;color:#00f&#34;&gt;Crawl&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0x1100e8c&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x4&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0x110fb60&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0xc0000801b0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0xc0000a4010&lt;/span&gt;)
	&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;Users&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;rmoff&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;src&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;webcrawler&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;webcrawler.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0x676&lt;/span&gt;
main.&lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;()
	&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;Users&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;rmoff&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;src&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;webcrawler&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;webcrawler.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0x98&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A bit of Googling showed that &lt;code&gt;panic: sync: negative WaitGroup counter&lt;/code&gt; (as the error actually suggests) comes about because &lt;a href=&#34;https://golang.org/pkg/sync/#WaitGroup.Done&#34;&gt;Done&lt;/a&gt; had been called to decrease the number of WaitGroups and taken them below zero.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This happened because every execution of &lt;code&gt;Crawl&lt;/code&gt; includes&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;defer&lt;/span&gt; wg.&lt;span style=&#34;color:#00f&#34;&gt;Done&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;but the corresponding&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;wg.&lt;span style=&#34;color:#00f&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;was only added in the &lt;em&gt;nested&lt;/em&gt; call to &lt;code&gt;Crawl&lt;/code&gt; and not the initial invocation from &lt;code&gt;main()&lt;/code&gt;. Adding this into &lt;code&gt;main()&lt;/code&gt; then made everything work just great.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Crawl&lt;/span&gt;(url &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;, depth &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, fetcher Fetcher, wg &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;sync.WaitGroup) {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;defer&lt;/span&gt; wg.&lt;span style=&#34;color:#00f&#34;&gt;Done&lt;/span&gt;()
&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; depth &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt;
	}

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Check if the URL has been crawled already
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; u.&lt;span style=&#34;color:#00f&#34;&gt;IsCrawled&lt;/span&gt;(url) &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt; {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt;
	}
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\n➡️ Crawling %v&amp;#34;&lt;/span&gt;, url)
	body, urls, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; fetcher.&lt;span style=&#34;color:#00f&#34;&gt;Fetch&lt;/span&gt;(url)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Mark the URL as crawled (assumes that if there&amp;#39;s an error you don&amp;#39;t want to retry it)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	u.&lt;span style=&#34;color:#00f&#34;&gt;Crawled&lt;/span&gt;(url)

	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(err)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt;
	}
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\n\t-&amp;gt;✅ found: %s %q\n&amp;#34;&lt;/span&gt;, url, body)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, z &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; urls {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		wg.&lt;span style=&#34;color:#00f&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#00f&#34;&gt;Crawl&lt;/span&gt;(z, depth&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, fetcher, wg)
&lt;/span&gt;	}

}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	wg &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;sync.WaitGroup{}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	wg.&lt;span style=&#34;color:#00f&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#00f&#34;&gt;Crawl&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;https://golang.org/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, fetcher, wg)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	wg.&lt;span style=&#34;color:#00f&#34;&gt;Wait&lt;/span&gt;()
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_more_episodes&#34;&gt;📺 More Episodes…&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;S01E00 - Background&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/&#34;&gt;S01E01 - Pointers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/&#34;&gt;S01E02 - Slices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e03-maps/&#34;&gt;S01E03 - Maps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e04-function-closures/&#34;&gt;S01E04 - Function Closures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/&#34;&gt;S01E05 - Interfaces&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/&#34;&gt;S01E06 - Errors&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e07-readers/&#34;&gt;S01E07 - Readers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e08-images/&#34;&gt;S01E08 - Images&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/&#34;&gt;S01E09 - Concurrency (Channels, Goroutines)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;S01E10 - Concurrency (Web Crawler)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Why JSON isn&#39;t the same as JSON Schema (Viewing Kafka messages bytes as hex)</title>
      <link>https://rmoff.net/2020/07/03/why-json-isnt-the-same-as-json-schema-viewing-kafka-messages-bytes-as-hex/</link>
      <pubDate>2020-07-03</pubDate>
      
      <guid>https://rmoff.net/2020/07/03/why-json-isnt-the-same-as-json-schema-viewing-kafka-messages-bytes-as-hex/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/05/IMG_4466.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;ve been playing around with the new SerDes (serialisers/deserialisers) that shipped with Confluent Platform 5.5 - &lt;a href=&#34;https://docs.confluent.io/current/schema-registry/serdes-develop/index.html&#34;&gt;Protobuf, and JSON Schema&lt;/a&gt; (these were added to the existing support for Avro). The serialisers (and associated &lt;a href=&#34;https://docs.confluent.io/current/schema-registry/connect.html&#34;&gt;Kafka Connect converters&lt;/a&gt;) take a payload and serialise it into bytes for sending to Kafka, and I was interested in what those bytes look like. For that I used my favourite Kafka swiss-army knife: kafkacat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s a message serialised to JSON Schema:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kafkacat -b kafka:29092 -t pageviews-js -C -c1

&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;viewtime&amp;#34;&lt;/span&gt;:1,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;userid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;User_9&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pageid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Page_57&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Looks just like a message from another topic serialised as regular JSON, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kafkacat -b kafka:29092 -t pageviews-j -C -c1

&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;viewtime&amp;#34;&lt;/span&gt;:1,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;userid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;User_3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pageid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Page_77&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Except it&amp;#8217;s not! We can confirm this by looking at the raw bytes on the message itself by piping the output from kafkacat into hexdump.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check out these magical, pesky, bytes on the front of the JSON Schema-encoded message, and note that they&amp;#8217;re not there on the JSON message:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kafkacat -b kafka:29092 -t pageviews-jsonschema -C -c1 | hexdump -C

&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;00000000&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt; 7b &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;76&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; 6d &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;  |.....&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;viewtime&amp;#34;&lt;/span&gt;|
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;00000010&lt;/span&gt;  3a &lt;span style=&#34;color:#666&#34;&gt;31&lt;/span&gt; 2c &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;75&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;72&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; 3a &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt;  |:1,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;userid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Use|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;00000020  72 5f 39 22 2c 22 70 61  67 65 69 64 22 3a 22 50  |r_9&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pageid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;P|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;00000030  61 67 65 5f 35 37 22 7d  0a                       |age_57&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;.|
&lt;span style=&#34;color:#666&#34;&gt;00000039&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kafkacat -b kafka:29092 -t pageviews-json -C -c1 | hexdump -C

&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;00000000&lt;/span&gt;  7b &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt;  6d &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; 3a &lt;span style=&#34;color:#666&#34;&gt;31&lt;/span&gt; 2c &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;75&lt;/span&gt;  |&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;viewtime&amp;#34;&lt;/span&gt;:1,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;u|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;00000010  73 65 72 69 64 22 3a 22  55 73 65 72 5f 33 22 2c  |serid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;User_3&amp;#34;&lt;/span&gt;,|
&lt;span style=&#34;color:#666&#34;&gt;00000020&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;  3a &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; 5f &lt;span style=&#34;color:#666&#34;&gt;37&lt;/span&gt;  |&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pageid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Page_7|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;00000030  37 22 7d 0a                                       |7&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;.|
&lt;span style=&#34;color:#666&#34;&gt;00000034&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The five extra bytes (&lt;code&gt;00 00 00 00 02&lt;/code&gt;) are defined in the &lt;a href=&#34;https://docs.confluent.io/current/schema-registry/serdes-develop/index.html#wire-format&#34;&gt;wire format&lt;/a&gt; used by the Schema Registry serdes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Byte 0&lt;/strong&gt;: Magic Byte - Confluent serialization format version number; currently always 0.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bytes 1-4&lt;/strong&gt;: 4-byte schema ID as returned by Schema Registry.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_json_json_schema&#34;&gt;JSON != JSON Schema&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They may sound similar, but the above analysis shows that you can&amp;#8217;t just interchange &lt;code&gt;org.apache.kafka.connect.json.JsonConverter&lt;/code&gt; and &lt;code&gt;io.confluent.connect.json.JsonSchemaConverter&lt;/code&gt; - they are writing and expecting to read data with different wire formats. If you try to read data that&amp;#8217;s been serialised with one using the other, it&amp;#8217;s gonna break.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s an example of writing data in the two formats in Kafka Connect:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X PUT &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//localhost:8083/connectors/source-datagen-jsonschema-01/config \
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;connector.class&amp;#34;: &amp;#34;io.confluent.kafka.connect.datagen.DatagenConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;key.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter&amp;#34;: &amp;#34;io.confluent.connect.json.JsonSchemaConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter.schema.registry.url&amp;#34;: &amp;#34;http://schema-registry:8081&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;quickstart&amp;#34;: &amp;#34;ratings&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;iterations&amp;#34;:1,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;kafka.topic&amp;#34;: &amp;#34;test-jsonschema&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;tasks.max&amp;#34;: 1
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        }&amp;#39;&lt;/span&gt;

curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X PUT &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//localhost:8083/connectors/source-datagen-json-01/config \
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;connector.class&amp;#34;: &amp;#34;io.confluent.kafka.connect.datagen.DatagenConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;key.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.json.JsonConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;quickstart&amp;#34;: &amp;#34;ratings&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;iterations&amp;#34;:1,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;kafka.topic&amp;#34;: &amp;#34;test-json&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;tasks.max&amp;#34;: 1
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        }&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;From this we have two topics; &lt;code&gt;test-json&lt;/code&gt; and &lt;code&gt;test-jsonschema&lt;/code&gt;. Let&amp;#8217;s read the contents of these using a Kafka Connect sink with the correct converters:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X PUT &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//localhost:8083/connectors/sink-file-jsonschema-as-jsonschema/config \
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;connector.class&amp;#34;: &amp;#34;org.apache.kafka.connect.file.FileStreamSinkConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;key.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter&amp;#34;: &amp;#34;io.confluent.connect.json.JsonSchemaConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter.schema.registry.url&amp;#34;: &amp;#34;http://schema-registry:8081&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;tasks.max&amp;#34;: 1,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;file&amp;#34;: &amp;#34;/jsonschema-as-jsonschema.txt&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;topics&amp;#34;: &amp;#34;test-jsonschema&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;}&amp;#39;&lt;/span&gt;

curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X PUT &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//localhost:8083/connectors/sink-file-json-as-json/config \
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;connector.class&amp;#34;: &amp;#34;org.apache.kafka.connect.file.FileStreamSinkConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;key.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.json.JsonConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;tasks.max&amp;#34;: 1,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;file&amp;#34;: &amp;#34;/json-as-json.txt&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;topics&amp;#34;: &amp;#34;test-json&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As expected, this works. But what about if we mix it up, and try to read JSON data using the JSON Schema deserialiser (through the &lt;code&gt;io.confluent.connect.json.JsonSchemaConverter&lt;/code&gt; converter)?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X PUT &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//localhost:8083/connectors/sink-file-json-as-jsonschema/config \
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;connector.class&amp;#34;: &amp;#34;org.apache.kafka.connect.file.FileStreamSinkConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;key.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter&amp;#34;: &amp;#34;io.confluent.connect.json.JsonSchemaConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter.schema.registry.url&amp;#34;: &amp;#34;http://schema-registry:8081&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;tasks.max&amp;#34;: 1,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;file&amp;#34;: &amp;#34;/json-as-jsonschema.txt&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;topics&amp;#34;: &amp;#34;test-json&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;⚠️ It fails!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;org.apache.kafka.connect.errors.DataException: Converting byte&lt;span style=&#34;color:#666&#34;&gt;[]&lt;/span&gt; to Kafka Connect data failed due to serialization error:
        at io.confluent.connect.json.JsonSchemaConverter.toConnectData&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;JsonSchemaConverter.java:111&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        at org.apache.kafka.connect.storage.Converter.toConnectData&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;Converter.java:87&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        at org.apache.kafka.connect.runtime.WorkerSinkTask.lambda&lt;span style=&#34;color:#19177c&#34;&gt;$convertAndTransformRecord$2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;WorkerSinkTask.java:492&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        at org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperator.execAndRetry&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;RetryWithToleranceOperator.java:128&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        at org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperator.execAndHandleError&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;RetryWithToleranceOperator.java:162&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        ... &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; more
Caused by: org.apache.kafka.common.errors.SerializationException: Error deserializing JSON message &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; id -1
Caused by: org.apache.kafka.common.errors.SerializationException: Unknown magic byte!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What&amp;#8217;s this mean? Well &lt;code&gt;Unknown magic byte!&lt;/code&gt; is the deserialiser&amp;#8217;s quirky way of say that the bytes on the front of the message that JSON Schema has (which we saw above) aren&amp;#8217;t there. Why aren&amp;#8217;t they there? Because it&amp;#8217;s just straight-up JSON that we&amp;#8217;re trying to read - and so we should be use the JSON deserialiser (provided for Kafka Connect by the &lt;code&gt;org.apache.kafka.connect.json.JsonConverter&lt;/code&gt; converter).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Actual (JSON)&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;00000000  7b 22 76 69 65 77 74 69  6d 65 22 3a 31 2c 22 75  |{&#34;viewtime&#34;:1,&#34;u|&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expected (JSON Schema)&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;00000000  00 00 00 00 02 7b 22 76  69 65 77 74 69 6d 65 22  |&amp;#8230;&amp;#8203;..{&#34;viewtime&#34;|&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The final permutation here is trying to read JSON Schema messages using the JSON deserialiser:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X PUT &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//localhost:8083/connectors/sink-file-jsonschema-as-json/config \
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;connector.class&amp;#34;: &amp;#34;org.apache.kafka.connect.file.FileStreamSinkConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;key.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.json.JsonConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;tasks.max&amp;#34;: 1,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;file&amp;#34;: &amp;#34;/jsonschema-as-json.txt&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;topics&amp;#34;: &amp;#34;test-jsonschema&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As we might expect, this also fails&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;org.apache.kafka.connect.errors.DataException: Converting byte&lt;span style=&#34;color:#666&#34;&gt;[]&lt;/span&gt; to Kafka Connect data failed due to serialization error:
        at org.apache.kafka.connect.json.JsonConverter.toConnectData&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;JsonConverter.java:355&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        at org.apache.kafka.connect.storage.Converter.toConnectData&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;Converter.java:87&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;                                                               
        at org.apache.kafka.connect.runtime.WorkerSinkTask.lambda&lt;span style=&#34;color:#19177c&#34;&gt;$convertAndTransformRecord$2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;WorkerSinkTask.java:492&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;                               
        at org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperator.execAndRetry&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;RetryWithToleranceOperator.java:128&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        at org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperator.execAndHandleError&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;RetryWithToleranceOperator.java:162&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;                
        ... &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; more                                                                                                                          
Caused by: org.apache.kafka.common.errors.SerializationException: java.io.CharConversionException: Invalid UTF-32 character 0x27a2272 &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;above 0x0010ffff&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; at char &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#1, byte #7)&lt;/span&gt;
Caused by: java.io.CharConversionException: Invalid UTF-32 character 0x27a2272 &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;above 0x0010ffff&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; at char &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#1, byte #7)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here the JSON deserialiser is trying to read JSON, but hitting the bytes that the JSON Schema serialiser writes to the front of each message, which are not valid JSON (&lt;code&gt;Invalid UTF-32 character 0x27a2272 (above 0x0010ffff) at char #1, byte #7&lt;/code&gt;). If you&amp;#8217;ve serialised your data using the Confluent Schema Registry JSON Schema serialiser, you&amp;#8217;ve gotta deserialise it with that too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Actual (JSON Schema)&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;00000000  00 00 00 00 02 7b 22 76  69 65 77 74 69 6d 65 22  |&amp;#8230;&amp;#8203;..{&#34;viewtime&#34;|&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expected (JSON)&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;00000000  7b 22 76 69 65 77 74 69  6d 65 22 3a 31 2c 22 75  |{&#34;viewtime&#34;:1,&#34;u|&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E09 - Concurrency (Channels, Goroutines)</title>
      <link>https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/</link>
      <pubDate>2020-07-02</pubDate>
      
      <guid>https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://tour.golang.org/concurrency/1&#34;&gt;A Tour of Go : Goroutines&lt;/a&gt; was OK but as with some previous material I headed over to &lt;a href=&#34;https://gobyexample.com/goroutines&#34;&gt;Go by example&lt;/a&gt; for clearer explanations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://tour.golang.org/concurrency/5&#34;&gt;A Tour of Go : Select&lt;/a&gt; definitely needed a bit more explanation for me. I&amp;#8217;ve annotated it with some inline comments&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;fibonacci&lt;/span&gt;(c, quit &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) {
	x, y &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Loop forever
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;select&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Try to write the value of x to the channel c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; c &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; x:
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;            &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// If that works then do the fibonacci thing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;			x, y = y, x&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;y
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Try to read from the quit channel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;quit:
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;            &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// If there&amp;#39;s a value to be read then exit out of the function
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;quit&amp;#34;&lt;/span&gt;)
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt;
		}
	}
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	c &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)
	quit &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Spin off a Goroutine
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt;() {
        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Do this ten times
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;            &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Print the next value from the channel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;c)
		}
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Once we&amp;#39;ve done it ten times, put a value onto the quit channel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// which will cause the fibonacci function to return.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		quit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
	}()
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Run the function, passing in the two channels
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#00f&#34;&gt;fibonacci&lt;/span&gt;(c, quit)
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As you might expect, if you move the call to &lt;code&gt;fibonacci&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; the Goroutine then it blocks, since the function will be waiting forever to put a value onto the c channel or read from the quit channel. This causes the program to error:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;fatal error: all goroutines are asleep - deadlock!&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;ve been using VSCode to edit and run some of the Go exercises and found the step-into debugger useful for following some of the logic here. As you&amp;#8217;d expect with a debugger, you can watch the value of variables as the code execution progresses, and do stuff like watch the contents of a channel. Here&amp;#8217;s an example from where I&amp;#8217;ve modified the channel to give it a buffer&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;c &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/select01.png&#34; alt=&#34;select01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_default_selection_time&#34;&gt;Default Selection / &lt;code&gt;time&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/concurrency/6&#34;&gt;A Tour of Go : Default Selection&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For me, this made the mistake of illustrating a new concept (&lt;code&gt;default&lt;/code&gt;) with code that relied on other as-yet unexplained concepts. The problem with this is that you hit &lt;code&gt;Run&lt;/code&gt; and see what it does and it seems to make sense, but in grokking the lines of code it&amp;#8217;s not entirely clear.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We&amp;#8217;ve been shown the &lt;code&gt;select&lt;/code&gt; being used to choose which of the &lt;code&gt;case&lt;/code&gt; statements can be run with the example of channels providing input - but in this code there&amp;#8217;s no apparent channel declared:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	tick &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; time.&lt;span style=&#34;color:#00f&#34;&gt;Tick&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; time.Millisecond)
	boom &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; time.&lt;span style=&#34;color:#00f&#34;&gt;After&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;500&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; time.Millisecond)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;select&lt;/span&gt; {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;tick:
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tick.&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;boom:
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;BOOM!&amp;#34;&lt;/span&gt;)
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt;
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;:
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;    .&amp;#34;&lt;/span&gt;)
			time.&lt;span style=&#34;color:#00f&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; time.Millisecond)
		}
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Maybe this is the Tour&amp;#8217;s way to prod people into RTFM ;) Prompted by my puzzlement I went and looked up the &lt;a href=&#34;https://golang.org/pkg/time&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; package and &lt;a href=&#34;https://golang.org/pkg/time/#Tick&#34;&gt;&lt;code&gt;Tick&lt;/code&gt;&lt;/a&gt; function, which turns out to actually &lt;a href=&#34;https://golang.org/pkg/time/#Ticker&#34;&gt; offer a channel&lt;/a&gt; - so this now makes sense.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Every 100 ms a &lt;code&gt;Tick&lt;/code&gt; is sent to the channel, in between the &lt;code&gt;default&lt;/code&gt; condition kicks in and sleeps for 50ms, and after 500ms the final condition is met and returns.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_exercise_equivalent_binary_trees&#34;&gt;Exercise: Equivalent Binary Trees&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/concurrency/7&#34;&gt;A Tour of Go : Exercise: Equivalent Binary Trees&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are times when I feel the &lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;absence of a formal CompSci background&lt;/a&gt;…and this is one of them :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I found a &lt;a href=&#34;https://www.youtube.com/watch?time_continue=3205&amp;amp;v=9HWBOHQRZIU&#34;&gt;useful video&lt;/a&gt; which explains Binary Trees in a good way (also &lt;a href=&#34;https://www.youtube.com/watch?v=mFptHjTT3l8&#34;&gt;this one&lt;/a&gt;, both linked to &lt;a href=&#34;https://study.cs50.net/trees&#34;&gt;from here&lt;/a&gt;), which then set me up a bit more confidently to approach this exercise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To start with I took the skeleton that the exercise provides and brought it into VSCode - it does useful things like code completion:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/vscode01.png&#34; alt=&#34;vscode01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First up I commented out the &lt;code&gt;Same&lt;/code&gt; function, set up a simple &lt;code&gt;for&lt;/code&gt; loop in &lt;code&gt;main&lt;/code&gt; and a debug print in the &lt;code&gt;Walk&lt;/code&gt; function, just to see what was going on&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;golang.org/x/tour/tree&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Walk walks the tree t sending all values
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// from the tree to the channel ch.
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;tree.Tree, ch &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Walk: %v\n&amp;#34;&lt;/span&gt;, t.Value)
&lt;/span&gt;}

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// // Same determines whether the trees
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// // t1 and t2 contain the same values.
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// func Same(t1, t2 *tree.Tree) bool
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	c &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(tree.&lt;span style=&#34;color:#00f&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;), c)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;select&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;c:
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(c)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	}
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You get to see the first value of the tree node printed by the function, and then a deadlock from the &lt;code&gt;select&lt;/code&gt; because nothing&amp;#8217;s being written to the channel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;Walk: &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;
fatal &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;: all goroutines are asleep &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; deadlock!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If we add a &lt;code&gt;default&lt;/code&gt; to the &lt;code&gt;select&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	c &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(tree.&lt;span style=&#34;color:#00f&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;), c)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;select&lt;/span&gt; {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;c:
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(c)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;:
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default: %v\n&amp;#34;&lt;/span&gt;, i)
		}
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;then we get this&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
Walk: &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What about passing the value back on the channel? You may notice the, &lt;em&gt;ahem&lt;/em&gt;, &#39;deliberate&#39; mistake that I made in the above code, where I did this&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;c:
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Tree value: %v\n&amp;#34;&lt;/span&gt;, c)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If I put the value of the tree node on the channel in &lt;code&gt;Walk&lt;/code&gt; it should get printed, right? Well…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;function Walk: &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;0xc0000200c0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Huh? What&amp;#8217;s that &lt;code&gt;0xc0000200c0&lt;/code&gt;? It&amp;#8217;s the &lt;strong&gt;channel&lt;/strong&gt; itself, not the value that&amp;#8217;s been passed into it. Instead we need:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;c:
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Tree value: %v\n&amp;#34;&lt;/span&gt;, x)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;function Walk: &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now let&amp;#8217;s do some actual walking! As the exercise tells us, the tree is a struct:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; Tree &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
    Left  &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;Tree
    Value &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;
    Right &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;Tree
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;so as well as writing the &lt;code&gt;Value&lt;/code&gt; to the channel, we will call the &lt;code&gt;Walk&lt;/code&gt; function recursively on the child nodes of the current node—if there are any:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;tree.Tree, ch &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) {
	ch &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; t.Value
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; t.Left &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t.Left, ch)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; t.Right &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t.Right, ch)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	}
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This successfully walks the tree:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;Tree value: &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What I&amp;#8217;m not clear about from the text is if this list should be strictly in order. Having solutions linked to from the Tour exercises definitely would be useful.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s carry on for now and look at the &lt;code&gt;Same&lt;/code&gt; function. I got stuck on this one. Here&amp;#8217;s as far as I got to start with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Same&lt;/span&gt;(t1, t2 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;tree.Tree) &lt;span style=&#34;color:#b00040&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Create a channel into which each tree&amp;#39;s values will be written
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	c1 &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)
	c2 &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Declare two variables that will be used to collate the
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// channel values
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; x1 []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; x2 []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Walk the two trees
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t1, c1)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t2, c2)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Receive the values
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
		x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;c1
		x1 = &lt;span style=&#34;color:#008000&#34;&gt;append&lt;/span&gt;(x1, x)
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
		x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;c2
		x2 = &lt;span style=&#34;color:#008000&#34;&gt;append&lt;/span&gt;(x2, x)
	}

	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\nx1 is %v\n&amp;#34;&lt;/span&gt;, x1)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\nx2 is %v\n&amp;#34;&lt;/span&gt;, x2)

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Not even doing the comparison yet
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;x1 is [&lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;]

x2 is [&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;From this I need to return &lt;code&gt;true&lt;/code&gt; if the two trees store the same values - which they do, but am I supposed to be sorting these results here? Flailing around somewhat, so off to Google to see what others have done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Some time later…&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So, looking at the problem again, let&amp;#8217;s remind ourselves (me) what the tree can look like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://tour.golang.org/content/img/tree.png&#34; alt=&#34;tree&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;Figure 1. &lt;em&gt;Binary Sorted Tree illustration from &lt;a href=&#34;https://tour.golang.org/concurrency/7&#34; class=&#34;bare&#34;&gt;https://tour.golang.org/concurrency/7&lt;/a&gt;&lt;/em&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Since it is &lt;em&gt;sorted&lt;/em&gt;, we know that the left child will always be the lower value than the right. So if we want to return the values in order, we can&amp;#8217;t take the simple approach that I tried above of simply dumping the values as we encountered them on the traversal of the tree from the &lt;strong&gt;top-down&lt;/strong&gt;. Instead we need to traverse to the bottom down the left-hand side and then make our way back up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I found these &lt;a href=&#34;https://medium.com/@cooldeep25/solution-to-a-tour-of-go-exercise-equivalent-binary-trees-d1fff8d3cb6f&#34;&gt;two&lt;/a&gt; &lt;a href=&#34;https://gist.github.com/kaipakartik/8120855&#34;&gt;pages&lt;/a&gt; a useful resource for explaining this clearly and providing code to &lt;del&gt;steal&lt;/del&gt; &lt;em&gt;inspire me.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Both the solutions I found implemented a second function for walking, which now makes sense. It also makes clear how to use &lt;code&gt;close&lt;/code&gt; which I&amp;#8217;d been trying to fit in but couldn&amp;#8217;t figure out how to do so :) Here&amp;#8217;s the elegant solution from &lt;a href=&#34;https://gist.github.com/kaipakartik&#34;&gt;kaipakartik&lt;/a&gt; with my commented annotations&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;tree.Tree, ch &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Synchronously call the recursive function for the current node
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;WalkRecursive&lt;/span&gt;(t, ch)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Once we&amp;#39;ve processed every node, close the channel to indicate 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// that we&amp;#39;ve finished (and thus allow range to be used)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#008000&#34;&gt;close&lt;/span&gt;(ch)
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;WalkRecursive&lt;/span&gt;(t &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;tree.Tree, ch &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// If this node isn&amp;#39;t null
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; t &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Keep traversing, down the left-hand side of the tree
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;WalkRecursive&lt;/span&gt;(t.Left, ch)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Bearing in mind that this is a recursive function
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// we will eventually hit the bottom of the left-hand side
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// of the tree, and thus the above call to WalkRecursive will 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// return and we can put our node&amp;#39;s value onto the channel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        ch &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; t.Value
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Navigate any right-hand nodes too
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;WalkRecursive&lt;/span&gt;(t.Right, ch)
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;with this in place the &lt;code&gt;Walk&lt;/code&gt; function populates the channel in sequential order which thus results in:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	c &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(tree.&lt;span style=&#34;color:#00f&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;), c)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Tree value: &amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
		x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;c
		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%v &amp;#34;&lt;/span&gt;, x)
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;Tree value: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;My existing &lt;code&gt;Same&lt;/code&gt; code was based on the idea of filling two slices with the results and then comparing the final result, but a much smarter way again comes from these &lt;a href=&#34;https://medium.com/@cooldeep25/solution-to-a-tour-of-go-exercise-equivalent-binary-trees-d1fff8d3cb6f&#34;&gt;two&lt;/a&gt; &lt;a href=&#34;https://gist.github.com/kaipakartik/8120855&#34;&gt;pages&lt;/a&gt;, in which the results are compared one by one, since as soon as they diverge we can declare them to not be the same. As above, here&amp;#8217;s &lt;a href=&#34;https://gist.github.com/kaipakartik&#34;&gt;kaipakartik&lt;/a&gt;&#39;s neat solution with my annotations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Same&lt;/span&gt;(t1, t2 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;tree.Tree) &lt;span style=&#34;color:#b00040&#34;&gt;bool&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Each tree is read into separate channels
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    ch1, ch2 &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;), &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Asynchronously walk both trees into their
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// respective channels
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t1, ch1)
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t2, ch2)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Loop
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Read the next value from each channel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Note that these will block (what happens if the trees are different sizes and ch2 is empty?)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        n1, ok1 &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; ch1
        n2, ok2 &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; ch2
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// If the values don&amp;#39;t match, or one channel is closed whilst the 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// other is not then we know they are not the same
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; ok1 &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; ok2 &lt;span style=&#34;color:#666&#34;&gt;||&lt;/span&gt; n1 &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; n2 {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Exit and return false
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;
        }
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// If the first channel has closed then break out of the loop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// I guess you could just `return true` here directly? 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; !ok1 {
        	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
    }
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This works:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\n-&amp;gt; Comparing trees with the same contents : %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;Same&lt;/span&gt;(tree.&lt;span style=&#34;color:#00f&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;), tree.&lt;span style=&#34;color:#00f&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)))
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\n-&amp;gt; Comparing trees with different contents: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;Same&lt;/span&gt;(tree.&lt;span style=&#34;color:#00f&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;), tree.&lt;span style=&#34;color:#00f&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&amp;gt; Comparing trees with the same contents : &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&amp;gt; Comparing trees with different contents: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_more_episodes&#34;&gt;📺 More Episodes…&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;S01E00 - Background&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/&#34;&gt;S01E01 - Pointers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/&#34;&gt;S01E02 - Slices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e03-maps/&#34;&gt;S01E03 - Maps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e04-function-closures/&#34;&gt;S01E04 - Function Closures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/&#34;&gt;S01E05 - Interfaces&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/&#34;&gt;S01E06 - Errors&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e07-readers/&#34;&gt;S01E07 - Readers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e08-images/&#34;&gt;S01E08 - Images&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;S01E09 - Concurrency (Channels, Goroutines)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/03/learning-golang-some-rough-notes-s01e10-concurrency-web-crawler/&#34;&gt;S01E10 - Concurrency (Web Crawler)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E08 - Images</title>
      <link>https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e08-images/</link>
      <pubDate>2020-07-02</pubDate>
      
      <guid>https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e08-images/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/methods/25&#34;&gt;A Tour of Go : Exercise: Images&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is based on the Picture generator from the &lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/&#34;&gt;Slices exercise&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Pic&lt;/span&gt;(dx, dy &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) [][]&lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt; {
	p &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([][]&lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt;,dy)
	
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p {
		p[i] = &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt;,dx)
	}

	 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p {
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p[y] {
            p[y][x]=(&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(x)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(y))
        }
    }

	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; p
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/06/slice02.png&#34; alt=&#34;slice02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;this time it will return an implementation of &lt;code&gt;image.Image&lt;/code&gt; instead of a slice of data.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So we need to implement the &lt;a href=&#34;https://golang.org/pkg/image/#Image&#34;&gt;interfaces defined&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ColorModel&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Bounds&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;At&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s start off with one of these to see if we&amp;#8217;re on the right lines…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;image/color&amp;#34;&lt;/span&gt;
&lt;/span&gt;	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;golang.org/x/tour/pic&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; Image &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt;{}

&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;ColorModel&lt;/span&gt;() color.Model {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; color.RGBAModel
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;}
&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	m &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; Image{}
	pic.&lt;span style=&#34;color:#00f&#34;&gt;ShowImage&lt;/span&gt;(m)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This compiles (🙌) and fails (as we&amp;#8217;d expect) with something that may or may not be validating that we&amp;#8217;ve not screwed things up &lt;em&gt;yet&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;.&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;prog.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;: cannot use &lt;span style=&#34;color:#00f&#34;&gt;m&lt;/span&gt; (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; Image) as &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; image.Image in argument to pic.ShowImage:
	Image does not implement image.&lt;span style=&#34;color:#00f&#34;&gt;Image&lt;/span&gt; (missing At method)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s add in the other fixed value, &lt;code&gt;Bounds&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;
&lt;/span&gt;	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;image/color&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;golang.org/x/tour/pic&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; Image &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt;{}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;ColorModel&lt;/span&gt;() color.Model {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; color.RGBAModel
}

&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;Bounds&lt;/span&gt;() image.Rectangle {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; image.&lt;span style=&#34;color:#00f&#34;&gt;Rect&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;256&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;256&lt;/span&gt;)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;}
&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	m &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; Image{}
	pic.&lt;span style=&#34;color:#00f&#34;&gt;ShowImage&lt;/span&gt;(m)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now the final part - &lt;code&gt;At&lt;/code&gt;. Building it up bit by bit, we know what the function definition should look like, based on the above pattern and the &lt;a href=&#34;https://golang.org/pkg/image/#Image&#34;&gt;interface definition&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;At&lt;/span&gt;(x,y &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) color.Color {&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The value returned by this function is the colour (yes, I said colo_u_r! 🇬🇧) at the given coordinates. In the picture we created earlier this was using the expression x*y to describe the strength of the bluescale to plot. The &lt;code&gt;Color&lt;/code&gt; type for the &lt;code&gt;RGBAModel&lt;/code&gt; we&amp;#8217;re using is + &lt;a href=&#34;https://golang.org/pkg/image/color/#RGBA&#34;&gt;&lt;code&gt;RGBA&lt;/code&gt;&lt;/a&gt;, which returns RGB plus alpha, so let&amp;#8217;s try this here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;image/color&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;golang.org/x/tour/pic&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; Image &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt;{}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;ColorModel&lt;/span&gt;() color.Model {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; color.RGBAModel
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;Bounds&lt;/span&gt;() image.Rectangle {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; image.&lt;span style=&#34;color:#00f&#34;&gt;Rect&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;256&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;256&lt;/span&gt;)
}

&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;At&lt;/span&gt;(x,y &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) color.Color {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; r,g,b,a &lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt; = &lt;span style=&#34;color:#666&#34;&gt;25&lt;/span&gt; ,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;    b=&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(x)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(y)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; color.RGBA{r,g,b,a}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;}
&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	m &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; Image{}
	pic.&lt;span style=&#34;color:#00f&#34;&gt;ShowImage&lt;/span&gt;(m)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This not only compiles (🙌) but successfully runs (😅)…but doesn&amp;#8217;t display anything 😢 … or does it? 🤔&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the Go execution window the &lt;code&gt;Program exited&lt;/code&gt; is lower down the page:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/image01.png&#34; alt=&#34;image01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and if you right-click over the blank space you can see there&amp;#8217;s an image there, and inspecting this with developer tools shows it&amp;#8217;s a 256x256 &lt;strong&gt;transparent&lt;/strong&gt; image. That alpha thingy… setting it to zero means the image is transparent!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s try again and set the alpha level this time:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;image/color&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;golang.org/x/tour/pic&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; Image &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt;{}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;ColorModel&lt;/span&gt;() color.Model {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; color.RGBAModel
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;Bounds&lt;/span&gt;() image.Rectangle {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; image.&lt;span style=&#34;color:#00f&#34;&gt;Rect&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;256&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;256&lt;/span&gt;)
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;At&lt;/span&gt;(x,y &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) color.Color {
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; r,g,b,a &lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt; = &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; ,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
    b=&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(x)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(y)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	a=b
&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; color.RGBA{r,g,b,a}
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	m &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; Image{}
	pic.&lt;span style=&#34;color:#00f&#34;&gt;ShowImage&lt;/span&gt;(m)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;🎉 TADA! 🎉&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/image02.png&#34; alt=&#34;image02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can muck about with the other colour values too:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;At&lt;/span&gt;(x,y &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) color.Color {
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; r,g,b,a &lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt; = &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; ,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	b=&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(&lt;span style=&#34;color:#008000&#34;&gt;float64&lt;/span&gt;(y)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0.2&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(x)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	r=&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(&lt;span style=&#34;color:#008000&#34;&gt;float64&lt;/span&gt;(y)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0.5&lt;/span&gt;)
&lt;/span&gt;	a=b
	
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; color.RGBA{r,g,b,a}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/image03.png&#34; alt=&#34;image03&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;At&lt;/span&gt;(x,y &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) color.Color {
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; r,g,b,a &lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt; = &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; ,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	b=&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(&lt;span style=&#34;color:#008000&#34;&gt;float64&lt;/span&gt;(y)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4.25&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(x&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) 
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	r=&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(&lt;span style=&#34;color:#008000&#34;&gt;float64&lt;/span&gt;(y)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;)
&lt;/span&gt;	a=b
	
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; color.RGBA{r,g,b,a}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/image04.png&#34; alt=&#34;image04&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_more_episodes&#34;&gt;📺 More Episodes…&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;S01E00 - Background&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/&#34;&gt;S01E01 - Pointers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/&#34;&gt;S01E02 - Slices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e03-maps/&#34;&gt;S01E03 - Maps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e04-function-closures/&#34;&gt;S01E04 - Function Closures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/&#34;&gt;S01E05 - Interfaces&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/&#34;&gt;S01E06 - Errors&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e07-readers/&#34;&gt;S01E07 - Readers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;S01E08 - Images&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/&#34;&gt;S01E09 - Concurrency (Channels, Goroutines)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/03/learning-golang-some-rough-notes-s01e10-concurrency-web-crawler/&#34;&gt;S01E10 - Concurrency (Web Crawler)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E07 - Readers</title>
      <link>https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e07-readers/</link>
      <pubDate>2020-07-01</pubDate>
      
      <guid>https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e07-readers/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/methods/21&#34;&gt;A Tour of Go : Readers&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m not intending to pick holes in the Tour…but it&amp;#8217;s not helping itself ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For an introductory text, it makes a ton of assumptions about the user. Here it introduces Readers, and the explanation is good—but the example code looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	r &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;NewReader&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Hello, Reader!&amp;#34;&lt;/span&gt;)

	b &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;n = %v err = %v b = %v\n&amp;#34;&lt;/span&gt;, n, err, b)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;b[:n] = %q\n&amp;#34;&lt;/span&gt;, b[:n])
&lt;/span&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; io.EOF {
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;break&lt;/span&gt;
		}
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;n = &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; err = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt; b = [&lt;span style=&#34;color:#666&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;111&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;82&lt;/span&gt;]
b[:n] = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Hello, R&amp;#34;&lt;/span&gt;
n = &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; err = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt; b = [&lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;82&lt;/span&gt;]
b[:n] = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;eader!&amp;#34;&lt;/span&gt;
n = &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; err = EOF b = [&lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;82&lt;/span&gt;]
b[:n] = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Perhaps this alphabet-soup of symbols and characters is idiomatic, but for a learner text this would be a bit nicer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	r &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;NewReader&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Hello, Reader!&amp;#34;&lt;/span&gt;)

	b &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;--\nBytes populated = %v\tError = %v\tRaw bytes = %v\n&amp;#34;&lt;/span&gt;, n, err, b)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Bytes string representation = %q\n&amp;#34;&lt;/span&gt;, b[:n])
&lt;/span&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; io.EOF {
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;break&lt;/span&gt;
		}
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;111&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;82&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Hello, R&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;82&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;eader!&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;	Error = EOF	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;82&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This has two benefits:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34;&gt;
&lt;li&gt;
&lt;p&gt;illustrates the values being populated each time and their role&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;explains why &lt;code&gt;Printf&lt;/code&gt; of &lt;code&gt;b&lt;/code&gt; returns the raw bytes the first time (it uses the &lt;code&gt;%v&lt;/code&gt; &lt;a href=&#34;https://golang.org/pkg/fmt/&#34;&gt;formatting verb&lt;/a&gt; to show &lt;code&gt;the value in a default format&lt;/code&gt;), and recognisable characters the second time (it uses &lt;code&gt;%q&lt;/code&gt; to show &lt;code&gt;a double-quoted string safely escaped with Go syntax&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Side note: &lt;code&gt;b := make([]byte, 8)&lt;/code&gt; creates a slice of eight bytes, but this could be a larger or smaller amount; the source Reader will keep filling it until we&amp;#8217;ve processed it all, e.g.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bigger&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;b &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;21&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;113&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;103&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;117&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;113&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Lbh penpxrq gur pbqr!&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;	Error = EOF	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smaller&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;b &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;API server listening at: &lt;span style=&#34;color:#666&#34;&gt;127.0.0.1&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;21293&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Lbh &amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;112&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;penp&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;113&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;xrq &amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;103&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;117&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;gur &amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;113&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pbqr&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;	Error = EOF	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_exercise_readers&#34;&gt;Exercise: Readers&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/methods/22&#34;&gt;A Tour of Go : Exercise: Readers&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Implement a Reader type that emits an infinite stream of the ASCII character &#39;A&#39;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A bit of a head-scratcher this one, because the exercise didn&amp;#8217;t follow previous code examples that were the basis on which to write it. Took a bit of tinkering but here it is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r MyReader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt; (b []&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {
	b[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]=&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Set the first offset of the byte slice that&amp;#8217;s passed to us to the required &lt;code&gt;A&lt;/code&gt; value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return the length populated (1) and &lt;code&gt;nil&lt;/code&gt; which denotes that we&amp;#8217;re not at EOF and thus it acts as an infinite stream&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The exercise includes external code to validate, but we can also print the output - so long as we realise that it will never end! Here&amp;#8217;s a version where we deliberately return the wrong answer (repeating &lt;code&gt;AB&lt;/code&gt; instead of just &lt;code&gt;A&lt;/code&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;golang.org/x/tour/reader&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; MyReader &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt;{}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r MyReader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b []&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {
	b[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;
	b[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	r &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; MyReader{}

	b &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;--\nBytes populated = %v\tError = %v\tRaw bytes = %v\n&amp;#34;&lt;/span&gt;, n, err, b)
		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Bytes string representation = %q\n&amp;#34;&lt;/span&gt;, b[:n])
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; io.EOF {
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;break&lt;/span&gt;
		}
	}
	reader.&lt;span style=&#34;color:#00f&#34;&gt;Validate&lt;/span&gt;(MyReader{})
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;66&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AB&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;66&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AB&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;66&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AB&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;66&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AB&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
[&lt;span style=&#34;&#34;&gt;…………&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_exercise_rot13reader&#34;&gt;Exercise: rot13Reader&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/methods/23&#34;&gt;A Tour of Go : Exercise: rot13Reader&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ROT13&#34;&gt;ROT13&lt;/a&gt; is a blast back to the past of my early days on the internet 8-) You take each character and offset it by 13. Since there are 26 letters in the alphabet if you ROT13 and ROT13&amp;#8217;d phrase you end up with the original.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This part of the exercise is fine:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;modifying the stream by applying the rot13 substitution cipher to all alphabetical characters.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The pseudo-code I want to do is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For each character in the input&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add 13 to the ASCII value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If its &amp;gt; 26 then subtract 26&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But this bit had me a bit stuck&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Implement a rot13Reader that implements io.Reader and reads from an io.Reader&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the previous exercise I implemented a &lt;code&gt;Read&lt;/code&gt; method for the &lt;code&gt;MyReader&lt;/code&gt; type&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r MyReader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b []&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So let&amp;#8217;s try that same pattern again (TBH I&amp;#8217;m flailing a bit here with my functions, methods, and implementations):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r rot13Reader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;[]) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;&#34;&gt;#&lt;/span&gt; rot13
.&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;rot13.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;: missing function body
.&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;rot13.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;33&lt;/span&gt;: syntax &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;: unexpected [, expecting comma or )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Hmmm odd. Simple typo at fault (which is why copy &amp;amp; paste wins out over trying to memorise this stuff 😉) - &lt;code&gt;s/byte[]/[]byte&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r rot13Reader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b []&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So here&amp;#8217;s the first working cut - it doesn&amp;#8217;t actually do anything about the ROT13 yet but it builds on the more verbose &lt;code&gt;Printf&lt;/code&gt; that I show above to show a Reader reading a Reader:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; rot13Reader &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	r io.Reader
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r rot13Reader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b []&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		
&lt;/span&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; io.EOF {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; n,io.EOF
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; n,&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		}
&lt;/span&gt;	}
	
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	s &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;NewReader&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Lbh penpxrq gur pbqr!&amp;#34;&lt;/span&gt;)
	r &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; rot13Reader{s}
	io.&lt;span style=&#34;color:#00f&#34;&gt;Copy&lt;/span&gt;(os.Stdout, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;r)
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Line 16: invoke the &lt;code&gt;Read&lt;/code&gt; function of the &lt;code&gt;io.Reader&lt;/code&gt;, reading directly into the variable &lt;code&gt;b&lt;/code&gt; that was passed to us.&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Note that &lt;code&gt;rot13Reader&lt;/code&gt; is a &lt;code&gt;struct&lt;/code&gt;, and so we invoke &lt;code&gt;r.r.Read&lt;/code&gt;. If we invoke &lt;code&gt;r.Read&lt;/code&gt; then we are just calling outself (r here being the &lt;code&gt;rot13Reader&lt;/code&gt;, for which this function &lt;strong&gt;is&lt;/strong&gt; the Reader!)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 18-19: If the source Reader has told us we reached the end then return the same - number of bytes populated, and an EOF error&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 21: If there&amp;#8217;s more data to read then just return the number of bytes populated and &lt;code&gt;nil&lt;/code&gt; error so that the caller will continue to Read from us until all the data&amp;#8217;s been processed&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The output of this is to &lt;code&gt;stdout&lt;/code&gt; using &lt;a href=&#34;https://golang.org/pkg/io/#Copy&#34;&gt;io.Copy&lt;/a&gt; which takes a Reader as its source, hence the output at this stage is the unmodified string:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;Lbh penpxrq gur pbqr!&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now let&amp;#8217;s do the ROT13 bit. We want to take each byte we read and transform it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If it&amp;#8217;s an ASCII A-Za-z character add 13 to it. If it&amp;#8217;s &amp;gt;26 then subtract 26 to wrap around the value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ASCII#Printable_characters&#34;&gt;ASCII values&lt;/a&gt; are 65-90 (A-Z) and 97-122 (a-z).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s the first cut of the code. It loops over each of the values in the returned slice from the Reader and applies the above logic to them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r rot13Reader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b []&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; b {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; b[i]
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;				fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\nSource byte %v\tascii: %q&amp;#34;&lt;/span&gt;, a, a)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;				&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// * https://en.wikipedia.org/wiki/ASCII#Printable_characters[ASCII values] are 65-90 (A-Z) and 97-122 (a-z).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;90&lt;/span&gt;) {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;					a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;					&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#666&#34;&gt;90&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;						a = a &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;					}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;					fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\tTRANSFORMED Upper case : Source byte %v\tascii: %q&amp;#34;&lt;/span&gt;, a, a)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;				} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;97&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;122&lt;/span&gt;) {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;					a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;					&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#666&#34;&gt;122&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;						a = a &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;					}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;					fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\tTRANSFORMED Lower case : Source byte %v\tascii: %q&amp;#34;&lt;/span&gt;, a, a)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;				}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			b[i] = a
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		}
&lt;/span&gt;
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; io.EOF {
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; n, io.EOF
		}
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; n, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;
	}

}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Applying this to a test string:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;NewReader&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Why did the chicken cross the road? Gb trg gb gur bgure fvqr! / Jul qvq gur puvpxra pebff gur ebnq? To get to the other side!&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;works correctly:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;87&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;	TRANSFORMED Upper &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;74&lt;/span&gt;		ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;J&amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;104&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;	TRANSFORMED Lower &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;117&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;121&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;	TRANSFORMED Lower &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;108&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;	TRANSFORMED Lower &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;113&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;105&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;	TRANSFORMED Lower &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;118&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;	TRANSFORMED Lower &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;113&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;116&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;	TRANSFORMED Lower &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;103&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;104&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;	TRANSFORMED Lower &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;117&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;	TRANSFORMED Lower &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And so the source&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;Why did the chicken cross the road&lt;span style=&#34;&#34;&gt;?&lt;/span&gt; Gb trg gb gur bgure fvqr! &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; Jul qvq gur puvpxra pebff gur ebnq&lt;span style=&#34;&#34;&gt;?&lt;/span&gt; To get to the other side!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;is correctly translated into:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;Jul qvq gur puvpxra pebff gur ebnq&lt;span style=&#34;&#34;&gt;?&lt;/span&gt; To get to the other side! &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; Why did the chicken cross the road&lt;span style=&#34;&#34;&gt;?&lt;/span&gt; Gb trg gb gur bgure fvqr!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now let&amp;#8217;s see if we can tidy this up a little bit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Instead of iterating over the entire slice (&lt;code&gt;range b&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; b {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; b[i]
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; {&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We actually know how many bytes to process because this is returned by the Reader. This means we can also remove the check on a zero byte (which was spamming my debug output hence the check for it)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; b[i]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let&amp;#8217;s encapsulate the transformation out into its own function&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r rot13Reader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b []&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			b[i] = &lt;span style=&#34;color:#00f&#34;&gt;rot13&lt;/span&gt;(b[i])
&lt;/span&gt;		}

		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; io.EOF {
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; n, io.EOF
		}
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; n, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;
	}

}

&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;rot13&lt;/span&gt;(a &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// https://en.wikipedia.org/wiki/ASCII#Printable_characters
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// ASCII values are 65-90 (A-Z) and 97-122 (a-z)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;90&lt;/span&gt;) {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#666&#34;&gt;90&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			a = a &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;97&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;122&lt;/span&gt;) {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#666&#34;&gt;122&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			a = a &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So the final version (and I&amp;#8217;d be interested to know if it can be optimised further) looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; rot13Reader &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	r io.Reader
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r rot13Reader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b []&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
			b[i] = &lt;span style=&#34;color:#00f&#34;&gt;rot13&lt;/span&gt;(b[i])
		}

		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; io.EOF {
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; n, io.EOF
		}
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; n, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;
	}

}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;rot13&lt;/span&gt;(a &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; {
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// https://en.wikipedia.org/wiki/ASCII#Printable_characters
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// ASCII values are 65-90 (A-Z) and 97-122 (a-z)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;90&lt;/span&gt;) {
		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#666&#34;&gt;90&lt;/span&gt; {
			a = a &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt;
		}
	} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;97&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;122&lt;/span&gt;) {
		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#666&#34;&gt;122&lt;/span&gt; {
			a = a &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	s &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;NewReader&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Lbh penpxrq gur pbqr!&amp;#34;&lt;/span&gt;)
	r &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; rot13Reader{s}
	io.&lt;span style=&#34;color:#00f&#34;&gt;Copy&lt;/span&gt;(os.Stdout, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;r)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and …&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;You cracked the code!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_more_episodes&#34;&gt;📺 More Episodes…&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;S01E00 - Background&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/&#34;&gt;S01E01 - Pointers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/&#34;&gt;S01E02 - Slices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e03-maps/&#34;&gt;S01E03 - Maps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e04-function-closures/&#34;&gt;S01E04 - Function Closures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/&#34;&gt;S01E05 - Interfaces&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/&#34;&gt;S01E06 - Errors&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;S01E07 - Readers&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e08-images/&#34;&gt;S01E08 - Images&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/&#34;&gt;S01E09 - Concurrency (Channels, Goroutines)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/03/learning-golang-some-rough-notes-s01e10-concurrency-web-crawler/&#34;&gt;S01E10 - Concurrency (Web Crawler)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E06 - Errors</title>
      <link>https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/</link>
      <pubDate>2020-07-01</pubDate>
      
      <guid>https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/methods/20&#34;&gt;A Tour of Go : Exercise: Errors&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Like Interfaces, the Tour didn&amp;#8217;t really do it for me on Errors either. Too absract, and not enough explanation of the code examples for my liking. It also doesn&amp;#8217;t cover the &lt;a href=&#34;https://golang.org/pkg/errors/&#34;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; package which other tutorial do. I&amp;#8217;m not clear if that&amp;#8217;s because the errors package isn&amp;#8217;t used much, or the Tour focusses only on teaching the raw basics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m quickly learning to head to &lt;code&gt;gobyexample.com&lt;/code&gt; each time for more reference on things that aren&amp;#8217;t making sense (along with &lt;a href=&#34;https://www.calhoun.io/&#34; class=&#34;bare&#34;&gt;https://www.calhoun.io/&lt;/a&gt; too). The &lt;a href=&#34;https://gobyexample.com/errors&#34;&gt;errors&lt;/a&gt; page on GoByExample is a good one, and I like how it links through to the Go Playground with each example. The Go Blog&amp;#8217;s &lt;a href=&#34;https://blog.golang.org/error-handling-and-go&#34;&gt;Error handling and Go&lt;/a&gt; is also a good reference, and &lt;a href=&#34;https://blog.golang.org/go1.13-errors&#34;&gt;this blog&lt;/a&gt; has some recent updates for Go 1.13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Once I&amp;#8217;d gone through the additional links the errors exercise was OK to figure out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; ErrNegativeSqrt &lt;span style=&#34;color:#b00040&#34;&gt;float64&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (e ErrNegativeSqrt) &lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cannot Sqrt negative number: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;float64&lt;/span&gt;(e))
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Sqrt&lt;/span&gt;(x &lt;span style=&#34;color:#b00040&#34;&gt;float64&lt;/span&gt;) (&lt;span style=&#34;color:#b00040&#34;&gt;float64&lt;/span&gt;, &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\n--\nSqrt called with value: %v\n&amp;#34;&lt;/span&gt;, x)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; x &amp;lt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; {
		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\t%v is less than zero. Returning with error.\n&amp;#34;&lt;/span&gt;, x)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;ErrNegativeSqrt&lt;/span&gt;(x)
	}
	guess &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1.0&lt;/span&gt;
	limit &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &amp;lt; limit; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
		adj &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; (guess&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;guess &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x) &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; guess)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; result &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; guess &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; guess; result &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; x {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\t✅Guess %d is correct:\t%g\n&amp;#34;&lt;/span&gt;, i, guess)
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; guess, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;
		} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; result &amp;gt; x {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\t🔺Guess %d is too high:\t%g\n&amp;#34;&lt;/span&gt;, i, guess)
			guess &lt;span style=&#34;color:#666&#34;&gt;-=&lt;/span&gt; adj
		} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\t🔻Guess %d is too low:\t%g\n&amp;#34;&lt;/span&gt;, i, guess)
			guess &lt;span style=&#34;color:#666&#34;&gt;-=&lt;/span&gt; adj
		}
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; guess, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;

}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; []&lt;span style=&#34;color:#b00040&#34;&gt;float64&lt;/span&gt;{&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;} {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; result, ok &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Sqrt&lt;/span&gt;(x); ok &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;-&amp;gt; result: %v\n&amp;#34;&lt;/span&gt;, result)
		} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;** ERROR %v&amp;#34;&lt;/span&gt;,ok.&lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;())
		}
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Sqrt called with value: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; is less than zero. Returning with &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;.
&lt;span style=&#34;color:#666&#34;&gt;**&lt;/span&gt; ERROR cannot Sqrt negative number: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Sqrt called with value: &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔻&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; is too low:	&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔺&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; is too high:	&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔺&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; is too high:	&lt;span style=&#34;color:#666&#34;&gt;3.4&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔺&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; is too high:	&lt;span style=&#34;color:#666&#34;&gt;3.023529411764706&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔺&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; is too high:	&lt;span style=&#34;color:#666&#34;&gt;3.00009155413138&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔺&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; is too high:	&lt;span style=&#34;color:#666&#34;&gt;3.000000001396984&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;✅&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; is correct:	&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&amp;gt; result: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Try it out: &lt;a href=&#34;https://play.golang.org/p/mLa5RqwYckb&#34; class=&#34;bare&#34;&gt;https://play.golang.org/p/mLa5RqwYckb&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This bit had me puzzled:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Note: A call to fmt.Sprint(e) inside the Error method will send the program into an infinite loop. You can avoid this by converting e first: fmt.Sprint(float64(e)). Why?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If I changed it to&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (e ErrNegativeSqrt) &lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cannot Sqrt negative number: %v&amp;#34;&lt;/span&gt;,e)
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;then running it in the Tour window failed (as expected)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Sqrt called with value: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; is less than zero. Returning with &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;.

Program exited: status &lt;span style=&#34;color:#666&#34;&gt;2.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Running it in VSCode gave another error:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;runtime: goroutine stack exceeds &lt;span style=&#34;color:#666&#34;&gt;1000000000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; limit
fatal &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;: stack overflow&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and sticking a print debug into the function shows that it&amp;#8217;s recursively called:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (e ErrNegativeSqrt) &lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ErrNegativeSqrt.Error&amp;#34;&lt;/span&gt;)
&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cannot Sqrt negative number: %v&amp;#34;&lt;/span&gt;,e)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Sqrt called with value: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; is less than zero. Returning with &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;.
ErrNegativeSqrt.Error
ErrNegativeSqrt.Error
ErrNegativeSqrt.Error
ErrNegativeSqrt.Error
ErrNegativeSqrt.Error
ErrNegativeSqrt.Error
[&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But… I don&amp;#8217;t understand why. StackOverflow turns up &lt;a href=&#34;https://stackoverflow.com/questions/27474907/why-would-a-call-to-fmt-sprinte-inside-the-error-method-result-in-an-infinit&#34;&gt;this explanation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;fmt.Sprint(e)&lt;code&gt; will call `e.Error()&lt;/code&gt; to convert the value e to a string. If the &lt;code&gt;Error()&lt;/code&gt; method calls `fmt.Sprint(e&lt;/code&gt;),` then the program recurses until out of memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can break the recursion by converting the e to a value without a String or Error method.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Thus &lt;code&gt;e&lt;/code&gt; is converted to &lt;code&gt;float64&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (e ErrNegativeSqrt) &lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cannot Sqrt negative number: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;float64&lt;/span&gt;(e))
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/27474907/why-would-a-call-to-fmt-sprinte-inside-the-error-method-result-in-an-infinit#comment86089457_27475316&#34;&gt;This comment&lt;/a&gt; offers a neat alternative too:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Isn&amp;#8217;t it enough to convert e to a type which may have a String/Error method that doesn&amp;#8217;t recurse infinitely?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And hence specifying a different &lt;a href=&#34;https://golang.org/pkg/fmt/&#34;&gt;verb&lt;/a&gt; works:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (e ErrNegativeSqrt) &lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cannot Sqrt negative number: %f&amp;#34;&lt;/span&gt;,e)
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Sqrt called with value: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; is less than zero. Returning with &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;.
&lt;span style=&#34;color:#666&#34;&gt;**&lt;/span&gt; ERROR cannot Sqrt negative number: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9.000000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_more_episodes&#34;&gt;📺 More Episodes…&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;S01E00 - Background&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/&#34;&gt;S01E01 - Pointers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/&#34;&gt;S01E02 - Slices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e03-maps/&#34;&gt;S01E03 - Maps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e04-function-closures/&#34;&gt;S01E04 - Function Closures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/&#34;&gt;S01E05 - Interfaces&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;S01E06 - Errors&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e07-readers/&#34;&gt;S01E07 - Readers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e08-images/&#34;&gt;S01E08 - Images&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/&#34;&gt;S01E09 - Concurrency (Channels, Goroutines)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/03/learning-golang-some-rough-notes-s01e10-concurrency-web-crawler/&#34;&gt;S01E10 - Concurrency (Web Crawler)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E05 - Interfaces</title>
      <link>https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/</link>
      <pubDate>2020-06-30</pubDate>
      
      <guid>https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/methods/9&#34;&gt;A Tour of Go : Interfaces&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This page really threw me, for several reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The text notes that there&amp;#8217;s an error (&lt;em&gt;so why don&amp;#8217;t they fix it?&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The provided code doesn&amp;#8217;t run (presumably because of the above error)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s not clear if this is a deliberate error to illustrate a point, or just a snafu&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;Learning Go : Background&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In addition, there&amp;#8217;s no indication as to the purpose of the code, so it&amp;#8217;s really hard to follow what it&amp;#8217;s supposed to be illustrating. Is the &lt;code&gt;type&lt;/code&gt; interface declaration at the top deliberately before &lt;code&gt;main&lt;/code&gt; and all the subsequent &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;func&lt;/code&gt; declarations? What&amp;#8217;s the significance of this? Is there a significance of this?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A general confusion I&amp;#8217;ve had with many of the Tour tutorials is the use of maths functions to illustrate concepts. I mean, I probably &lt;strong&gt;should&lt;/strong&gt; know what this …&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (v &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;Vertex) &lt;span style=&#34;color:#00f&#34;&gt;Abs&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;float64&lt;/span&gt; {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; math.&lt;span style=&#34;color:#00f&#34;&gt;Sqrt&lt;/span&gt;(v.X&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;v.X &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; v.Y&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;v.Y)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;…should return, but it&amp;#8217;s an added mental overhead to grokking what&amp;#8217;s going on. Sometimes stuff has to be done with numbers but a lot of the illustrations around methods &amp;amp; functions could easily have been done with strings IMHO.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To get some kind of understanding of interfaces I found &lt;a href=&#34;https://www.calhoun.io/how-do-interfaces-work-in-go/&#34; class=&#34;bare&#34;&gt;https://www.calhoun.io/how-do-interfaces-work-in-go/&lt;/a&gt; and &lt;a href=&#34;https://gobyexample.com/interfaces&#34; class=&#34;bare&#34;&gt;https://gobyexample.com/interfaces&lt;/a&gt; very good, and the latter links to &lt;a href=&#34;https://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go&#34; class=&#34;bare&#34;&gt;https://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go&lt;/a&gt; which is also very useful and goes into a ton more detail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Golang Tour tutorials have been really clear up until this point, so I&amp;#8217;m hoping that this was just an aberration :)&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_exercise_stringers&#34;&gt;Exercise: Stringers&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉https://tour.golang.org/methods/18[A Tour of Go: Exercise: Stringers]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I quite enjoyed this one, even though I still had to Google for some help. I got that I needed a function to implement the &lt;code&gt;String()&lt;/code&gt; method for &lt;code&gt;IPAddr&lt;/code&gt; (which is there in the help text too but I didn&amp;#8217;t notice, which goes to show I should spend longer reading the questions)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {

}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Within this I needed to take the four parts of the IP address and concatenate them with a &lt;code&gt;.&lt;/code&gt; separator. Feeling rather proud of myself I came up with this which nicely handled each part of the IP address:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; v
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	}
&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;but failed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;.&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;prog.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;: invalid operation: a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;v&lt;/span&gt; (mismatched types &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; and &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So let&amp;#8217;s try casting the type:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
&lt;/span&gt;	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This executed successfully, but didn&amp;#8217;t work:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;loopback: &lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So let&amp;#8217;s add some debug:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Value: %v %v\n&amp;#34;&lt;/span&gt;, v, &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v))
&lt;/span&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This gives:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;Value: 
Value: &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
Value: &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
Value: &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
loopback: &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So the value is showing as empty, which is odd, because we know it&amp;#8217;s there. Let&amp;#8217;s try more debug:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value: %v \tstring(value): %v\n&amp;#34;&lt;/span&gt;, v,  &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v))
&lt;/span&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): 
value: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;OK, so the value we&amp;#8217;re getting isn&amp;#8217;t the IP address pieces… because we made a mistake in the &lt;code&gt;for&lt;/code&gt; statement and we&amp;#8217;re getting the &lt;em&gt;index&lt;/em&gt;, not the &lt;em&gt;value&lt;/em&gt;. We&amp;#8217;re also getting a blank for the string, but we&amp;#8217;ll worry about that in a moment. Let&amp;#8217;s fix the &lt;code&gt;for&lt;/code&gt; statement first. Using the underscore we can ignore the index and store the actual value in &lt;code&gt;v&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;/span&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value: %v \tstring(value): %v\n&amp;#34;&lt;/span&gt;, v,  &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v))
		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;value: &lt;span style=&#34;color:#666&#34;&gt;127&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): 
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): 
value: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): &lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We&amp;#8217;re getting somewhere.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What about this pesky blank string though when we try to cast the integer to a string? Courtesy of &lt;a href=&#34;https://www.calhoun.io/6-tips-for-using-strings-in-go/&#34;&gt;6 Tips for Using Strings in Go&lt;/a&gt; and specifically the &lt;em&gt;Convert ints (or any data type) into strings&lt;/em&gt; section I realised that &lt;code&gt;string()&lt;/code&gt; wasn&amp;#8217;t the way to do it. What &lt;code&gt;string()&lt;/code&gt; is doing is returning the ASCII character of the given value. Check out the output if I bump up the value in the &lt;code&gt;string&lt;/code&gt; value in the &lt;code&gt;Printf&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value: %v \tstring(value+64): %v\n&amp;#34;&lt;/span&gt;, v,  &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;))
&lt;/span&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;value: &lt;span style=&#34;color:#666&#34;&gt;127&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;): &lt;span style=&#34;&#34;&gt;¿&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;): &lt;span style=&#34;&#34;&gt;@&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;): &lt;span style=&#34;&#34;&gt;@&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;): A&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Maybe this was mentioned in the Tour and I missed it, but in doing the type conversion I&amp;#8217;d referred back to &lt;a href=&#34;https://tour.golang.org/basics/13&#34;&gt;Type conversions&lt;/a&gt; and it&amp;#8217;s not covered there.
So instead of &lt;code&gt;string()&lt;/code&gt; we can use &lt;a href=&#34;https://golang.org/pkg/strconv/&#34;&gt;strconv&lt;/a&gt; or &lt;a href=&#34;https://golang.org/pkg/fmt/#Sprintf&#34;&gt;&lt;code&gt;Sprintf&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value: %v \tfmt.Sprintf(value): %v\n&amp;#34;&lt;/span&gt;, v, fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,v))
&lt;/span&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;value: &lt;span style=&#34;color:#666&#34;&gt;127&lt;/span&gt; 	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(value): &lt;span style=&#34;color:#666&#34;&gt;127&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(value): &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(value): &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; 	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(value): &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we&amp;#8217;re getting somewhere! Let&amp;#8217;s use this &lt;code&gt;Sprintf&lt;/code&gt; in building the &lt;code&gt;a&lt;/code&gt; variable too, and add in a &lt;code&gt;.&lt;/code&gt; in the format string:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%d.&amp;#34;&lt;/span&gt;,v)
&lt;/span&gt;	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;loopback: &lt;span style=&#34;color:#666&#34;&gt;127.0.0.1&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Look at that! We&amp;#8217;re nearly there. Just the trailing &lt;code&gt;.&lt;/code&gt; to get rid of now, which a perusal of the &lt;a href=&#34;https://golang.org/pkg/strings/&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt; package turns up a function &lt;a href=&#34;https://golang.org/pkg/strings/#TrimRight&#34;&gt;&lt;code&gt;TrimRight&lt;/code&gt;&lt;/a&gt; that should do the trick:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%d.&amp;#34;&lt;/span&gt;,v)
&lt;/span&gt;	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;TrimRight&lt;/span&gt;(a,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So the final code looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; IPAddr [&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%d.&amp;#34;&lt;/span&gt;,v)
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;TrimRight&lt;/span&gt;(a,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)
}


&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	hosts &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]IPAddr{
		&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;loopback&amp;#34;&lt;/span&gt;:  {&lt;span style=&#34;color:#666&#34;&gt;127&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;},
		&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;googleDNS&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;},
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; name, ip &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; hosts {
		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%v: %v\n&amp;#34;&lt;/span&gt;, name, ip)
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And the output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;loopback: &lt;span style=&#34;color:#666&#34;&gt;127.0.0.1&lt;/span&gt;
googleDNS: &lt;span style=&#34;color:#666&#34;&gt;8.8.8.8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;😃&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_more_episodes&#34;&gt;📺 More Episodes…&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;S01E00 - Background&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/&#34;&gt;S01E01 - Pointers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/&#34;&gt;S01E02 - Slices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e03-maps/&#34;&gt;S01E03 - Maps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e04-function-closures/&#34;&gt;S01E04 - Function Closures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;S01E05 - Interfaces&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/&#34;&gt;S01E06 - Errors&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e07-readers/&#34;&gt;S01E07 - Readers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e08-images/&#34;&gt;S01E08 - Images&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/&#34;&gt;S01E09 - Concurrency (Channels, Goroutines)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/03/learning-golang-some-rough-notes-s01e10-concurrency-web-crawler/&#34;&gt;S01E10 - Concurrency (Web Crawler)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>