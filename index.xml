<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rmoff&#39;s random ramblings</title>
    <link>https://rmoff.net/</link>
    <description>Recent content on rmoff&#39;s random ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>2020-09-23</lastBuildDate>
    
        <atom:link href="https://rmoff.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>🎁 A collection of Kafka-related talks 💝</title>
      <link>https://rmoff.net/2020/09/23/a-collection-of-kafka-related-talks/</link>
      <pubDate>2020-09-23</pubDate>
      
      <guid>https://rmoff.net/2020/09/23/a-collection-of-kafka-related-talks/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/09/IMG_6838.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here’s a collection of Kafka-related talks, &lt;em&gt;just for you.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each one has 🍿🎥 a recording, 📔 slides, and 👾 code to go and try out. &lt;/p&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lets_get_started_with_the_foundations_what_is_apache_kafka&#34;&gt;Let’s get started with the foundations - what &lt;em&gt;is&lt;/em&gt; Apache Kafka? &lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://rmoff.dev/kafka101&#34;&gt;Kafka as a Platform: the Ecosystem from the Ground Up&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;another introductory talk, going into some of the detail of ksqlDB&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;➡️ &lt;a href=&#34;https://rmoff.dev/ljc-kafka-03&#34;&gt;Introduction to ksqlDB&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_theory_and_foundations_are_useful_but_what_about_seeing_the_concepts_do_something&#34;&gt;Theory and foundations are useful, but what about seeing the concepts do something…&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;▶️ &lt;a href=&#34;http://rmoff.dev/bigdataldn2020&#34;&gt;Apache Kafka and ksqlDB in Action: Let’s Build a Streaming Data Pipeline!&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_real_life_examples&#34;&gt;Real-life examples&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here’s a nice example using real data to solve a real problem - is my train late now? What are the routes most likely to be delayed? &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;🚂 &lt;a href=&#34;https://rmoff.dev/oredev19-on-track-with-kafka&#34;&gt;On Track with Apache Kafka: Building a Streaming Platform solution with Rail Data&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Moving from 🚆to 🚗, let’s take another real data feed and build some realtime location-based notifications 📟&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;🤖 &lt;a href=&#34;https://rmoff.dev/carpark-telegram-bot&#34;&gt;Building a Telegram bot with Go, Apache Kafka, and ksqlDB&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_integration_and_data_pipelines&#34;&gt;Integration and data pipelines&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Integration between Kafka and other systems? Kafka Connect has you covered ⚡&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;⏱️ &lt;a href=&#34;https://rmoff.dev/what-is-kafka-connect&#34;&gt;Kafka Connect in 60 seconds&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;🦸‍ &lt;a href=&#34;https://rmoff.dev/ljc-kafka-02&#34;&gt;From Zero to Hero with Kafka Connect&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;🧞 &lt;a href=&#34;https://talks.rmoff.net/gnw8Mf/no-more-silos-integrating-databases-and-apache-kafka&#34;&gt;No More Silos: How to Integrate Your Databases with Apache Kafka and CDC&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The question that always comes up when we talk about integration - how to get data from Oracle into Apache Kafka?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;ℹ️ &lt;a href=&#34;https://rmoff.dev/oracle-and-kafka&#34;&gt;Integrating Oracle and Kafka&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_architecture&#34;&gt;Architecture&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A change of pace from the hands-on, and instead some architectural consideration and thoughts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;🏛 &lt;a href=&#34;https://rmoff.dev/oredev19-changing-face-of-etl&#34;&gt;The Changing Face of ETL: Event-Driven Architectures for Data Engineers&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_for_more_great_apache_kafka_and_confluent_platform_content_subscribe_to_these_youtube_channels&#34;&gt;For more great Apache Kafka and Confluent Platform content subscribe to these Youtube channels 👍&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;🎥 &lt;a href=&#34;https://youtube.com/rmoff&#34;&gt;Robin Moffatt&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;🎥 &lt;a href=&#34;https://www.youtube.com/ViktorGamov&#34;&gt;Viktor Gamov&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;🎥 &lt;a href=&#34;https://www.youtube.com/confluent&#34;&gt;Confluent&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Using the Debezium MS SQL connector with ksqlDB embedded Kafka Connect</title>
      <link>https://rmoff.net/2020/09/18/using-the-debezium-ms-sql-connector-with-ksqldb-embedded-kafka-connect/</link>
      <pubDate>2020-09-18</pubDate>
      
      <guid>https://rmoff.net/2020/09/18/using-the-debezium-ms-sql-connector-with-ksqldb-embedded-kafka-connect/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/09/IMG_6723.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Prompted by &lt;a href=&#34;https://stackoverflow.com/questions/63946368/how-to-use-the-debezium-sql-server-connector-with-ksqldb-embedded-connect&#34;&gt;a question on StackOverflow&lt;/a&gt; I thought I’d take a quick look at setting up &lt;a href=&#34;https://ksqldb.io&#34;&gt;ksqlDB&lt;/a&gt; to ingest CDC events from Microsoft SQL Server using &lt;a href=&#34;https://debezium.io/&#34;&gt;Debezium&lt;/a&gt;. Some of this is based on my previous article, &lt;a href=&#34;https://rmoff.net/2019/11/20/streaming-data-from-sql-server-to-kafka-to-snowflake-with-kafka-connect/&#34;&gt;Streaming data from SQL Server to Kafka to Snowflake ❄️ with Kafka Connect&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_setting_up_the_docker_compose&#34;&gt;Setting up the Docker Compose&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I like standalone, repeatable, demo code. For that reason I love using Docker Compose and I embed everything in there - connector installation, the kitchen sink - the works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can find the complete &lt;a href=&#34;https://github.com/confluentinc/demo-scene/blob/master/mssql-to-kafka-with-ksqldb/docker-compose.yml&#34;&gt;Docker Compose file on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_installing_connectors_in_ksqldb_without_confluent_hub_client&#34;&gt;Installing connectors in ksqlDB without Confluent Hub client&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I’ll usually take advantage of the &lt;code&gt;command:&lt;/code&gt; stanza in a Docker Compose service to do things like connector installation, &lt;a href=&#34;https://rmoff.net/2018/12/15/docker-tips-and-tricks-with-ksql-and-kafka/&#34;&gt;as detailed here&lt;/a&gt;. In ksqlDB 0.11 the Confluent Hub client is absent so I’ve had to take a slightly hackier route. If you head over to &lt;a href=&#34;https://hub.confluent.io&#34;&gt;Confluent Hub&lt;/a&gt; and download the connector you want (in this case Debezium MS SQL) you can check the network console to get the direct URL, in this case&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;https://d1i4a15mxbxib1.cloudfront.net/api/plugins/debezium/debezium-connector-sqlserver/versions/1.2.2/debezium-debezium-connector-sqlserver-1.2.2.zip&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now, this URL is liable to change but for now, it works :) (I realise that this runs contrary to making a demo repeatable, but what’s life if we can’t live on the edge a bit)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With this code we can download and install the connector within the ksqlDB Docker container when it spins up&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;curl https://d1i4a15mxbxib1.cloudfront.net/api/plugins/debezium/debezium-connector-sqlserver/versions/1.2.2/debezium-debezium-connector-sqlserver-1.2.2.zip &lt;span style=&#34;color: #000080&#34;&gt;-o&lt;/span&gt; /tmp/kafka-connect-mssql.zip
yum &lt;span style=&#34;color: #0086B3&#34;&gt;install&lt;/span&gt; &lt;span style=&#34;color: #000080&#34;&gt;-y&lt;/span&gt; unzip
unzip /tmp/kafka-connect-mssql.zip &lt;span style=&#34;color: #000080&#34;&gt;-d&lt;/span&gt; /usr/share/java/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There’s a wrinkle in the plan here which is that the latest version of the container runs as a non-root user, and &lt;code&gt;sudo&lt;/code&gt; is not installed (&lt;a href=&#34;https://xkcd.com/149/&#34;&gt;no sandwiches for me&lt;/a&gt;). To hack around this we elevate the container to run as root user in the Docker Compose spec:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;yaml&#34;&gt;  &lt;span style=&#34;color: #008080&#34;&gt;ksqldb&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #008080&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;confluentinc/ksqldb-server:0.11.0&lt;/span&gt;
    &lt;span style=&#34;color: #008080&#34;&gt;container_name&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;ksqldb&lt;/span&gt;
    &lt;span style=&#34;color: #008080&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;root&lt;/span&gt;
    &lt;span style=&#34;color: #d14&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now when the container launches it downloads the connector, installs &lt;code&gt;unzip&lt;/code&gt; and unzips the connector archive directly into the &lt;code&gt;plugin.path&lt;/code&gt; in which Kafka Connect (running embedded in ksqlDB) will look for it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
The &amp;#39;proper&amp;#39; way to do this is either bake your own ksqlDB image with the connector plugin already installed, or to download the connector to the host machine, and mount it into the ksqlDB container. Both of these are fine, but involve more moving parts and stuff to go wrong than a standalone Docker Compose file for my purposes :)
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_running_the_stack&#34;&gt;Running the stack&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Spin up the &lt;a href=&#34;https://github.com/confluentinc/demo-scene/blob/master/mssql-to-kafka-with-ksqldb/docker-compose.yml&#34;&gt;Docker Compose file&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;docker-compose up &lt;span style=&#34;color: #000080&#34;&gt;-d&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and then launch ksqlDB - this seemingly complex snippet simply waits for ksqlDB to be available before launching the CLI:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;docker &lt;span style=&#34;color: #0086B3&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color: #000080&#34;&gt;-it&lt;/span&gt; ksqldb bash &lt;span style=&#34;color: #000080&#34;&gt;-c&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;echo -e &amp;#34;\n\n  Waiting for ksqlDB to be available before launching CLI\n&amp;#34;; while : ; do curl_status=$(curl -s -o /dev/null -w %{http_code} http://ksqldb:8088/info) ; echo -e $(date) &amp;#34; ksqlDB server listener HTTP state: &amp;#34; $curl_status &amp;#34; (waiting for 200)&amp;#34; ; if [ $curl_status -eq 200 ] ; then  break ; fi ; sleep 5 ; done ; ksql http://ksqldb:8088&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In a separate terminal, once ksqlDB has finished starting (i.e. once the ksqlDB CLI starts from the above command) make sure that the MS SQL connector has installed correctly:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;docker &lt;span style=&#34;color: #0086B3&#34;&gt;exec &lt;/span&gt;ksqldb curl &lt;span style=&#34;color: #000080&#34;&gt;-s&lt;/span&gt; localhost:8083/connector-plugins&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should see&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;io.debezium.connector.sqlserver.SqlServerConnector&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;1.2.2.Final&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_configuring_ms_sql_for_cdc&#34;&gt;Configuring MS SQL for CDC&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When the MS SQL container starts a couple of scripts are run to set up the database for CDC and add some test data. If you’re not using the Docker Compose then you need to run these yourself:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;USE&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;master&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;GO&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;DATABASE&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;demo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;GO&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;USE&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;demo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;EXEC&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;sp_cdc_enable_db&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;GO&lt;/span&gt;

&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;-- Run this to confirm that CDC is now enabled:&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;is_cdc_enabled&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;databases&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;demo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;];&lt;/span&gt;

&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;demo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dbo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDERS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;order_id&lt;/span&gt; &lt;span style=&#34;color: #0086B3&#34;&gt;INT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;customer_id&lt;/span&gt; &lt;span style=&#34;color: #0086B3&#34;&gt;INT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;order_ts&lt;/span&gt; &lt;span style=&#34;color: #0086B3&#34;&gt;DATE&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;order_total_usd&lt;/span&gt; &lt;span style=&#34;color: #0086B3&#34;&gt;DECIMAL&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color: #0086B3&#34;&gt;VARCHAR&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;GO&lt;/span&gt;

&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;EXEC&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;sp_cdc_enable_table&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;source_schema&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;N&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;dbo&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;source_name&lt;/span&gt;   &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;N&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;ORDERS&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;role_name&lt;/span&gt;     &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;supports_net_changes&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;GO&lt;/span&gt;

&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;-- At this point you should get a row returned from this query&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;Schema_Name&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tb&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;Table_Name&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tb&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;object_id&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tb&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tb&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;type_desc&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tb&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;is_tracked_by_cdc&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tables&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tb&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;JOIN&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;schemas&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;schema_id&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tb&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;schema_id&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tb&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;is_tracked_by_cdc&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;GO&lt;/span&gt;
&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;-- h/t William Prigol Lopes https://stackoverflow.com/a/61698148/350613&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_adding_a_sql_server_connector_in_ksqldb&#34;&gt;Adding a SQL Server connector in ksqlDB&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should now have the ksqlDB prompt open&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;                  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;===========================================&lt;/span&gt;
                  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;       _              _ ____  ____       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;      | | _____  __ _| |  _ &lt;span style=&#34;color: #d14&#34;&gt;\|&lt;/span&gt; __ &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt;      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;      | |/ / __|/ _&lt;span style=&#34;color: #d14&#34;&gt;`&lt;/span&gt; | | | | |  _ &lt;span style=&#34;color: #d14&#34;&gt;\ &lt;/span&gt;     &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;      |   &amp;lt;&lt;span style=&#34;color: #d14&#34;&gt;\_&lt;/span&gt;_ &lt;span style=&#34;color: #d14&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;_| | | |_| | |_&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt; |     &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;      |_|&lt;span style=&#34;color: #d14&#34;&gt;\_\_&lt;/span&gt;__/&lt;span style=&#34;color: #d14&#34;&gt;\_&lt;/span&gt;_, |_|____/|____/      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;                   |_|                   &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;  Event Streaming Database purpose-built &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for &lt;/span&gt;stream processing apps       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;===========================================&lt;/span&gt;

Copyright 2017-2020 Confluent Inc.

CLI v0.11.0, Server v0.11.0 located at http://ksqldb:8088

Having trouble? Type &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;help&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;case&lt;/span&gt;&lt;span style=&#34;color: #000080&#34;&gt;-insensitive&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for &lt;/span&gt;a rundown of how things work!

ksql&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;From the ksqlDB prompt create the connector:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SOURCE&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CONNECTOR&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SOURCE_MSSQL_ORDERS_01&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;WITH&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;
      &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;connector.class&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;io.debezium.connector.sqlserver.SqlServerConnector&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;database.hostname&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;mssql&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;database.port&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;1433&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;database.user&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;sa&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;database.password&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;Admin123&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;database.dbname&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;demo&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;database.server.name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;mssql&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;table.whitelist&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;dbo.orders&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;database.history.kafka.bootstrap.servers&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;broker:29092&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;database.history.kafka.topic&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;dbz_dbhistory.mssql.asgard-01&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;decimal.handling.mode&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;double&amp;#39;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check that it’s running successfully&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SHOW&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CONNECTORS&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Connector&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Name&lt;/span&gt;         &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;Type&lt;/span&gt;   &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;Class&lt;/span&gt;                                              &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Status&lt;/span&gt;
&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;--------------------------------------------------------------------------------------------------------------------&lt;/span&gt;
 &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SOURCE_MSSQL_ORDERS_01&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SOURCE&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;io&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;debezium&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;connector&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;sqlserver&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SqlServerConnector&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;RUNNING&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tasks&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;RUNNING&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;--------------------------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If it’s &lt;strong&gt;not&lt;/strong&gt; (e.g. if the Status is &lt;code&gt;WARNING&lt;/code&gt;) then run &lt;code&gt;docker logs -f ksqldb&lt;/code&gt; and page through to find the &lt;code&gt;ERROR&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_using_ms_sql_data_in_ksqldb&#34;&gt;Using MS SQL data in ksqlDB&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With the connector running and the data flowing you can declare a stream against it&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;STREAM&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDERS&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;WITH&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;KAFKA_TOPIC&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;mssql.dbo.ORDERS&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;VALUE_FORMAT&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;AVRO&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and then start to explore the data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;auto.offset.reset&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;earliest&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SOURCE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;NAME&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SOURCE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SCHEMA&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SOURCE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;&amp;#34;TABLE&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;OP&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;BEFORE&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AFTER&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDERS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;EMIT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CHANGES&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;+-----------------------+-----------------------+-------+---------+-----------------------+
|NAME                   |KSQL_COL_0             |OP     |BEFORE   |AFTER                  |
+-----------------------+-----------------------+-------+---------+-----------------------+
|mssql                  |dbo.ORDERS             |r      |null     |&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;ORDER_ID&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;1, CUSTOMER_I|
|                       |                       |       |         |D&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;7, &lt;span style=&#34;color: #008080&#34;&gt;ORDER_TS&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;18256, OR|
|                       |                       |       |         |DER_TOTAL_USD&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;2.1, ITEM|
|                       |                       |       |         |&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;Proper Job&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}&lt;/span&gt;           |
|mssql                  |dbo.ORDERS             |r      |null     |&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;ORDER_ID&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;2, CUSTOMER_I|
|                       |                       |       |         |D&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;8, &lt;span style=&#34;color: #008080&#34;&gt;ORDER_TS&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;18236, OR|
|                       |                       |       |         |DER_TOTAL_USD&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;0.23, ITE|
|                       |                       |       |         |M&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;Wainwright&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;}&lt;/span&gt;          |&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Note the use of the &lt;code&gt;→&lt;/code&gt; operator to access the nested fields.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AFTER&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDER_ID&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AFTER&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CUSTOMER_ID&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AFTER&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDER_TOTAL_USD&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDERS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;EMIT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CHANGES&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;+-------------+--------------+------------------+
|ORDER_ID     |CUSTOMER_ID   |ORDER_TOTAL_USD   |
+-------------+--------------+------------------+
|1            |7             |2.1               |
|2            |8             |0.23              |
|3            |12            |4.3               |
|4            |7             |4.88              |
|5            |14            |3.89              |
Limit Reached
Query terminated&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_capturing_changes_from_ms_sql&#34;&gt;Capturing changes from MS SQL&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So far we’ve just seen the snapshot/bootstrap ingest of data from MS SQL into Kafka/ksqlDB. Let’s make some changes in MS SQL and see how they show up in ksqlDB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Launch the MS SQL CLI&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;docker &lt;span style=&#34;color: #0086B3&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color: #000080&#34;&gt;-it&lt;/span&gt; mssql bash &lt;span style=&#34;color: #000080&#34;&gt;-c&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;/opt/mssql-tools/bin/sqlcmd -l 30 -d demo -S localhost -U sa -P $SA_PASSWORD&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Make some changes to the data&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDERS&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDER_ID&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;UPDATE&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDERS&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDER_TOTAL_USD&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDER_TOTAL_USD&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDER_ID&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDERS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;order_id&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;customer_id&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;order_ts&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;order_total_usd&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;values&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;2019-11-29T11:10:39Z&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;2.24&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;Black Sheep Ale&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;GO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check out the data in ksqlDB&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;OP&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SOURCE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SCHEMA&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SOURCE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;&amp;#34;TABLE&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;BEFORE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDER_ID&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;B_ORDER_ID&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AFTER&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDER_ID&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;A_ORDER_ID&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;BEFORE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDER_TOTAL_USD&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;B_ORDER_TOTAL_USD&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AFTER&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDER_TOTAL_USD&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;A_ORDER_TOTAL_USD&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;BEFORE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ITEM&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;B_ITEM&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AFTER&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ITEM&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;A_ITEM&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDERS&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;OP&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;EMIT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CHANGES&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;-----+-------------+------------+-----------+-------------------+------------------+---------------------+---------------------+&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;OP&lt;/span&gt;   &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;KSQL_COL_0&lt;/span&gt;   &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;B_ORDER_ID&lt;/span&gt;  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;A_ORDER_ID&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;B_ORDER_TOTAL_USD&lt;/span&gt;  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;A_ORDER_TOTAL_USD&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;B_ITEM&lt;/span&gt;               &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;A_ITEM&lt;/span&gt;               &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;-----+-------------+------------+-----------+-------------------+------------------+---------------------+---------------------+&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;d&lt;/span&gt;    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dbo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDERS&lt;/span&gt;   &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;           &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;null&lt;/span&gt;       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;                &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;null&lt;/span&gt;              &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Proper&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Job&lt;/span&gt;           &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;null&lt;/span&gt;                 &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;u&lt;/span&gt;    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dbo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDERS&lt;/span&gt;   &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;           &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;          &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;23&lt;/span&gt;               &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;21&lt;/span&gt;              &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Wainwright&lt;/span&gt;           &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Wainwright&lt;/span&gt;           &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;c&lt;/span&gt;    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dbo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ORDERS&lt;/span&gt;   &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;null&lt;/span&gt;        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;9&lt;/span&gt;          &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;null&lt;/span&gt;               &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;24&lt;/span&gt;              &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;null&lt;/span&gt;                 &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Black&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Sheep&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Ale&lt;/span&gt;      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Things to note:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;d&lt;/code&gt; deletion message gives you access to the row state before it was deleted&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;u&lt;/code&gt; update message gives you the field values before they were updated (&lt;code&gt;ORDER_TOTAL_USD&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;c&lt;/code&gt; creation message has null values in the &lt;code&gt;BEFORE&lt;/code&gt; object because there were no values before the row was created :)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Including content from external links with Asciidoc in Hugo</title>
      <link>https://rmoff.net/2020/09/18/including-content-from-external-links-with-asciidoc-in-hugo/</link>
      <pubDate>2020-09-18</pubDate>
      
      <guid>https://rmoff.net/2020/09/18/including-content-from-external-links-with-asciidoc-in-hugo/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/09/IMG_6725.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I use &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; for my blog, hosted on GitHub pages. One of the reasons I’m really happy with it is that I can use Asciidoc to author my posts. I was writing a blog recently in which I wanted to include some code that’s hosted on GitHub. I could have copied &amp;amp; pasted it into the blog but that would be lame!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With Asciidoc you can use the &lt;code&gt;include::&lt;/code&gt; directive to include both local files:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;    include::/tmp/go_routine_errors.go[]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;as well as external URIs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;    include::https://raw.githubusercontent.com/confluentinc/demo-scene/master/pipeline-to-the-cloud/data/mssql/b00_create_db_demo.sql[]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Note that you can also use source code formatting for these included files:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;    [source,go]
    ----
    include::/tmp/go_routine_errors.go[]
    ----&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For content from URIs you need to make sure that the security permissions are set when Asciidoctor is invoked, &lt;a href=&#34;https://asciidoctor.org/docs/user-manual/#include-uri&#34;&gt;detailed here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For using it from Hugo you need to do two things:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;make sure you’re on a recent version (I was on 0.54 and scratching my head until I upgraded to v0.75)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add to your site configuration the necessary security permissions to be passed to asciidoctor:&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color: #008080&#34;&gt;markup&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;asciidocExt&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #008080&#34;&gt;attributes&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #008080&#34;&gt;allow-uri-read&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #008080&#34;&gt;safeMode&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;unsafe&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>What is Kafka Connect?</title>
      <link>https://rmoff.net/2020/09/11/what-is-kafka-connect/</link>
      <pubDate>2020-09-11</pubDate>
      
      <guid>https://rmoff.net/2020/09/11/what-is-kafka-connect/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/09/IMG_6647.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;p&gt;Kafka Connect is the integration API for Apache Kafka. Check out this video for an overview of what Kafka Connect enables you to do, and how to do it.&lt;/p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/RQn3tYvkeh8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.confluent.io/download/&#34;&gt;💾Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://confluent.cloud/signup&#34;&gt;☁️ Confluent Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL5T99fPsK7ppB_AbZhBhTyKHtHWZLWIJ8&#34;&gt;📺 Kafka Connect connector deep-dive playlist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.confluent.io/current/connect/&#34;&gt;✍️Kafka Connect documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.confluent.io/hub/&#34;&gt;🧩Confluent Hub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;found-this-useful&#34;&gt;Found this useful?&lt;/h2&gt;
&lt;p&gt;Make sure to follow me here on dev.to and &lt;a href=&#34;https://www.youtube.com/c/rmoff&#34;&gt;subscribe to my YouTube channel&lt;/a&gt; for more videos about Apache Kafka and Confluent Platform!&lt;/p&gt;
&lt;h2 id=&#34;from-zero-to-hero-with-kafka-connect&#34;&gt;From Zero to Hero with Kafka Connect&lt;/h2&gt;
&lt;p&gt;45 minute conference talk all about Kafka Connect with live demo!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.devto.com/watch?v=Jkcp28ki82k&#34;&gt;🎥Recording&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talks.rmoff.net/DQkDj3/from-zero-to-hero-with-kafka-connect&#34;&gt;📔Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kafka-connect-blogs&#34;&gt;Kafka Connect blogs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.confluent.io/blog/kafka-connect-deep-dive-error-handling-dead-letter-queues&#34;&gt;Kafka Connect Deep Dive – Error Handling and Dead Letter Queues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.confluent.io/blog/kafka-connect-deep-dive-jdbc-source-connector&#34;&gt;Kafka Connect Deep Dive – JDBC Source Connector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.confluent.io/blog/kafka-connect-deep-dive-converters-serialization-explained&#34;&gt;Kafka Connect Deep Dive – Converters and Serialization Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.confluent.io/blog/no-more-silos-how-to-integrate-your-databases-with-apache-kafka-and-cdc&#34;&gt;No More Silos: How to Integrate Your Databases with Apache Kafka and CDC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.confluent.io/blog/simplest-useful-kafka-connect-data-pipeline-world-thereabouts-part-1/&#34;&gt;The Simplest Useful Kafka Connect Data Pipeline in the World…or Thereabouts – Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.confluent.io/blog/the-simplest-useful-kafka-connect-data-pipeline-in-the-world-or-thereabouts-part-2/&#34;&gt;The Simplest Useful Kafka Connect Data Pipeline in the World…or Thereabouts – Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.confluent.io/blog/simplest-useful-kafka-connect-data-pipeline-world-thereabouts-part-3/&#34;&gt;The Simplest Useful Kafka Connect Data Pipeline in the World…or Thereabouts – Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.confluent.io/blog/cloud-analytics-for-on-premises-data-streams-with-kafka&#34;&gt;Pipeline to the Cloud – Streaming On-Premises Data for Cloud Analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.confluent.io/blog/build-streaming-etl-solutions-with-kafka-and-rail-data&#34;&gt;🚂 On Track with Apache Kafka – Building a Streaming ETL Solution with Rail Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Counting the number of messages in a Kafka topic</title>
      <link>https://rmoff.net/2020/09/08/counting-the-number-of-messages-in-a-kafka-topic/</link>
      <pubDate>2020-09-08</pubDate>
      
      <guid>https://rmoff.net/2020/09/08/counting-the-number-of-messages-in-a-kafka-topic/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/08/IMG_6248.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There’s ways, and then there’s ways, to count the number of records/events/messages in a Kafka topic. Most of them are potentially inaccurate, or inefficient, or both. Here’s one that falls into the &lt;em&gt;potentially inefficient&lt;/em&gt; category, using &lt;code&gt;kafkacat&lt;/code&gt; to read all the messages and pipe to &lt;code&gt;wc&lt;/code&gt; which with the &lt;code&gt;-l&lt;/code&gt; will tell you how many lines there are, and since each message is a line, how many messages you have in the Kafka topic:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color: #008080&#34;&gt;$ &lt;/span&gt;kafkacat &lt;span style=&#34;color: #000080&#34;&gt;-b&lt;/span&gt; broker:29092 &lt;span style=&#34;color: #000080&#34;&gt;-t&lt;/span&gt; mytestopic &lt;span style=&#34;color: #000080&#34;&gt;-C&lt;/span&gt; &lt;span style=&#34;color: #000080&#34;&gt;-e&lt;/span&gt; &lt;span style=&#34;color: #000080&#34;&gt;-q&lt;/span&gt;| &lt;span style=&#34;color: #0086B3&#34;&gt;wc&lt;/span&gt; &lt;span style=&#34;color: #000080&#34;&gt;-l&lt;/span&gt;
       3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can verify what’s happening by removing the pipe to just see the messages:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color: #008080&#34;&gt;$ &lt;/span&gt;kafkacat &lt;span style=&#34;color: #000080&#34;&gt;-b&lt;/span&gt; broker:29092 &lt;span style=&#34;color: #000080&#34;&gt;-t&lt;/span&gt; mytestopic &lt;span style=&#34;color: #000080&#34;&gt;-C&lt;/span&gt; &lt;span style=&#34;color: #000080&#34;&gt;-e&lt;/span&gt; &lt;span style=&#34;color: #000080&#34;&gt;-q&lt;/span&gt;
I&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;m message 1
I&amp;#39;&lt;/span&gt;m message 2
I&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;m message 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What do the flags for &lt;code&gt;kafkacat&lt;/code&gt; mean?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-C&lt;/code&gt;: act as a Consumer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-q&lt;/code&gt;: quiet, no informational messages from kafkacat&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-e&lt;/code&gt;: exit once last offset read&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_select_countgroup_by&#34;&gt;&lt;code&gt;SELECT COUNT(*)…GROUP BY…&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Consuming all the messages from the topic is fine, but what about if you want to break it down further? Say, by key, or other field in the data? This is where being able to express yourself in SQL with &lt;a href=&#34;https://ksqldb.io&#34;&gt;ksqlDB&lt;/a&gt; comes in handy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First up we need a schema for the data in the topic (since we’re working with fields now, not just entire records). If we’re using Avro or Protobuf then the schema is already available, but for JSON/CSV we can specify it as part of the statement in which we tell ksqlDB about the Kafka topic:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;STREAM&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CARPARK_SRC&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0086B3&#34;&gt;date&lt;/span&gt;          &lt;span style=&#34;color: #0086B3&#34;&gt;VARCHAR&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
                           &lt;span style=&#34;color: #0086B3&#34;&gt;time&lt;/span&gt;          &lt;span style=&#34;color: #0086B3&#34;&gt;VARCHAR&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
                           &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;name&lt;/span&gt;          &lt;span style=&#34;color: #0086B3&#34;&gt;VARCHAR&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
                           &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;capacity&lt;/span&gt;      &lt;span style=&#34;color: #0086B3&#34;&gt;INT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
                           &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;empty_places&lt;/span&gt;  &lt;span style=&#34;color: #0086B3&#34;&gt;INT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
           &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;WITH&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;KAFKA_TOPIC&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;carparks&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
                 &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;VALUE_FORMAT&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;DELIMITED&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_group_by_field&#34;&gt;&lt;code&gt;GROUP BY &amp;lt;field&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now that we have a stream, we can query it and check the number of messages. We need to tell ksqlDB that we want it to read from the beginning of the topic:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;auto.offset.reset&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;earliest&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and then we run our &lt;code&gt;COUNT&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;NAME&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;COUNT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;RECORD_CT&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CARPARK_SRC&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;NAME&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;EMIT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CHANGES&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;--------------------+----------+&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;NAME&lt;/span&gt;                &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;RECORD_CT&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;--------------------+----------+&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Westgate&lt;/span&gt;            &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;60&lt;/span&gt;        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Burnett&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;St&lt;/span&gt;          &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;60&lt;/span&gt;        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Crown&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Court&lt;/span&gt;         &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;60&lt;/span&gt;        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Leisure&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Exchange&lt;/span&gt;    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;60&lt;/span&gt;        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;NCP&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Hall&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Ings&lt;/span&gt;       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;60&lt;/span&gt;        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Broadway&lt;/span&gt;            &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;60&lt;/span&gt;        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Kirkgate&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Centre&lt;/span&gt;     &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;60&lt;/span&gt;        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Sharpe&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Street&lt;/span&gt;       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;60&lt;/span&gt;        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each of the &lt;code&gt;NAME&lt;/code&gt; values above has 60 records associated with it, and thus if we run a &lt;code&gt;GROUP BY&lt;/code&gt; across all messages (using a dummy &lt;code&gt;GROUP BY&lt;/code&gt; to force the aggregation) we’ll see that there’s a total of 480 messages:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;COUNT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;RECORD_CT&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CARPARK_SRC&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;EMIT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CHANGES&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;-------------+&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;RECORD_CT&lt;/span&gt;    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;-------------+&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;480&lt;/span&gt;          &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When running this, you may notice that the query doesn’t exit, but instead the CLI says&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Press&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CTRL&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;interrupt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;That’s because we’ve run a &lt;strong&gt;push query&lt;/strong&gt;, we’ve subscribed to the stream of results from the Kafka topic, and since Kafka topics are unbounded so are the results of a query against it. As new data arrives, the aggregate values may changes, and will be returned to the client as they do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;-------------+&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;RECORD_CT&lt;/span&gt;    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;-------------+&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;480&lt;/span&gt;          &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;488&lt;/span&gt;          &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;496&lt;/span&gt;          &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;

&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Press&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CTRL&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;interrupt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_group_by_time_window&#34;&gt;&lt;code&gt;GROUP BY &amp;lt;time window&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the example above we see how ksqlDB can count all of the messages in a topic, counting them up either in entirety or broken down by a field of your choice. What about if we’d like to count the number of messages by slices of time? For example, how many messages in the topic &lt;em&gt;per four hours&lt;/em&gt;? For this we use &lt;strong&gt;time windowing&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TIMESTAMPTOSTRING&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;WINDOWSTART&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;Europe/London&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
         &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;FOUR_HOUR_WINDOW_START_TS&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;COUNT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;RECORD_CT&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CARPARK_SRC&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;WINDOW&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TUMBLING&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SIZE&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;HOURS&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;EMIT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CHANGES&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;--------------------------+-----------+&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;FOUR_HOUR_WINDOW_START_TS&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;RECORD_CT&lt;/span&gt;  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;--------------------------+-----------+&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;07&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;00&lt;/span&gt;       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;368&lt;/span&gt;        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;07&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;00&lt;/span&gt;       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;464&lt;/span&gt;        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;07&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;00&lt;/span&gt;       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;128&lt;/span&gt;        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;08&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;00&lt;/span&gt;       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;8&lt;/span&gt;          &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;08&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;05&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;00&lt;/span&gt;       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;8&lt;/span&gt;          &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;08&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;00&lt;/span&gt;       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;120&lt;/span&gt;        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_not_everyone_loves_streams&#34;&gt;Not everyone loves streams?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above streaming queries are pretty cool, but you don’t always want to run a continuous query just to check on the number of records in a topic. Quite likely, you just want to do a quick lookup. Kinda like against a database table, with a good ole&amp;#39; regular &lt;code&gt;SELECT&lt;/code&gt; that just gives you an answer and exits. Fear not!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this brave new world of streaming SQL we can still do this, and it’s because ksqlDB can actually build and maintain materialised views. Instead of scanning through the data in a topic each time you want to know how many messages there are, it will instead &lt;strong&gt;materialise that information internally&lt;/strong&gt; and then make it available for you to query &lt;em&gt;on demand&lt;/em&gt;. Check this out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;MESSAGE_COUNT_BY_4HR&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DUMMY_FIELD&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
           &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TIMESTAMPTOSTRING&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;WINDOWSTART&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;Europe/London&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
             &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;WINDOW_START_TS&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
           &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;COUNT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;RECORD_CT&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CARPARK_SRC&lt;/span&gt;
            &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;WINDOW&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;TUMBLING&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SIZE&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;HOURS&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;EMIT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CHANGES&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We’ve now built a table that ksqlDB will keep up to date as any new messages arrive. Whenever we want to know the message count, we can run a query (known as a &lt;strong&gt;pull query&lt;/strong&gt; here, contrast to &lt;strong&gt;push query&lt;/strong&gt; above):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;WINDOW_START_TS&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;RECORD_CT&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;MESSAGE_COUNT_BY_4HR&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;WINDOWSTART&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;2020-09-08T08:00:00+0100&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DUMMY_FIELD&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;---------------------+-----------+&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;WINDOW_START_TS&lt;/span&gt;      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;RECORD_CT&lt;/span&gt;  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;---------------------+-----------+&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;08&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;184&lt;/span&gt;        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Query&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;terminated&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ksql&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Did you see that? That right there ☝️! This:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Query&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;terminated&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ksql&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The query ran, looked up the value, and then returned it to the user. You can do this from the commandline, but you can also do it from your application, using the &lt;a href=&#34;https://docs.ksqldb.io/en/latest/developer-guide/ksqldb-clients/java-client/&#34;&gt;Java client&lt;/a&gt;, &lt;a href=&#34;https://docs.ksqldb.io/en/latest/developer-guide/ksqldb-rest-api/streaming-endpoint/&#34;&gt;REST API&lt;/a&gt;, or even the nascent &lt;a href=&#34;https://github.com/rmoff/ksqldb-go&#34;&gt;Go client&lt;/a&gt; being developed. Here’s an example with the REST API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color: #008080&#34;&gt;$ &lt;/span&gt;curl &lt;span style=&#34;color: #000080&#34;&gt;--http2&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;http://localhost:8088/query-stream&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;\&lt;/span&gt;
     &lt;span style=&#34;color: #000080&#34;&gt;--data-raw&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;{&amp;#34;sql&amp;#34;:&amp;#34;SELECT WINDOW_START_TS, RECORD_CT FROM MESSAGE_COUNT_BY_4HR WHERE WINDOWSTART &amp;gt; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;2020-09-08T08:00:00+0100&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39; AND DUMMY_FIELD=1 ;&amp;#34;}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;queryId&amp;#34;&lt;/span&gt;:null,&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;columnNames&amp;#34;&lt;/span&gt;:[&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;WINDOW_START_TS&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;RECORD_CT&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;]&lt;/span&gt;,&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;columnTypes&amp;#34;&lt;/span&gt;:[&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;STRING&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;BIGINT&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;]}&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;2020-09-08 09:00:00&amp;#34;&lt;/span&gt;,184]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_other_ways_to_count_the_messages&#34;&gt;Other ways to count the messages&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;On the &lt;a href=&#34;http://cnfl.io/slack&#34;&gt;Confluent Community Slack forum&lt;/a&gt; there was an interesting thread about this, and which prompted me to blog it here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.linkedin.com/in/eightnoteight/&#34;&gt;Srinivas Devaki&lt;/a&gt;&lt;/strong&gt;:
You can use GetOffsetShell to get the earliest and latest offsets and compute the number of messages by subtracting with each other&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;# Get Latest Offset&lt;/span&gt;
/opt/kafka/bin/kafka-run-class.sh kafka.tools.GetOffsetShell &lt;span style=&#34;color: #d14&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color: #000080&#34;&gt;--broker-list&lt;/span&gt; localhost:9092 &lt;span style=&#34;color: #d14&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color: #000080&#34;&gt;--topic&lt;/span&gt; my_topic &lt;span style=&#34;color: #d14&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color: #000080&#34;&gt;--time&lt;/span&gt; &lt;span style=&#34;color: #000080&#34;&gt;-1&lt;/span&gt;
&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;# Get Earliest Offset&lt;/span&gt;
/opt/kafka/bin/kafka-run-class.sh kafka.tools.GetOffsetShell &lt;span style=&#34;color: #d14&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color: #000080&#34;&gt;--broker-list&lt;/span&gt; localhost:9092 &lt;span style=&#34;color: #d14&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color: #000080&#34;&gt;--topic&lt;/span&gt; my_topic &lt;span style=&#34;color: #d14&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color: #000080&#34;&gt;--time&lt;/span&gt; &lt;span style=&#34;color: #000080&#34;&gt;-2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/Mr_mitchellh&#34;&gt;Mitch Henderson&lt;/a&gt;&lt;/strong&gt;: Small note, offsets are very much not guaranteed to be sequential.  Not every offset will be a record the client will receive.  The above will give you a round about estimate of the number of messages, not it will not be exact.  The only way to get an exact number is to dump the topic and pipe it to wc&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;Srinivas&lt;/strong&gt;: awesome detail, never knew that offsets are not guaranteed to be sequential. But why is that so? I’ve tried searching about this but couldn’t find any references, any link where I can read more on this?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;Mitch&lt;/strong&gt;: Idempotent and transactional production are the most common reasons.  But there are others.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/weeco5&#34;&gt;Weeco&lt;/a&gt;&lt;/strong&gt;: Also because of gaps in compacted topics this won’t work
If you don’t want to consume all messages to count the number of records I have just one idea how to get a rough estimate. I described that here: &lt;a href=&#34;https://github.com/cloudhut/kowl/issues/83&#34; class=&#34;bare&#34;&gt;https://github.com/cloudhut/kowl/issues/83&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Poking around the search engines in Google Chrome</title>
      <link>https://rmoff.net/2020/09/07/poking-around-the-search-engines-in-google-chrome/</link>
      <pubDate>2020-09-07</pubDate>
      
      <guid>https://rmoff.net/2020/09/07/poking-around-the-search-engines-in-google-chrome/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/09/IMG_6599.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Google Chrome automagically adds sites that you visit which support searching to a list of custom search engines. For each one you can set a keyword which activates it, so based on the above list if I want to search Amazon I can just type &lt;code&gt;a&lt;/code&gt; &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; and then my search term&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/09/searchengines02.gif&#34; alt=&#34;searchengines02&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Head to preferences and &lt;code&gt;Manage search engines&lt;/code&gt; and you’ll see:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/09/searchengines01.png&#34; alt=&#34;searchengines01&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But what about if you don’t want all of these search engines there? You can delete them &lt;em&gt;one by one&lt;/em&gt;, but that’s laborious. Let’s see if we can do better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock warning&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-warning&#34; title=&#34;Warning&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
⚠️ This is completely unsupported, do at your own risk, etc
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First up, close Google Chrome, because we’re about to muck about with it and things will probably not be good if it’s running whilst we do it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A sensible thing to do first is to take a backup:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color: #0086B3&#34;&gt;cp&lt;/span&gt; ~/Library/Application&lt;span style=&#34;color: #d14&#34;&gt;\ &lt;/span&gt;Support/Google/Chrome/Default/Web&lt;span style=&#34;color: #d14&#34;&gt;\ &lt;/span&gt;Data ~/chrome_webdata.bak&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we can take a look at the SQLite database that stores the search engine (and other) data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;➜ sqlite3 ~/Library/Application&lt;span style=&#34;color: #d14&#34;&gt;\ &lt;/span&gt;Support/Google/Chrome/Default/Web&lt;span style=&#34;color: #d14&#34;&gt;\ &lt;/span&gt;Data
SQLite version 3.28.0 2019-04-15 14:49:49
Enter &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;.help&amp;#34;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for &lt;/span&gt;usage hints.
sqlite&amp;gt; .tables
autofill                      meta
autofill_model_type_state     payment_method_manifest
autofill_profile_emails       payments_customer_data
autofill_profile_names        payments_upi_vpa
autofill_profile_phones       server_address_metadata
autofill_profiles             server_addresses
autofill_profiles_trash       server_card_cloud_token_data
autofill_sync_metadata        server_card_metadata
credit_cards                  token_service
keywords                      unmasked_credit_cards
masked_credit_cards           web_app_manifest_section&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If the SQLite CLI is your thing then you can stick around here, but for poking around I found a GUI easier. &lt;a href=&#34;https://sqlitebrowser.org/&#34;&gt;DB Browser for SQLite&lt;/a&gt; is available on most platforms. On the Mac you can run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;brew cask &lt;span style=&#34;color: #0086B3&#34;&gt;install &lt;/span&gt;db-browser-for-sqlite&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The table that holds the search engine config is called &lt;code&gt;keywords&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/09/searchengines03.png&#34; alt=&#34;searchengines03&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_which_search_engines_have_never_been_used&#34;&gt;Which search engines have never been used?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There’s tons of fields, including information about when the entry was created and was last used. With this information we can run some SQL to analyse the list:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;CASE&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;WHEN&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;last_visited&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;THEN&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;never&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;END&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;USED&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;COUNT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;keywords&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;CASE&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;WHEN&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;last_visited&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;THEN&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;never&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;END&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;never&lt;/span&gt;       &lt;span style=&#34;color: #009999&#34;&gt;126&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;yes&lt;/span&gt;         &lt;span style=&#34;color: #009999&#34;&gt;32&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Since there’s a bunch there, let’s clear them out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock warning&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-warning&#34; title=&#34;Warning&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
⚠️ This is completely unsupported, do at your own risk, etc
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;keywords&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;last_visited&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;This didn’t seem to take any effect, even with Chrome closed, even having signed out of Sync. If you’ve any suggestions on how to make it persist then do let me know :)&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_when_did_you_last_use_the_search_engine&#34;&gt;When did you last use the search engine?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;short_name&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;last_visited&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #0086B3&#34;&gt;DATETIME&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;last_visited&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;1000000&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;STRFTIME&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;%s&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;1601-01-01&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)),&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;unixepoch&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;localtime&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;keywords&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;last_visited&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;DESC&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;amazon&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;co&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;uk&lt;/span&gt;  &lt;span style=&#34;color: #009999&#34;&gt;13244032138725921&lt;/span&gt;  &lt;span style=&#34;color: #009999&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;08&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;48&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;58&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;googl&lt;/span&gt;  &lt;span style=&#34;color: #009999&#34;&gt;13244031156625704&lt;/span&gt;  &lt;span style=&#34;color: #009999&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;08&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;36&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LinkedIn&lt;/span&gt;      &lt;span style=&#34;color: #009999&#34;&gt;13244030586371852&lt;/span&gt;  &lt;span style=&#34;color: #009999&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;08&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;06&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ksqlDB&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;issue&lt;/span&gt;  &lt;span style=&#34;color: #009999&#34;&gt;13244029597778579&lt;/span&gt;  &lt;span style=&#34;color: #009999&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;08&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;06&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;37&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Twitter&lt;/span&gt;       &lt;span style=&#34;color: #009999&#34;&gt;13243959593811733&lt;/span&gt;  &lt;span style=&#34;color: #009999&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;07&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;39&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;53&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Google&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Maps&lt;/span&gt;   &lt;span style=&#34;color: #009999&#34;&gt;13243697309712953&lt;/span&gt;  &lt;span style=&#34;color: #009999&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;04&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;48&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;29&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check out the format of the datetime field - &lt;a href=&#34;https://stackoverflow.com/questions/20458406/what-is-the-format-of-chromes-timestamps&#34;&gt;courtesy of StackOverflow&lt;/a&gt; I found out that it is the &lt;em&gt;number of microseconds since January, 1601.&lt;/em&gt; Unix epoch not good enough for you?… 😉&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can break this down further, and look at which search engines I have used but not for the last 90 days (~3 months)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;short_name&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0086B3&#34;&gt;DATETIME&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;last_visited&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;1000000&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;STRFTIME&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;%s&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;1601-01-01&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)),&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;unixepoch&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;localtime&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;last_visited&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;keywords&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;JULIANDAY&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0086B3&#34;&gt;date&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;JULIANDAY&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0086B3&#34;&gt;DATETIME&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;last_visited&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;1000000&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;STRFTIME&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;%s&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;1601-01-01&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)),&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;unixepoch&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;localtime&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;90&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;last_visited&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;DESC&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;news&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;google&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;com&lt;/span&gt;  &lt;span style=&#34;color: #009999&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;06&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;05&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;23&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;elixir&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;org&lt;/span&gt;  &lt;span style=&#34;color: #009999&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;06&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;16&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;IMDb&lt;/span&gt;             &lt;span style=&#34;color: #009999&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;39&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;32&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Neo4j&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Online&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Co&lt;/span&gt;  &lt;span style=&#34;color: #009999&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;06&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;55&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Vimeo&lt;/span&gt;            &lt;span style=&#34;color: #009999&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;57&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;help&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getpocket&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;  &lt;span style=&#34;color: #009999&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;41&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;20&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;GitHub&lt;/span&gt;           &lt;span style=&#34;color: #009999&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;08&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;06&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;54&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;48&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>🤖Building a Telegram bot with Apache Kafka, Go, and ksqlDB</title>
      <link>https://rmoff.net/2020/08/20/building-a-telegram-bot-with-apache-kafka-go-and-ksqldb/</link>
      <pubDate>2020-08-20</pubDate>
      
      <guid>https://rmoff.net/2020/08/20/building-a-telegram-bot-with-apache-kafka-go-and-ksqldb/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/08/IMG_6174.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I had the pleasure of presenting at &lt;a href=&#34;https://dataengconf.com.au/&#34;&gt;DataEngBytes&lt;/a&gt; recently, and am delighted to share with you the &lt;strong&gt;🗒️ slides, 👾 code, and 🎥 recording&lt;/strong&gt; of my ✨brand new talk✨:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.dev/carpark-telegram-bot&#34;&gt;🤖Building a Telegram bot with Apache Kafka, Go, and ksqlDB&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://rmoff.dev/carpark-telegram-bot&#34;&gt;&lt;img src=&#34;https://rmoff.net/images/2020/08/telegram_carpark_cover.jpg&#34; alt=&#34;telegram carpark cover&#34;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Telegram bot - BOT_COMMAND_INVALID</title>
      <link>https://rmoff.net/2020/07/23/telegram-bot-bot_command_invalid/</link>
      <pubDate>2020-07-23</pubDate>
      
      <guid>https://rmoff.net/2020/07/23/telegram-bot-bot_command_invalid/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/img/default-header-img.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A tiny snippet since I wasted 10 minutes going around the houses on this one…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;tl;dr: If you try to create a command that is &lt;strong&gt;not in lower case&lt;/strong&gt; (e.g. &lt;code&gt;Alert&lt;/code&gt; not &lt;code&gt;alert&lt;/code&gt;) then the &lt;code&gt;setMyCommands&lt;/code&gt; API will return &lt;code&gt;BOT_COMMAND_INVALID&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Create a command for your Telegram bot:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;curl&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;https://api.telegram.org/botMY_TOKEN/setMyCommands&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;header&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;Content-Type: application/json&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;raw&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;{
    &amp;#34;commands&amp;#34;: [
        {
            &amp;#34;command&amp;#34;: &amp;#34;alert&amp;#34;,
            &amp;#34;description&amp;#34;: &amp;#34;Define an alert to be sent if a carpark becomes available with greater than the defined number of spaces&amp;#34;
        }
    ]
}&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;ok&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;result&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;List commands for your Telegram bot:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;curl &lt;span style=&#34;color: #000080&#34;&gt;--location&lt;/span&gt; &lt;span style=&#34;color: #000080&#34;&gt;--request&lt;/span&gt; GET &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;https://api.telegram.org/botMY_TOKEN/getMyCommands&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;ok&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;result&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:[{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;command&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;alert&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;description&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;Define an alert to be sent if a carpark becomes available with greater than the defined number of spaces&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S02E09 - Processing chunked responses before EOF is reached</title>
      <link>https://rmoff.net/2020/07/23/learning-golang-some-rough-notes-s02e09-processing-chunked-responses-before-eof-is-reached/</link>
      <pubDate>2020-07-23</pubDate>
      
      <guid>https://rmoff.net/2020/07/23/learning-golang-some-rough-notes-s02e09-processing-chunked-responses-before-eof-is-reached/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/07/IMG_5126.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The server sends &lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt; data, and you want to work with the data &lt;strong&gt;as you get it&lt;/strong&gt;, instead of waiting for the server to finish, the EOF to fire, and &lt;em&gt;then&lt;/em&gt; process the data?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here’s an example &lt;code&gt;curl&lt;/code&gt; of the kind of session I’m talking about:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;➜ curl &lt;span style=&#34;color: #000080&#34;&gt;--verbose&lt;/span&gt; &lt;span style=&#34;color: #000080&#34;&gt;--location&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;http://localhost:8088/query&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #000080&#34;&gt;--header&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;Content-Type: application/vnd.ksql.v1+json; charset=utf-8&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #000080&#34;&gt;--data-raw&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;{
    &amp;#34;ksql&amp;#34;: &amp;#34;SELECT NAME, TS, CAPACITY, EMPTY_PLACES FROM CARPARK_EVENTS  WHERE  EMPTY_PLACES &amp;gt; 100 emit changes;&amp;#34;
}&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;   Trying ::1...
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt; TCP_NODELAY &lt;span style=&#34;color: #0086B3&#34;&gt;set&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt; Connected to localhost &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;::1&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt; port 8088 &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;#0)&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; POST /query HTTP/1.1
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; Host: localhost:8088
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; User-Agent: curl/7.64.1
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; Accept: &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;/&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; Content-Type: application/vnd.ksql.v1+json&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;utf-8
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; Content-Length: 118
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt; upload completely sent off: 118 out of 118 bytes
&amp;lt; HTTP/1.1 200 OK
&amp;lt; content-type: application/json
&amp;lt; Transfer-Encoding: chunked
&amp;lt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The API that I’m working with sends a complete JSON message, but spread over chunks. It starts with a header&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;header&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;queryId&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;none&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;`NAME` STRING, `TS` BIGINT, `CAPACITY` INTEGER, `EMPTY_PLACES` INTEGER&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and then at some point - perhaps straight away, perhaps after a few seconds, you get some data&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;columns&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:[&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;Westgate&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1595372100000&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;116&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;116&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]}},&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;columns&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:[&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;Burnett St&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1595372100000&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;122&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;117&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]}},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and then some empty rows&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and then maybe some more data&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;columns&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:[&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;Crown Court&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1595372100000&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;142&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;130&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]}},&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;columns&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:[&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;Leisure Exchange&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1595372100000&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;996&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;976&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]}},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is from a &lt;a href=&#34;https://ksqldb.io&#34;&gt;streaming database&lt;/a&gt;, and the idea is that the client can use the data as it’s continually sent. Contrast this to the standard request-response pattern of data consumption in which the request is fully satisfied before the client will process the response.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;From my Googling I came across two standard patterns for consuming JSON from a REST call:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NewDecoder&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;NewDecoder&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;resp&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Body&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Decode&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Unmarshal&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Unmarshal&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;resp&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Body&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But I found that both of these &lt;strong&gt;blocked&lt;/strong&gt; until the entire response had been received - which is not what I wanted. &lt;a href=&#34;https://stackoverflow.com/a/22177737/350613&#34;&gt;Courtesy of &lt;code&gt;chourobin&lt;/code&gt;&lt;/a&gt; I found this solution. First up, create the client and request:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Prepare the request&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;http://localhost:8088/query&amp;#34;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;method&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;SELECT NAME, TS, CAPACITY, EMPTY_PLACES FROM CARPARK_EVENTS  WHERE  EMPTY_PLACES &amp;gt; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;strconv&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Itoa&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;  EMIT CHANGES;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;payload&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;strings&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;NewReader&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;ksql&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;}&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Create the client&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Client&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;req&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;NewRequest&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;payload&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;err&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;req&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Header&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;application/vnd.ksql.v1+json; charset=utf-8&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Make the request&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;res&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Do&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;req&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;err&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;res&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Body&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Close&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now create a &lt;code&gt;NewReader&lt;/code&gt; to consume the response:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;reader&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;bufio&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;NewReader&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;res&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Body&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And then run a loop which consumes the response a line at a time:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doThis&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doThis&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Read the next chunk&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lb&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;reader&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ReadBytes&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Got an error back (e.g. EOF), so exit the loop&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doThis&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;false&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Do stuff with the response here&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;Got some data:&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;%v&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lb&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_what_about_the_json&#34;&gt;What about the JSON?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you notice the example response shown above, the chunks are not self-contained JSON.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The header chunk opens an array:&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;header&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;queryId&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;none&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;`NAME` STRING, `TS` BIGINT, `CAPACITY` INTEGER, `EMPTY_PLACES` INTEGER&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each row chunk is an array entry with trailing comma&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;columns&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;:[&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;Westgate&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1595372100000&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;116&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;116&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]}},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The inbound stream of Bytes is split into lines using &lt;code&gt;reader.ReadBytes(&amp;#39;\n&amp;#39;)&lt;/code&gt;. This function takes a single byte as the token by which to split, but instead of splitting on &lt;code&gt;\n&lt;/code&gt; (ASCII 13) alone, we actually want to split on &lt;code&gt;,\r\n&lt;/code&gt; (ASCII 44, 10, 13) since we have the trailing comma to remove, and the CRLF as the delineator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now, I &lt;strong&gt;think&lt;/strong&gt; the proper option here is to use a &lt;a href=&#34;https://golang.org/pkg/bufio/#Scanner&#34;&gt;&lt;code&gt;Scanner&lt;/code&gt;&lt;/a&gt; but for a quick win I instead did a dirty thing and just truncated slice by two bytes 🤢  (the first byte being &lt;code&gt;\n&lt;/code&gt; which had already been removed by the &lt;code&gt;ReadBytes&lt;/code&gt; function)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #0086B3&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lb&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lb&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lb&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #0086B3&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lb&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can then take the slice of bytes and marshall the JSON into a Go variable. You need to declare this first, using a custom type—defining the type is easy using &lt;a href=&#34;https://mholt.github.io/json-to-go/&#34;&gt;this handy little tool&lt;/a&gt;, into which you paste some sample JSON and it spits out the Go type defintion:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/jsontogo.png&#34; alt=&#34;jsontogo&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So taking this Go code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ksqlDBMessageRow&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Row&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Columns&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;`json:&amp;#34;columns&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;`json:&amp;#34;row&amp;#34;`&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;you declare the variable into which you’ll store the row that’s been read:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ksqlDBMessageRow&lt;/span&gt;

&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// …&lt;/span&gt;

&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;strings&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Contains&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lb&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;row&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Looks like a Row, let&amp;#39;s process it!&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Unmarshal&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lb&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;Error decoding JSON %v (%v)&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lb&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;From that you can then access the actual values in the payload itself:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Row&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Columns&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CARPARK&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Row&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Columns&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DATA_TS&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Row&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Columns&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;float64&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CURRENT_EMPTY_PLACES&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Row&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Columns&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;float64&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CAPACITY&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Row&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Columns&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;float64&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Handle the timestamp&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int64&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DATA_TS&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ts&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Unix&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;Carpark %v at %v has %v spaces available (capacity %v)&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CARPARK&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ts&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CURRENT_EMPTY_PLACES&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CAPACITY&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_more_episodes&#34;&gt;📺 More Episodes…&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Kafka and Go&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e00-kafka-and-go/&#34;&gt;S02E00 - Kafka and Go&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e01-my-first-kafka-go-producer/&#34;&gt;S02E01 - My First Kafka Go Producer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/10/learning-golang-some-rough-notes-s02e02-adding-error-handling-to-the-producer/&#34;&gt;S02E02 - Adding error handling to the Producer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/14/learning-golang-some-rough-notes-s02e03-kafka-go-consumer-channel-based/&#34;&gt;S02E03 - Kafka Go Consumer (Channel-based)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/14/learning-golang-some-rough-notes-s02e04-kafka-go-consumer-function-based/&#34;&gt;S02E04 - Kafka Go Consumer (Function-based)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/14/learning-golang-some-rough-notes-s02e05-kafka-go-adminclient/&#34;&gt;S02E05 - Kafka Go AdminClient&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/15/learning-golang-some-rough-notes-s02e06-putting-the-producer-in-a-function-and-handling-errors-in-a-go-routine/&#34;&gt;S02E06 - Putting the Producer in a function and handling errors in a Go routine&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/16/learning-golang-some-rough-notes-s02e07-splitting-go-code-into-separate-source-files-and-building-a-binary-executable/&#34;&gt;S02E07 - Splitting Go code into separate source files and building a binary executable&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/17/learning-golang-some-rough-notes-s02e08-checking-kafka-advertised.listeners-with-go/&#34;&gt;S02E08 - Checking Kafka advertised.listeners with Go&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/23/learning-golang-some-rough-notes-s02e09-processing-chunked-responses-before-eof-is-reached/&#34;&gt;S02E09 - Processing chunked responses before EOF is reached&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learning Go&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;S01E00 - Background&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/&#34;&gt;S01E01 - Pointers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/&#34;&gt;S01E02 - Slices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e03-maps/&#34;&gt;S01E03 - Maps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e04-function-closures/&#34;&gt;S01E04 - Function Closures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/&#34;&gt;S01E05 - Interfaces&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/&#34;&gt;S01E06 - Errors&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e07-readers/&#34;&gt;S01E07 - Readers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e08-images/&#34;&gt;S01E08 - Images&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/&#34;&gt;S01E09 - Concurrency (Channels, Goroutines)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/03/learning-golang-some-rough-notes-s01e10-concurrency-web-crawler/&#34;&gt;S01E10 - Concurrency (Web Crawler)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S02E08 - Checking Kafka advertised.listeners with Go</title>
      <link>https://rmoff.net/2020/07/17/learning-golang-some-rough-notes-s02e08-checking-kafka-advertised.listeners-with-go/</link>
      <pubDate>2020-07-17</pubDate>
      
      <guid>https://rmoff.net/2020/07/17/learning-golang-some-rough-notes-s02e08-checking-kafka-advertised.listeners-with-go/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/07/IMG_5126.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;At the &lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;beginning of all this&lt;/a&gt; my aim was to learn something new (Go), and use it to write a version of a utility that I’d previously &lt;a href=&#34;https://github.com/rmoff/kafka-listeners/blob/master/python/python_kafka_test_client.py&#34;&gt;hacked together in Python&lt;/a&gt; that checks your Apache Kafka broker configuration for possible problems with the infamous &lt;code&gt;advertised.listeners&lt;/code&gt; setting. Check out a blog that I wrote which explains &lt;em&gt;&lt;a href=&#34;https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc&#34;&gt;all about Apache Kafka and listener configuration&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
You can find the code at &lt;a href=&#34;https://github.com/rmoff/kafka-listeners&#34; class=&#34;bare&#34;&gt;https://github.com/rmoff/kafka-listeners&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It’s been a fun journey, and now I am pleased to be able to show the results of it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/cap01.gif&#34; alt=&#34;cap01&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You need &lt;a href=&#34;https://github.com/confluentinc/confluent-kafka-go&#34;&gt;Confluent’s Golang Client for Apache Kafka™️&lt;/a&gt;, which you can install thus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;gopkg&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;confluentinc&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;confluent&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;kafka&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can run the code directly with go:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;➜ go run &lt;span style=&#34;color: #0086B3&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;A single commandline argument should be used to specify the broker. Defaulting to localhost:9092&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt;
Using Broker: localhost:9092
&lt;span style=&#34;color: #000080&#34;&gt;--------------------------&lt;/span&gt;

✔️ Created AdminClient
✔️ Metadata - Originating broker &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;[&lt;/span&gt;i.e. the broker to which you&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;re connected here]
	[ID 1] localhost:9092/1
…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And you can also build it to create a single executable&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;go build&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;➜ ./listener_test asgard05.moffatt.me:9092
Using Broker: asgard05.moffatt.me:9092
&lt;span style=&#34;color: #000080&#34;&gt;--------------------------&lt;/span&gt;

✔️ Created AdminClient
✔️ Metadata - Originating broker &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;[&lt;/span&gt;i.e. the broker to which you&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;re connected here]
	[ID 1] asgard05.moffatt.me:9092/1
✔️ Metadata - Brokers [i.e. the advertised listeners of the brokers in the cluster]
	[ID 2] asgard05.moffatt.me:19092
	[ID 3] asgard05.moffatt.me:29092
	[ID 1] asgard05.moffatt.me:9092

✔️ ClusterID: Vf5L7L88QC66PLYDjN5Qvg
✔️ ControllerID: 3
✅ AdminClient worked
…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The rest of this article gives you some sample outputs for given situations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_broker_up_but_advertised_listeners_is_misconfigured&#34;&gt;Broker up but advertised.listeners is misconfigured&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;A single commandline argument should be used to specify the broker. Defaulting to localhost:9092&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt;
Using Broker: localhost:9092
&lt;span style=&#34;color: #000080&#34;&gt;--------------------------&lt;/span&gt;

✔️ Created AdminClient
✔️ Metadata - Originating broker &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;[&lt;/span&gt;i.e. the broker to which you&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;re connected here]
        [ID -1] localhost:9092/bootstrap
✔️ Metadata - Brokers [i.e. the advertised listeners of the brokers in the cluster]
        [ID 1] foobar:9092

😱 😱 😱 😱 😱 😱 😱 😱
🛑 None of the advertised listeners on the cluster match the broker (localhost:9092) to which you&amp;#39;&lt;/span&gt;re connecting.

You&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;re gonna have a bad time trying to produce or consumer with the config like this.

🔗 Check out https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc to understand more
✔️ ClusterID: vF4bIJeiQFiS7abLjBZ1tA
✔️ ControllerID: 1
✅ AdminClient worked
--------------------------

❌There was a problem calling the producer:


☠️ Uh oh, caught an error:
        foobar:9092/1: Failed to resolve &amp;#39;&lt;/span&gt;foobar:9092&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;: nodename nor servname provided, or not known (after 2ms in state CONNECT)
⚠️ Failed to flush all messages after 5000 milliseconds. 1 message(s) remain
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_everything_a_ok&#34;&gt;Everything a-ok 👌&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;Using Broker: localhost:9092
&lt;span style=&#34;color: #000080&#34;&gt;--------------------------&lt;/span&gt;

✔️ Created AdminClient
✔️ Metadata - Originating broker &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;[&lt;/span&gt;i.e. the broker to which you&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;re connected here]
        [ID 1] localhost:9092/1
✔️ Metadata - Brokers [i.e. the advertised listeners of the brokers in the cluster]
        [ID 1] localhost:9092

✔️ ClusterID: KJeOfk4KTjegF1oH-UOwjg
✔️ ControllerID: 1
✅ AdminClient worked
--------------------------

✔️ Message &amp;#39;&lt;/span&gt;foo / Fri, 17 Jul 2020 15:43:30 +0100&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39; delivered to topic &amp;#39;&lt;/span&gt;rmoff_test_00&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39; (partition 0 at offset 0)
✨ All messages flushed from the queue
✅ Producer worked
--------------------------

Starting consumer, 👀 looking for specific message:
        foo / Fri, 17 Jul 2020 15:43:30 +0100

Subscribed to topic rmoff_test_00……
……
……
……
……
……
……
……
Partition 0 position unset
✅ Message &amp;#39;&lt;/span&gt;foo / Fri, 17 Jul 2020 15:43:30 +0100&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39; received from topic &amp;#39;&lt;/span&gt;rmoff_test_00&lt;span style=&#34;color: #d14&#34;&gt;&amp;#39; (partition 0 at offset 0)
✔️ Read the message we were waiting for. Closing the consumer.
✅ Consumer worked
--------------------------&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_broker_down&#34;&gt;Broker down&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;Using Broker: localhost:9092
&lt;span style=&#34;color: #000080&#34;&gt;--------------------------&lt;/span&gt;

✔️ Created AdminClient
❌There was a problem calling the Admin Client:
😢 Error &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;(&lt;/span&gt;Local: Broker transport failure&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;)&lt;/span&gt; getting cluster Metadata. Is localhost:9092 valid broker and reachable from the machine on which this is running?&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_more_episodes&#34;&gt;📺 More Episodes…&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Kafka and Go&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e00-kafka-and-go/&#34;&gt;S02E00 - Kafka and Go&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/08/learning-golang-some-rough-notes-s02e01-my-first-kafka-go-producer/&#34;&gt;S02E01 - My First Kafka Go Producer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/10/learning-golang-some-rough-notes-s02e02-adding-error-handling-to-the-producer/&#34;&gt;S02E02 - Adding error handling to the Producer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/14/learning-golang-some-rough-notes-s02e03-kafka-go-consumer-channel-based/&#34;&gt;S02E03 - Kafka Go Consumer (Channel-based)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/14/learning-golang-some-rough-notes-s02e04-kafka-go-consumer-function-based/&#34;&gt;S02E04 - Kafka Go Consumer (Function-based)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/14/learning-golang-some-rough-notes-s02e05-kafka-go-adminclient/&#34;&gt;S02E05 - Kafka Go AdminClient&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/15/learning-golang-some-rough-notes-s02e06-putting-the-producer-in-a-function-and-handling-errors-in-a-go-routine/&#34;&gt;S02E06 - Putting the Producer in a function and handling errors in a Go routine&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/16/learning-golang-some-rough-notes-s02e07-splitting-go-code-into-separate-source-files-and-building-a-binary-executable/&#34;&gt;S02E07 - Splitting Go code into separate source files and building a binary executable&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/17/learning-golang-some-rough-notes-s02e08-checking-kafka-advertised.listeners-with-go/&#34;&gt;S02E08 - Checking Kafka advertised.listeners with Go&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/23/learning-golang-some-rough-notes-s02e09-processing-chunked-responses-before-eof-is-reached/&#34;&gt;S02E09 - Processing chunked responses before EOF is reached&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learning Go&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;S01E00 - Background&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/&#34;&gt;S01E01 - Pointers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/&#34;&gt;S01E02 - Slices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e03-maps/&#34;&gt;S01E03 - Maps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e04-function-closures/&#34;&gt;S01E04 - Function Closures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/&#34;&gt;S01E05 - Interfaces&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/&#34;&gt;S01E06 - Errors&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e07-readers/&#34;&gt;S01E07 - Readers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e08-images/&#34;&gt;S01E08 - Images&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/&#34;&gt;S01E09 - Concurrency (Channels, Goroutines)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/07/03/learning-golang-some-rough-notes-s01e10-concurrency-web-crawler/&#34;&gt;S01E10 - Concurrency (Web Crawler)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>