<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rmoff&#39;s random ramblings</title>
    <link>https://rmoff.net/</link>
    <description>Recent content on rmoff&#39;s random ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>2020-02-25</lastBuildDate>
    
        <atom:link href="https://rmoff.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kafka Connect JDBC Sink - setting the key field name</title>
      <link>https://rmoff.net/2020/02/25/kafka-connect-jdbc-sink-setting-the-key-field-name/</link>
      <pubDate>2020-02-25</pubDate>
      
      <guid>https://rmoff.net/2020/02/25/kafka-connect-jdbc-sink-setting-the-key-field-name/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/02/IMG_3118.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I wanted to get some data from a Kafka topic:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; PRINT PERSON_STATS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; BEGINNING;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Key&lt;/span&gt; format: KAFKA (STRING)
Value format: AVRO
rowtime: &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;51&lt;/span&gt; PM UTC, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;key&lt;/span&gt;: robin, value: &lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;PERSON&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;robin&amp;#34;&lt;/span&gt;,
 &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;LOCATION_CHANGES&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;UNIQUE_LOCATIONS&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;into Postgres, so did the easy thing and used Kafka Connect with the &lt;a href=&#34;https://docs.confluent.io/current/connect/kafka-connect-jdbc/sink-connector/index.html&#34;&gt;JDBC Sink connector&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I wanted to use &lt;code&gt;UPSERT&lt;/code&gt; behaviour based on the key of the Kafka message (as shown above, &lt;code&gt;robin&lt;/code&gt;), so set &lt;code&gt;pk.mode = record_key&lt;/code&gt;. Unfortunately this didn&amp;#8217;t work and errored out with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;Need exactly one PK column defined since the key schema for records is a primitive type, defined columns are: []&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Hmmmmm, I was puzzled. How can I specify a field name for something that&amp;#8217;s the message key?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Turns out that if you&amp;#8217;ve got a primitive field, &lt;strong&gt;you&lt;/strong&gt; need to specify the field name &lt;em&gt;that is to be created on the target table.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So this works:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;…
pk.mode &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; record_key
pk.fields &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;PERSON&amp;#39;&lt;/span&gt;
…&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Which then creates a table in the target database like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;postgres&lt;span style=&#34;color:#666&#34;&gt;=#&lt;/span&gt; &lt;span style=&#34;&#34;&gt;\&lt;/span&gt;d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;PERSON_STATS&amp;#34;&lt;/span&gt;
                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Table&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;public.PERSON_STATS&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Column&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Type&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Collation&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Nullable&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Default&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;------------------+--------+-----------+----------+---------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; PERSON           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;text&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 LOCATION_CHANGES &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;bigint&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
 UNIQUE_LOCATIONS &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;bigint&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
Indexes:
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;PERSON_STATS_pkey&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;KEY&lt;/span&gt;, btree (&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;PERSON&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;with data that updates in place as changes are made to the topic in Kafka&lt;/p&gt;
&lt;/div&gt;
&lt;script id=&#34;asciicast-304631&#34; src=&#34;https://asciinema.org/a/304631.js&#34; async&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>Adventures in the Cloud, Part 94: ECS</title>
      <link>https://rmoff.net/2020/02/13/adventures-in-the-cloud-part-94-ecs/</link>
      <pubDate>2020-02-13</pubDate>
      
      <guid>https://rmoff.net/2020/02/13/adventures-in-the-cloud-part-94-ecs/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/02/IMG_2382.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;My name&amp;#8217;s Robin, and I&amp;#8217;m a Developer Advocate. What that means in part is that I build a ton of demos, and Docker Compose is my jam. I love using Docker Compose for the same reasons that many people do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spin up and tear down fully-functioning multi-component environments with ease. No bespoke builds, no cloning of VMs to preserve &#34;that magic state where everything works&#34;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repeatability. It&amp;#8217;s the same each time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Portability. I can point someone at a &lt;code&gt;docker-compose.yml&lt;/code&gt; that I&amp;#8217;ve written and they can run the same on their machine with the same results almost guaranteed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So, I use Docker Compose all the time. And soon I have a &lt;a href=&#34;https://qconlondon.com/london2020/workshop/kafka&#34;&gt;workshop to run&lt;/a&gt; which is exciting but daunting as now I have fifty people to coach through using Docker on their laptops. Laptops which are guaranteed not to all be the lovely piece of 15&#34; 32GB MacBook Pro hardware that Confluent equip their staff with. Instead there&amp;#8217;ll also be Linux (fine but figure it out yourself), and Windows. Ah, Windows. And not only Windows, but often corporate laptops running Windows with the inevitable security provisions in place to mean that they&amp;#8217;re bugger all use for running anything other than MS Excel—and definitely not Docker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What to do? Well, Cloud. Cloud is always the answer, if you ask the right question. And here I feel Cloud &lt;strong&gt;should&lt;/strong&gt; be the answer. Can&amp;#8217;t I provision a bunch of containers up in the Cloud that people can then connect to simply from their laptops, and all they need then is a SSH client?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But here&amp;#8217;s the rub:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I build all my material in Docker Compose, locally, on my laptop. Docker is &lt;em&gt;perfect&lt;/em&gt; for that. &lt;strong&gt;I don&amp;#8217;t want to build something twice&lt;/strong&gt;. I realise there&amp;#8217;s &lt;em&gt;Terraform and chef and ansible and puppet and kerplunk and uno and a bunch of others tools that I could use and only some of which I&amp;#8217;ve made up&lt;/em&gt;. But the moment I start building something with them, I am now maintaining two code bases. One locally to run Docker Compose on my laptop, one in &lt;code&gt;&amp;lt;other tool&amp;gt;&lt;/code&gt; for spinning up the stack in the Cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So join me on this adventure, as I figure out how to take this Docker Compose which runs beautifully on my laptop, and get it to run in Amazon&amp;#8217;s Elastic Container Service (ECS). What&amp;#8217;s more, at the end of it all, it still runs on my laptop too!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_ecs_wossat&#34;&gt;ECS, wossat?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html&#34;&gt;Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service that makes it easy to run, stop, and manage Docker containers on a cluster.&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sounds fancy, and it probably is. I&amp;#8217;m going to bastardise it and abuse it and get it to not really do what it was intended for, but pretty much works at doing anyway. Because in amongst the ECS functionality is this little gem: &lt;a href=&#34;https://aws.amazon.com/about-aws/whats-new/2018/06/amazon-ecs-cli-supports-docker-compose-version-3/&#34;&gt;Amazon ECS CLI Supports Docker Compose Version 3&lt;/a&gt;. By using the provided command-line tool, you can use an existing Docker Compose file and have ECS run it for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;ECS takes Docker images and runs and orchestrates them for you (i.e. makes sure stuff is running in the place and quantity that you want and manages that process). It can run the Docker containers on an EC2 instance that you provision and can access, or it can run them on &lt;a href=&#34;https://aws.amazon.com/fargate/&#34;&gt;Fargate&lt;/a&gt;. I&amp;#8217;m using EC2; my spidey-sense tells me that what I&amp;#8217;m trying to do only just works with EC2 and almost certainly wouldn&amp;#8217;t with Fargate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Within ECS you provision a &lt;strong&gt;Cluster&lt;/strong&gt;, which has one or more &lt;strong&gt;Container instances&lt;/strong&gt; (such as an EC2 machine) on which stuff runs. The stuff that runs is called &lt;strong&gt;Tasks&lt;/strong&gt;, and these are translated from &lt;strong&gt;Task Definitions&lt;/strong&gt;. The secret-sauce that we have here is that ECS can take a Docker Compose file and translate it into task definitions, which it then runs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/02/ecs01.png&#34; alt=&#34;ecs01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How does this help my workshop provisioning? Because from my Docker Compose I can provision numerous instances of it executing in the Cloud :) One Container Instance (EC2 in this case) per Cluster means that all of the Docker containers of the task will end up on the same EC2 instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/02/ecs02.png&#34; alt=&#34;ecs02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Users can then SSH into the instance of a given cluster and will find that the full set of containers is running within that host.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_getting_started_with_ecs&#34;&gt;Getting started with ECS&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Make sure you&amp;#8217;ve got both the &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html&#34;&gt;AWS CLI&lt;/a&gt; and the &lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html&#34;&gt;ECS CLI&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
Whilst you can manage ECS using the AWS CLI, there is some magic stuff in the ECS CLI that isn&amp;#8217;t in the AWS CLI 🤪
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You&amp;#8217;ll need the access key and secret key for your AWS account. Run &lt;code&gt;aws2 configure&lt;/code&gt; to set this up in the AWS CLI, and then run this to configure the ECS CLI:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ecs-cli configure profile --access-key XXXXXX --secret-key YYYYY&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Since we&amp;#8217;re using EC2 on which to run these Docker containers, we&amp;#8217;ll probably want to SSH onto the machine to have a poke around and see what&amp;#8217;s what. For that, we&amp;#8217;ll need an SSH keypair. Let&amp;#8217;s create one now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ aws2 ec2 create-key-pair --key-name rmoff-qcon-ldn-workshop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You&amp;#8217;ll get back the private key - keep this safe and don&amp;#8217;t share it with anyone. Note that there are &lt;code&gt;\n&lt;/code&gt; control characters that you&amp;#8217;ll need to convert into actual line breaks when you write this as a private key file to use with SSH.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;KeyFingerprint&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;72:1a:c9:51:f4:de:7a:3f:c5:f3:90:c4:c9:a2:44:a2:1f:2b:38:27&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;KeyMaterial&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAhu5Di4NJHlpFXrduVN7SMqz8xGN3g4uaVVfzVJ8lYGjGg5F+yObrBlcvrrcG\nZd14KQt8+zANB2afLWczqhdD4ccHrHzoK0zwXJXmUklYawJ5ScP4EvkqmFyNfXyAmi7sELC2ND9e\nI5eheU1FweYyDSea3B8IGgA+QWyVY5VEHfo5vZq9FRDkitczM2vG0K331mlw7HvjKem2CjYjw4Pp\na8d+ie7+m1okBs0uXuX0CWJ0Fw5AtBeKcb3fYkhT45fem2FXxDP3EUT6BDNyUL1hmR3h9nA3dCWi\niRdv9dmUYt81yWtqNBm+4IwpM7YRQIXKsvTXgm5VNikNXmhh+UjDqwIDAQABAoIBAEG5f5dOjOhH\nCnFXolue6f6bOsiits2Ry8x0eeenWbp7bu8ZiQttR+Afye8t4eTumyBLI0brof0P5Mtl8MmSaZNp\nsng3o5Or94zxy24bogEGBHSFC6qaSkBLHPSaF76CyqRan3YVw9JMgvAmTqtjaM/1kb5VM0oPAkQ2\nExKd279Js+wHakpvzsP3IrUI61XQl0H3A7CPTOZOkyOHZ2G9jgsAbUD4vRyDCcIoSbkiwO2ePFMP\nqfyt5pke4OeXYCP8ONt7msVIcJRqL1TaMEk7TewQk2Chi2mSHufiDRZ5KtaxP1itLRvNrtSWilCt\nxEjCOxtheCjv8rkuLtjdT2SqZ+ECgYEA1MPyMyumQSGMVN9m8r++uq11JhkEGrg9/PWy2mgIt8H5\n+p6RiMXJinL9fcHahnDoDNWdGTuCOzxVsKH9csbS/JUV8eWrtGuGT1C+lme6NLPgzCv+3zhb80bT\nhFK9ImXVt5Njx1fbBa9beyg2ttkr40vpCnk+Nq2sJk4nyotyAHsCgYEAollboY/XGQIRoR2UL7Z6\nOpC2uRANw6K2h4cvNoTUSDeUhzRApXNoTw1wiKyIuqZqE5aCw6DG39xK76CjWbIV4QpjgHx4er5b\nn1yF7EhAuvJCCZmMuu8ilzmYx+gv8hkKLq8uYQ3csMDw61GPuIeuTNFSOuWhKXhvG/NLGk3eGpEC\ngYEAj0O1tXEBzL9rP8cCChjEs+ySgmm70sYWr1s96ES/AgTybygQtPkBYWFWgTRkEby689FurAvf\nAEX7KSmagIuSjBNTKIPO33i7gnLLMnl773rjtnc1clb/y0r4qBQSWLQbeTYcrKDi0Own/ECyvuJy\n4+U8cRn8o1LEJTLhJkhJJjsCgYAVdSYNRouxfHqEBvrNC5tAHlxoPVz0XI8vfoiY9hlwqhfxftCE\njapduHMFPXic4t3mVOBXpupiMCWfYmX0tvr5UXwxQUJTRtGpUHtK7YnQq7BawHa/RlgWEMDGu0OL\nBhA4d2Lz5PckTXwKPi92vkglUw1BR5RzfL2CvjdQ9LXEYQKBgQCPzAEFVWR4nRKuXwGAvbpeksKj\ncJyPNonQXt6kMsDrErX5hfG8RDYtoQE0wRraOv3pnFDeeBJ1fdodYdXqVTq16Q55c7t4qyiB8d/I\nl6lhT0pYMPYPgZkF8PRjsbgHGcECz04FYEzE0DGxm+aX0KKY4p41X8qWDstM/wNc+MiZPw==\n-----END RSA PRIVATE KEY-----&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;KeyName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rmoff-qcon-ldn-workshop&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;KeyPairId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;key-02cde9bafdf2762c9&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now let&amp;#8217;s provision some tin on which our containers can run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ecs-cli up --cluster qcon-ldn-workshop &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             --keypair rmoff-qcon-ldn-workshop &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             --capability-iam &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             --instance-type m5.xlarge &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             --port &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             --tags &lt;span style=&#34;color:#19177c&#34;&gt;owner&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;rmoff,workshop&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;qcon_london,deleteafter&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;20200305&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             --launch-type EC2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
Choose your instance type carefully - initially, I just picked one that sounded good and ended up with &lt;code&gt;a1.xlarge&lt;/code&gt;. Unfortunately for me this has an ARM-based processor and some of the Docker images that I was using wouldn&amp;#8217;t work on this architecture (they error with &lt;code&gt;STOPPED Reason: CannotPullContainerError: no matching manifest for linux/arm64/v8 in the manifest list entries&lt;/code&gt;)
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This ECS CLI command does two things:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create an &lt;em&gt;ECS Cluster&lt;/em&gt; - a logical thing into which we&amp;#8217;ll deploy and manage our Docker containers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create one or more &lt;em&gt;Container instances&lt;/em&gt; — the EC2 boxes on which the Docker containers will run&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;These are provisioned via a CloudFormation stack - comprising EC2 instance(s), VPCs, Security Groups, Internet Gateways and all the other stuff that makes AWS tick&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0001&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Using recommended Amazon Linux &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; AMI with ECS Agent &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;.36.1 and Docker version &lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt;.09.9-ce
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0002&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Created cluster                               &lt;span style=&#34;color:#19177c&#34;&gt;cluster&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;qcon-ldn-workshop &lt;span style=&#34;color:#19177c&#34;&gt;region&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;us-east-1
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0004&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Waiting &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; your cluster resources to be created...
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0004&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Cloudformation stack status                   &lt;span style=&#34;color:#19177c&#34;&gt;stackStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;CREATE_IN_PROGRESS
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0066&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Cloudformation stack status                   &lt;span style=&#34;color:#19177c&#34;&gt;stackStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;CREATE_IN_PROGRESS
VPC created: vpc-02f6b2c8501a92f47
Security Group created: sg-0385e8d8893e00cf3
Subnet created: subnet-0a2c391d4ffdefbb0
Subnet created: subnet-06c2dd5442d8a89c5
Cluster creation succeeded.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This will take a few minutes but after which you can see for yourself the results from the AWS CLI:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ aws2 ecs list-clusters|jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;clusterArns&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;arn:aws:ecs:us-east-1:523370736235:cluster/qcon-ldn-workshop&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;

$ aws2 cloudformation list-stacks |jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;StackSummaries&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;StackId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;arn:aws:cloudformation:us-east-1:523370736235:stack/amazon-ecs-cli-setup-qcon-ldn-workshop/7bfde660-4d24-11ea-8356-0a6641f83659&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;StackName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;amazon-ecs-cli-setup-qcon-ldn-workshop&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;TemplateDescription&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AWS CloudFormation template to create resources required to run tasks on an ECS cluster.&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;CreationTime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2020-02-11T23:16:08.477000+00:00&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;StackStatus&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;CREATE_COMPLETE&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;DriftInformation&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;StackDriftStatus&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;NOT_CHECKED&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So we&amp;#8217;ve now built ourselves an ECS cluster, ready to run our Docker containers—the definitions for which come from a Docker Compose&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_running_docker_compose_on_ecs&#34;&gt;Running Docker Compose on ECS&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s start with a simple example, taken from the ECS CLI docs. Create a new folder (e.g. &lt;code&gt;ecs-compose-test&lt;/code&gt;) and a &lt;code&gt;docker-compose.yml&lt;/code&gt; file within it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;version:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;services:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;web:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;image:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;amazon/amazon-ecs-sample&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;ports:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;80:80&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For fun, run it locally first just to show that it works:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker-compose up
Creating network &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ecs-compose-test_default&amp;#34;&lt;/span&gt; with the default driver
Pulling web &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;amazon/amazon-ecs-sample:&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;...
latest: Pulling from amazon/amazon-ecs-sample
72d97abdfae3: Pull &lt;span style=&#34;color:#008000&#34;&gt;complete&lt;/span&gt;
9db40311d082: Pull &lt;span style=&#34;color:#008000&#34;&gt;complete&lt;/span&gt;
991f1d4df942: Pull &lt;span style=&#34;color:#008000&#34;&gt;complete&lt;/span&gt;
9fd8189a392d: Pull &lt;span style=&#34;color:#008000&#34;&gt;complete&lt;/span&gt;
Digest: sha256:36c7b282abd0186e01419f2e58743e1bf635808231049bbc9d77e59e3a8e4914
Status: Downloaded newer image &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; amazon/amazon-ecs-sample:latest
Creating ecs-compose-test_web_1 ... &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;done&lt;/span&gt;
Attaching to ecs-compose-test_web_1
web_1  | AH00558: apache2: Could not reliably determine the server&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;s fully qualified domain name, using 192.168.32.2. Set the &amp;#39;&lt;/span&gt;ServerName&lt;span style=&#34;&#34;&gt;&amp;#39;&lt;/span&gt; directive globally to suppress this message&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Go to &lt;code&gt;localhost&lt;/code&gt; in your web browser and 🎉&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/02/ecs-compose-test_local.png&#34; alt=&#34;ecs compose test local&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now let&amp;#8217;s run it in the cloud. Whilst you can just use &lt;code&gt;ecs-cli compose up&lt;/code&gt; we&amp;#8217;re going to run it in two stages here to understand what&amp;#8217;s going on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;ecs-cli compose create&lt;/code&gt; to parse the Docker Compose into an ECS &lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html&#34;&gt;&lt;em&gt;task definition&lt;/em&gt;&lt;/a&gt;. This doesn&amp;#8217;t execute anything yet.&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ecs-cli compose create
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0001&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Using ECS task definition                     &lt;span style=&#34;color:#19177c&#34;&gt;TaskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ecs-compose-test:1&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This has created a task definition which we can inspect:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ aws2 ecs list-task-definitions|jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;taskDefinitionArns&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;arn:aws:ecs:us-east-1:523370736235:task-definition/ecs-compose-test:1&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;

$ aws2 ecs describe-task-definition &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  --task-definition arn:aws:ecs:us-east-1:523370736235:task-definition/ecs-compose-test:1
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;taskDefinition&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;taskDefinitionArn&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;arn:aws:ecs:us-east-1:523370736235:task-definition/ecs-compose-test:1&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;containerDefinitions&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;
            &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;web&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;amazon/amazon-ecs-sample&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cpu&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,
                &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;memory&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;512&lt;/span&gt;,
                &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;links&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[]&lt;/span&gt;,
                &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;portMappings&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;
                    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;containerPort&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;80&lt;/span&gt;,
                        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;hostPort&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;80&lt;/span&gt;,
                        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;
                    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;,
…                &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So it&amp;#8217;s taken the Docker Compose and translated it into a &lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html&#34;&gt;task definition&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With this task definition created, we can now set it to run on the ECS cluster that we created above:&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ecs-cli compose start --cluster qcon-ldn-workshop
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0001&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Using ECS task definition                     &lt;span style=&#34;color:#19177c&#34;&gt;TaskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ecs-compose-test:1&amp;#34;&lt;/span&gt;
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0001&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Starting container...                         &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;5c1e40ca-88c2-4463-949e-91c68e103f3f/web
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0001&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Describe ECS container status                 &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;5c1e40ca-88c2-4463-949e-91c68e103f3f/web &lt;span style=&#34;color:#19177c&#34;&gt;desiredStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;lastStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;PENDING &lt;span style=&#34;color:#19177c&#34;&gt;taskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ecs-compose-test:1&amp;#34;&lt;/span&gt;
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0014&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Started container...                          &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;5c1e40ca-88c2-4463-949e-91c68e103f3f/web &lt;span style=&#34;color:#19177c&#34;&gt;desiredStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;lastStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;taskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ecs-compose-test:1&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Notice here that it says &lt;strong&gt;&lt;code&gt;desiredStatus&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;lastStatus&lt;/code&gt;&lt;/strong&gt; - that&amp;#8217;s the &lt;em&gt;orchestration&lt;/em&gt; at work, because ECS isn&amp;#8217;t just going to fire &amp;amp; forget. It knows what &lt;em&gt;should&lt;/em&gt; be running, and it&amp;#8217;ll keep an eye on things to make sure that they are.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s check that the test worked. When we created the ECS cluster and associated EC2 instance above we specified &lt;code&gt;--port 22&lt;/code&gt; to be opened up on the firewall for inbound connections. So that we can check the test web site is working we need to access port 80 on the EC2 instance, so we&amp;#8217;ll use the wonderful SSH port forwarding function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ssh  -L &lt;span style=&#34;color:#666&#34;&gt;8080&lt;/span&gt;:localhost:80 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;     -i rmoff-qcon-ldn-workshop.rsa &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;     ec2-user@34.201.131.235&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/02/ecs-compose-test_ecs.png&#34; alt=&#34;ecs compose test ecs&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_how_did_you_get_that_ec2_ip_address&#34;&gt;How did you get that EC2 IP address?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can either click through the ECS web UI to get to the EC2 instance, or you can navigate the AWS CLI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Find out the container instances that exist for the ECS cluster:&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ aws2 ecs list-container-instances --cluster qcon-ldn-workshop|jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;containerInstanceArns&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;arn:aws:ecs:us-east-1:523370736235:container-instance/bfedb3c3-ace9-4476-a119-d234ce59dfda&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find details of said container instance:&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ aws2 ecs describe-container-instances &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    --container-instances arn:aws:ecs:us-east-1:523370736235:container-instance/bfedb3c3-ace9-4476-a119-d234ce59dfda &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    --cluster qcon-ldn-workshop|jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;containerInstances&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;containerInstanceArn&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;arn:aws:ecs:us-east-1:523370736235:container-instance/bfedb3c3-ace9-4476-a119-d234ce59dfda&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ec2InstanceId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;i-0b59c0f85fe1eea7c&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;,
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;versionInfo&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;agentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1.36.1&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;agentHash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;f199a183&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;dockerVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;DockerVersion: 18.09.9-ce&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;remainingResources&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;
        &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;CPU&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;INTEGER&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;doubleValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,
          &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;longValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,
          &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;integerValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;4096&lt;/span&gt;
        &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find IP of said EC2 instance:&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ aws2 ec2 describe-instances &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    --filter &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Name=instance-id,Values=i-0b59c0f85fe1eea7c&amp;#34;&lt;/span&gt; |&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.Reservations[].Instances[].PublicIpAddress&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;34.201.131.235&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Or if you want to be a bit fancy about it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ aws2 ecs list-container-instances --cluster qcon-ldn-workshop|jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.containerInstanceArns[]&amp;#39;&lt;/span&gt;|&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    xargs -IFOO aws2 ecs describe-container-instances --container-instances FOO &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;        --cluster qcon-ldn-workshop|&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.containerInstances[].ec2InstanceId&amp;#39;&lt;/span&gt;|&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    xargs -IFOO aws2 ec2 describe-instances --filter &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Name=instance-id,Values=FOO&amp;#34;&lt;/span&gt; | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.Reservations[].Instances[].PublicIpAddress&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;34.201.131.235&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_a_poke_under_the_covers_can_we&#34;&gt;A poke under the covers? Can we?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With all this magical orchestration, it&amp;#8217;s possible to forget about where this stuff runs. But if you SSH onto the EC2 &lt;code&gt;container instance&lt;/code&gt; you&amp;#8217;ll find it&amp;#8217;s &#34;just&#34; a box running Docker - but with some clever ECS bits to make it all work:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ssh  -i rmoff-qcon-ldn-workshop.rsa ec2-user@34.201.131.235
Last login: Tue Feb &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;23&lt;/span&gt;:48:52 &lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt; from foo.bar.somewhere

   __|  __|  __|
   _|  &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;   &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\_&lt;/span&gt;_ &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\ &lt;/span&gt;  Amazon Linux &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;ECS Optimized&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
 ____|&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\_&lt;/span&gt;__|____/

For documentation, visit http://aws.amazon.com/documentation/ecs
&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; package&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; needed &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; security, out of &lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt; available
Run &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;sudo yum update&amp;#34;&lt;/span&gt; to apply all updates.
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;ec2-user@ip-10-0-0-135 ~&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;$ &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can use &lt;code&gt;docker ps&lt;/code&gt; to see all containers that are running:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;ec2-user@ip-10-0-0-135 ~&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;$ docker ps
CONTAINER ID        IMAGE                            COMMAND                  CREATED             STATUS                       PORTS                NAMES
2a93fd8eb058        amazon/amazon-ecs-sample         &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/usr/sbin/apache2 -…&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;33&lt;/span&gt; minutes ago      Up &lt;span style=&#34;color:#666&#34;&gt;33&lt;/span&gt; minutes                &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:80-&amp;gt;80/tcp   ecs-ecs-compose-test-1-web-dc899799ec95ecf42100
5f4c1d77376c        amazon/amazon-ecs-agent:latest   &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/agent&amp;#34;&lt;/span&gt;                 About an hour ago   Up About an hour &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;healthy&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;                        ecs-agent&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And if things aren&amp;#8217;t working as you want them to, you can inspect the logs for each container:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;ec2-user@ip-10-0-0-135 ~&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;$ docker logs -f ecs-ecs-compose-test-1-web-dc899799ec95ecf42100
AH00558: apache2: Could not reliably determine the server&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;s fully qualified domain name, using 172.17.0.2. Set the &amp;#39;&lt;/span&gt;ServerName&lt;span style=&#34;&#34;&gt;&amp;#39;&lt;/span&gt; directive globally to suppress this message&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can even install your own stuff, not that you should except for helping with troubleshooting early stages and figuring out what&amp;#8217;s going on&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo yum install -y htop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/02/htop.png&#34; alt=&#34;htop&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lets_run_some_stuff_for_real_now&#34;&gt;Let&amp;#8217;s run some stuff for real now!&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;OK, let&amp;#8217;s. You can find the Docker Compose that I had built &lt;a href=&#34;https://github.com/confluentinc/demo-scene/blob/streaming-jan2020-update/build-a-streaming-pipeline/docker-compose.yml&#34;&gt;here&lt;/a&gt;, in its initial incarnation. It spins up a stack made up of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Zookeeper&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kafka broker&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Schema Registry&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kafka Connect worker&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ksqlDB server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mySQL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Elasticsearch&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each of the distributed components (Kafka, etc) just have a single node—this is a sandbox, after all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First let&amp;#8217;s see it succeed, and then let&amp;#8217;s understand what that journey looked like. Spin the stack up using my &lt;a href=&#34;https://github.com/confluentinc/demo-scene/blob/streaming-jan2020-update/build-a-streaming-pipeline/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#008000&#34;&gt;cd&lt;/span&gt; ~/git/demo-scene/build-a-streaming-pipeline
$ ecs-cli compose up --cluster qcon-ldn-workshop
WARN&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Skipping unsupported YAML option &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; service...  option &lt;span style=&#34;color:#19177c&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;container_name service &lt;span style=&#34;color:#19177c&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;elasticsearch
WARN&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Skipping unsupported YAML option &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; service...  option &lt;span style=&#34;color:#19177c&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;container_name service &lt;span style=&#34;color:#19177c&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;kafka
WARN&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Skipping unsupported YAML option &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; service...  option &lt;span style=&#34;color:#19177c&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;depends_on service &lt;span style=&#34;color:#19177c&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;kafka
WARN&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Skipping unsupported YAML option &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; service...  option &lt;span style=&#34;color:#19177c&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;container_name service &lt;span style=&#34;color:#19177c&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;kafka-connect-01
…
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0003&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Using ECS task definition                     &lt;span style=&#34;color:#19177c&#34;&gt;TaskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;build-a-streaming-pipeline:50&amp;#34;&lt;/span&gt;
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0004&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Starting container...                         &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/elasticsearch
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0004&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Starting container...                         &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/kafka
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0004&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Starting container...                         &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/kafka-connect-01
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0004&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Starting container...                         &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/kafkacat
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0004&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Starting container...                         &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/kibana
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0004&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Starting container...                         &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/ksqldb
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0004&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Starting container...                         &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/mysql
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0004&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Starting container...                         &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/schema-registry
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0004&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Starting container...                         &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/zookeeper
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0004&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Describe ECS container status                 &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/elasticsearch &lt;span style=&#34;color:#19177c&#34;&gt;desiredStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;lastStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;PENDING &lt;span style=&#34;color:#19177c&#34;&gt;taskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;build-a-streaming-pipeline:50&amp;#34;&lt;/span&gt;
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0004&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Describe ECS container status                 &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/kafka-connect-01 &lt;span style=&#34;color:#19177c&#34;&gt;desiredStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;lastStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;PENDING &lt;span style=&#34;color:#19177c&#34;&gt;taskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;build-a-streaming-pipeline:50&amp;#34;&lt;/span&gt;
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0004&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Describe ECS container status                 &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/schema-registry &lt;span style=&#34;color:#19177c&#34;&gt;desiredStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;lastStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;PENDING &lt;span style=&#34;color:#19177c&#34;&gt;taskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;build-a-streaming-pipeline:50&amp;#34;&lt;/span&gt;
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0004&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Describe ECS container status                 &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/kafka &lt;span style=&#34;color:#19177c&#34;&gt;desiredStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;lastStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;PENDING &lt;span style=&#34;color:#19177c&#34;&gt;taskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;build-a-streaming-pipeline:50&amp;#34;&lt;/span&gt;
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0004&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Describe ECS container status                 &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/kafkacat &lt;span style=&#34;color:#19177c&#34;&gt;desiredStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;lastStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;PENDING &lt;span style=&#34;color:#19177c&#34;&gt;taskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;build-a-streaming-pipeline:50&amp;#34;&lt;/span&gt;
…
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0095&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Started container...                          &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/elasticsearch &lt;span style=&#34;color:#19177c&#34;&gt;desiredStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;lastStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;taskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;build-a-streaming-pipeline:50&amp;#34;&lt;/span&gt;
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0095&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Started container...                          &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/kafka-connect-01 &lt;span style=&#34;color:#19177c&#34;&gt;desiredStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;lastStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;taskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;build-a-streaming-pipeline:50&amp;#34;&lt;/span&gt;
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0095&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Started container...                          &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/schema-registry &lt;span style=&#34;color:#19177c&#34;&gt;desiredStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;lastStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;taskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;build-a-streaming-pipeline:50&amp;#34;&lt;/span&gt;
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0095&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Started container...                          &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/kafka &lt;span style=&#34;color:#19177c&#34;&gt;desiredStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;lastStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;taskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;build-a-streaming-pipeline:50&amp;#34;&lt;/span&gt;
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0095&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Started container...                          &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/kafkacat &lt;span style=&#34;color:#19177c&#34;&gt;desiredStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;lastStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;taskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;build-a-streaming-pipeline:50&amp;#34;&lt;/span&gt;
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0095&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Started container...                          &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/kibana &lt;span style=&#34;color:#19177c&#34;&gt;desiredStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;lastStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;taskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;build-a-streaming-pipeline:50&amp;#34;&lt;/span&gt;
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0095&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Started container...                          &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/ksqldb &lt;span style=&#34;color:#19177c&#34;&gt;desiredStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;lastStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;taskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;build-a-streaming-pipeline:50&amp;#34;&lt;/span&gt;
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0095&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Started container...                          &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/mysql &lt;span style=&#34;color:#19177c&#34;&gt;desiredStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;lastStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;taskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;build-a-streaming-pipeline:50&amp;#34;&lt;/span&gt;
INFO&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0095&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Started container...                          &lt;span style=&#34;color:#19177c&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;345ebb39-a936-41e6-b3bc-fb8911fff187/zookeeper &lt;span style=&#34;color:#19177c&#34;&gt;desiredStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;lastStatus&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RUNNING &lt;span style=&#34;color:#19177c&#34;&gt;taskDefinition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;build-a-streaming-pipeline:50&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now if I SSH onto the EC2 host I can see the containers running:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;ec2-user@ip-10-0-0-135 ~&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;$ docker ps
CONTAINER ID        IMAGE                                                 COMMAND                   CREATED             STATUS                            PORTS                               NAMES
15de955540df        rmoff/ksqldb-server:master-20200210-12f4317           &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/usr/bin/docker/run&amp;#34;&lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; minutes ago       Up &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; minutes                      &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:8088-&amp;gt;8088/tcp              ecs-build-a-streaming-pipeline-50-ksqldb-f6dfb1ede8fcc0e7c901
592c1798425e        confluentinc/cp-kafka-connect:5.4.0                   &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;bash -c &amp;#39;echo \&amp;#34;Inst…&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; minutes ago       Up &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; minutes &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;health: starting&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:8083-&amp;gt;8083/tcp, &lt;span style=&#34;color:#666&#34;&gt;9092&lt;/span&gt;/tcp    ecs-build-a-streaming-pipeline-50-kafka-connect-01-ae8afda6bde3e2a66800
a90ff81d290c        edenhill/kafkacat:1.5.0                               &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/bin/sh -c &amp;#39;apk add…&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; minutes ago       Up &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; minutes                                                          ecs-build-a-streaming-pipeline-50-kafkacat-f891f4a4fecac5d77400
ebe6a4917748        docker.elastic.co/kibana/kibana:7.5.0                 &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/usr/local/bin/dumb…&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; minutes ago       Up &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; minutes                      &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:5601-&amp;gt;5601/tcp              ecs-build-a-streaming-pipeline-50-kibana-80c8e09e9a8d92841800
0939c0a63a8d        confluentinc/cp-schema-registry:5.4.0                 &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/etc/confluent/dock…&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; minutes ago       Up &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; minutes                      &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:8081-&amp;gt;8081/tcp              ecs-build-a-streaming-pipeline-50-schema-registry-c298d3f3a3ead6ed4700
6097e70ca417        confluentinc/cp-enterprise-kafka:5.4.0                &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;bash -c &amp;#39;echo &amp;#39;127.…&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; minutes ago       Up &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; minutes                      &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:9092-&amp;gt;9092/tcp              ecs-build-a-streaming-pipeline-50-kafka-b6a9a5dfa29f80ce5e00
42395ba12925        docker.elastic.co/elasticsearch/elasticsearch:7.5.0   &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/usr/local/bin/dock…&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; minutes ago       Up &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; minutes                      &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:9200-&amp;gt;9200/tcp, &lt;span style=&#34;color:#666&#34;&gt;9300&lt;/span&gt;/tcp    ecs-build-a-streaming-pipeline-50-elasticsearch-9ab3c6a4ef92d8b00300
8cabb0de9648        confluentinc/cp-zookeeper:5.4.0                       &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/etc/confluent/dock…&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; minutes ago       Up &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; minutes                      &lt;span style=&#34;color:#666&#34;&gt;2181&lt;/span&gt;/tcp, &lt;span style=&#34;color:#666&#34;&gt;2888&lt;/span&gt;/tcp, &lt;span style=&#34;color:#666&#34;&gt;3888&lt;/span&gt;/tcp        ecs-build-a-streaming-pipeline-50-zookeeper-b8c2c1ce9ae48b821500
75279ad553bf        mysql:8.0                                             &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;docker-entrypoint.s…&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; minutes ago       Up &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; minutes                      &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:3306-&amp;gt;3306/tcp, &lt;span style=&#34;color:#666&#34;&gt;33060&lt;/span&gt;/tcp   ecs-build-a-streaming-pipeline-50-mysql-96f3c78287d1a6985b00
5f4c1d77376c        amazon/amazon-ecs-agent:latest                        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/agent&amp;#34;&lt;/span&gt;                  About an hour ago   Up About an hour &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;healthy&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;                                            ecs-agent
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;ec2-user@ip-10-0-0-135 ~&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and I can get the prompt up for ksqlDB, ready to go and &lt;a href=&#34;https://github.com/confluentinc/demo-scene/blob/master/build-a-streaming-pipeline/demo_build-a-streaming-pipeline.adoc&#34;&gt;build a streaming data pipeline&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker &lt;span style=&#34;color:#008000&#34;&gt;exec&lt;/span&gt; -it &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;docker ps|grep ksqldb|awk &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{print $11}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt; ksql http://localhost:8088

                  &lt;span style=&#34;color:#666&#34;&gt;===========================================&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;       _              _ ____  &lt;span style=&#34;color:#19177c&#34;&gt;____&lt;/span&gt;       &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;      | | _____  __ _| |  _ &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\|&lt;/span&gt; __ &lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;      | |/ / __|/ _&lt;span style=&#34;color:#ba2121&#34;&gt;`&lt;/span&gt; | | | | |  _ &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\ &lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;      |   &amp;lt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\_&lt;/span&gt;_ &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;_| | | |_| | |_&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; |     &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;      |_|&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\_\_&lt;/span&gt;__/&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\_&lt;/span&gt;_, |_|____/|____/      &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;                   |_|                   &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;  Event Streaming Database purpose-built &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; stream processing &lt;span style=&#34;color:#19177c&#34;&gt;apps&lt;/span&gt;       &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;===========================================&lt;/span&gt;

Copyright &lt;span style=&#34;color:#666&#34;&gt;2017&lt;/span&gt;-2019 Confluent Inc.

CLI v6.0.0-SNAPSHOT, Server v6.0.0-SNAPSHOT located at http://localhost:8088

Having trouble? Type &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;help&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt;-insensitive&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; a rundown of how things work!

ksql&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_what_needed_to_change_from_docker_compose_on_the_mac_to_docker_compose_running_on_ecs&#34;&gt;What needed to change from Docker Compose on the Mac to Docker Compose running on ECS?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;😈👹 The devil is always in the detail 👹😈&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_networking_and_hostnames&#34;&gt;Networking and hostnames&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Under Docker Compose I specify a &lt;code&gt;container_name&lt;/code&gt; which the container takes as its hostname, and then each container can address others, and itself. So &lt;code&gt;kafka&lt;/code&gt; can reach &lt;code&gt;zookeeper&lt;/code&gt;, but &lt;code&gt;kafka&lt;/code&gt; can also reach &lt;code&gt;kafka&lt;/code&gt; too (which is important for how the broker operates and communicates). This is standard &lt;a href=&#34;https://docs.docker.com/compose/networking/&#34;&gt;Docker Compose networking&lt;/a&gt;, and took a bit of figuring out with ECS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are two important changes that I had to make.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_inter_container_communication&#34;&gt;Inter-container communication&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Any container that you want to be able to reach another, you must define with a &lt;code&gt;link:&lt;/code&gt;. So&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;kafka:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;image:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;confluentinc/cp-enterprise-kafka:&lt;span style=&#34;color:#666&#34;&gt;5.4.0&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;container_name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kafka&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;depends_on:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;zookeeper&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;becomes in an ECS-compatible Docker Compose (assuming the &lt;code&gt;kafka&lt;/code&gt; needs to reach &lt;code&gt;zookeeper&lt;/code&gt;, which it does):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;kafka:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;image:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;confluentinc/cp-enterprise-kafka:&lt;span style=&#34;color:#666&#34;&gt;5.4.0&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;container_name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kafka&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;depends_on:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;zookeeper&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;links:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;zookeeper&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Strictly speaking, you could use:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;kafka:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;image:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;confluentinc/cp-enterprise-kafka:&lt;span style=&#34;color:#666&#34;&gt;5.4.0&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;links:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;zookeeper&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Since ECS ignores &lt;code&gt;container_name&lt;/code&gt; and &lt;code&gt;depends_on&lt;/code&gt; (per the warnings shown in the &lt;code&gt;ecs-cli compose up&lt;/code&gt; above).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock important&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Important&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
It&amp;#8217;s worth restating this to be clear: any container that you want to be able to address another &lt;strong&gt;must&lt;/strong&gt; be defined in &lt;code&gt;links:&lt;/code&gt;. If it&amp;#8217;s not, it&amp;#8217;s not added to the &lt;code&gt;/etc/hosts&lt;/code&gt; file of the container when it&amp;#8217;s provisioned and trying to resolve it will fail.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_containers_cannot_resolve_their_own_hostname&#34;&gt;Containers cannot resolve their own hostname&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Containers cannot access themselves by their own hostname. Under Docker Compose a container with &lt;code&gt;container_name&lt;/code&gt; of &lt;code&gt;kafka&lt;/code&gt; would be able to use &lt;code&gt;kafka&lt;/code&gt; as a resolvable hostname (it would resolve to itself). With ECS this doesn&amp;#8217;t happen - you have to use &lt;code&gt;localhost&lt;/code&gt; if you want to loopback.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This causes a problem with Kafka because &lt;a href=&#34;https://rmoff.net/2018/08/02/kafka-listeners-explained/&#34;&gt;per standard listeners configuration&lt;/a&gt; you may have a listener configured using the &lt;strong&gt;hostname&lt;/strong&gt; (and not localhost).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;WARN &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;RequestSendThread &lt;span style=&#34;color:#19177c&#34;&gt;controllerId&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Controller &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&amp;#39;&lt;/span&gt;s connection to broker kafka:29092 &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;id: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; rack: null&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; was unsuccessful &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;kafka.controller.RequestSendThread&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
java.io.IOException: Connection to kafka:29092 &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;id: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; rack: null&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; failed.
        at org.apache.kafka.clients.NetworkClientUtils.awaitReady&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;NetworkClientUtils.java:71&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        at kafka.controller.RequestSendThread.brokerReady&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;ControllerChannelManager.scala:296&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        at kafka.controller.RequestSendThread.doWork&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;ControllerChannelManager.scala:250&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        at kafka.utils.ShutdownableThread.run&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;ShutdownableThread.scala:96&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
WARN &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;Controller &lt;span style=&#34;color:#19177c&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;targetBrokerId&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; Error connecting to node kafka:29092 &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;id: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; rack: null&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;org.apache.kafka.clients.NetworkClient&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
java.net.UnknownHostException: kafka
        at java.net.InetAddress.getAllByName0&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;InetAddress.java:1281&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        at java.net.InetAddress.getAllByName&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;InetAddress.java:1193&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        at java.net.InetAddress.getAllByName&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;InetAddress.java:1127&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Whilst it may be possible to jiggle the listener config to avoid this, I ended up hacking the hosts file to append an entry for the hostname. Why? This was preferable to butchering my existing config, since the driving force behind all of this exercise is to retain a Docker Compose which works locally, rather than to build something which is specialised for ECS alone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;kafka:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;image:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;confluentinc/cp-enterprise-kafka:&lt;span style=&#34;color:#666&#34;&gt;5.4.0&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;container_name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kafka&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;depends_on:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;zookeeper&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;links:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;zookeeper&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;…&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;command:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bash&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-c&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121;font-style:italic&#34;&gt;|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121;font-style:italic&#34;&gt;        echo &amp;#39;127.0.0.1 kafka&amp;#39; &amp;gt;&amp;gt; /etc/hosts&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;/etc/confluent/docker/run&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;sleep&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;infinity&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This adds the entry to the hosts file and then invokes the container&amp;#8217;s default startup routine. You can find out what a container does at launch time by inspecting its Docker image:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker inspect --format&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{{.Config.Cmd}}&amp;#39;&lt;/span&gt; confluentinc/cp-enterprise-kafka:5.4.0
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;/etc/confluent/docker/run&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
$ docker inspect --format&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{{.Config.Entrypoint}}&amp;#39;&lt;/span&gt; confluentinc/cp-enterprise-kafka:5.4.0
&lt;span style=&#34;color:#666&#34;&gt;[]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_security_groups&#34;&gt;Security Groups&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Not Docker Compose differences as such, but important to note that &lt;code&gt;ecs-cli up&lt;/code&gt; lets you specify just a single port to open with &lt;code&gt;--port&lt;/code&gt;. If you want to access other ports exposed by the Docker containers you need to either use SSH port forwarding (as shown above), or amend the EC2 security group to open up the required port. Here&amp;#8217;s an example of doing that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;aws2 ec2 describe-security-groups --filters &lt;span style=&#34;color:#19177c&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;tag:workshop,Values&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;qcon_london |&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.SecurityGroups[].GroupId&amp;#39;&lt;/span&gt; | xargs -IFOO &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  aws2 ec2 authorize-security-group-ingress &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;        --group-id FOO &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;        --protocol tcp &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;        --port &lt;span style=&#34;color:#666&#34;&gt;5601&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;        --cidr &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0/0 | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This finds every security group that&amp;#8217;s tagged with &lt;code&gt;workshop:qcon_london&lt;/code&gt; and opens it up for inbound TCP traffic on port 5601 from any address.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_memory_allocation&#34;&gt;Memory allocation&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With Docker I just let the containers do what they want with my laptop&amp;#8217;s memory, and it all kinda works out. Since ECS is envisaged as a more large-scale environment than just my laptop, it requires you to give some consideration to your container&amp;#8217;s memory requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you don&amp;#8217;t, you&amp;#8217;ll probably find that stuff starts up, and then dies. If you take a look at &lt;code&gt;/var/log/messages&lt;/code&gt; you&amp;#8217;ll see this kind of fun going on:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Feb &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;:37:38 ip-10-0-1-43 kernel: Memory cgroup out of memory: Kill process &lt;span style=&#34;color:#666&#34;&gt;10103&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;java&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; score &lt;span style=&#34;color:#666&#34;&gt;1018&lt;/span&gt; or sacrifice child
Feb &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;:37:38 ip-10-0-1-43 kernel: java invoked oom-killer: &lt;span style=&#34;color:#19177c&#34;&gt;gfp_mask&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;0x14000c0&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;GFP_KERNEL&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;nodemask&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=(&lt;/span&gt;null&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;,  &lt;span style=&#34;color:#19177c&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;oom_score_adj&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;                                                                                                                                           &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt;/560&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
Feb &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;:37:38 ip-10-0-1-43 kernel: Killed process &lt;span style=&#34;color:#666&#34;&gt;10103&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;java&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; total-vm:1557648kB, anon-rss:521148kB, file-rss:11888kB, shmem-rss:0kB
Feb &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;:37:38 ip-10-0-1-43 kernel: oom_reaper: reaped process &lt;span style=&#34;color:#666&#34;&gt;10103&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;java&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;, now anon-rss:0kB, file-rss:0kB, shmem-rss:0kB&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I created a &lt;code&gt;ecs-params.yml&lt;/code&gt; file in the same folder as &lt;code&gt;docker-compose.yml&lt;/code&gt; and defined some memory allocations for each service. This was a rough guesstimate, and it seems to have worked so far…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;version:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;task_definition:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;services:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;elasticsearch:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;mem_limit:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;2g&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;kafka:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;mem_limit:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;2g&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;kafka-connect&lt;span style=&#34;color:#666&#34;&gt;-01&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;mem_limit:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;2g&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;kafkacat:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;mem_limit:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;1g&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;kibana:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;mem_limit:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;1g&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;ksqldb:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;mem_limit:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;2g&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;mysql:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;mem_limit:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;1g&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;schema-registry:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;mem_limit:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;1g&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;zookeeper:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;mem_limit:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;1g&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_elasticsearch&#34;&gt;Elasticsearch&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Elasticsearch needed a bit of fiddling with to get working. First up the server failed to start with this fairly common error:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;max virtual memory areas vm.max_map_count &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;65530&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; is too low, increase to at least &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;262144&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The interesting one about this is that it&amp;#8217;s usually fixed by setting a parameter on the &lt;em&gt;host machine&lt;/em&gt; - but with something ephemeral like ECS&#39; container instances that&amp;#8217;s less than practical. The answer was to tell Elasticsearch not to use that type of storage &lt;code&gt;node.store.allow_mmap: &#34;false&#34;&lt;/code&gt; (&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/master/index-modules-store.html&#34;&gt;ref&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The second issue was the server was simply getting killed by the OOM manager process (even with &lt;code&gt;ecs-params.yml&lt;/code&gt; defined). The last line in the log file before the process died was:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;server&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2020-02-11T11:08:00,969Z&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;INFO&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;component&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;o.e.x.m.p.NativeController&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cluster.name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;docker-cluster&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;node.name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;3cf8b25ae6b8&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Native controller process has stopped - no new native processes can be started&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cluster.uuid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;VnuiuD08QciN8JXo5AbDxg&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;node.id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;TkvmyUW0TiOGGmGRmSUtKw&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To fix this I modified my existing Docker Compose:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;elasticsearch:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;image:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;docker.elastic.co/elasticsearch/elasticsearch:&lt;span style=&#34;color:#666&#34;&gt;7.5.0&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;…&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;environment:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;xpack.security.enabled:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;ES_JAVA_OPTS:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;-Xms1g -Xmx1g&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;discovery.type:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;single-node&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To add in some &lt;code&gt;ulimits&lt;/code&gt; as well as the &lt;code&gt;node.store.allow_mmap&lt;/code&gt; config:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;elasticsearch:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;…&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;ulimits:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;nofile:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;soft:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;65535&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;hard:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;65535&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;memlock:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;soft:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;hard:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;environment:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;ES_JAVA_OPTS:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;-Xms1g -Xmx1g&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;xpack.security.enabled:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;discovery.type:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;single-node&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;node.store.allow_mmap:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_files&#34;&gt;Files&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;ve not even tried to work out how to mount an external file or folder into a container on ECS. For better or worse, I tend to embed stuff inline in &lt;code&gt;command&lt;/code&gt; section anyway, such as this to pre-create Elasticsearch dynamic mappings:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;elasticsearch:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;image:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;docker.elastic.co/elasticsearch/elasticsearch:&lt;span style=&#34;color:#666&#34;&gt;7.5.0&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;…&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;command:&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bash&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-c&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121;font-style:italic&#34;&gt;|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121;font-style:italic&#34;&gt;        # Start up Elasticsearch&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;/usr/local/bin/docker-entrypoint.sh&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;amp;&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;echo&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Waiting for Elasticsearch to start ⏳&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;while&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;$$(curl&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-s&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-o&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/dev/&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-w&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;%{http_code}&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;http://localhost:&lt;span style=&#34;color:#666&#34;&gt;9200&lt;/span&gt;/)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-ne&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;200&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;]&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;do&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;echo&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-e&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;$$(date)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34; Elasticsearch listener HTTP state: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;$$(curl&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-s&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-o&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/dev/&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-w&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;%{http_code}&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;http://localhost:&lt;span style=&#34;color:#666&#34;&gt;9200&lt;/span&gt;/)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34; (waiting for 200)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;sleep&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;done&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Create dynamic mapping&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;curl&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-s&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-XPUT&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;http://localhost:9200/_template/kafkaconnect/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-H&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-d&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;                  {
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;                    &amp;#34;template&amp;#34;: &amp;#34;*&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;                    &amp;#34;settings&amp;#34;: { &amp;#34;number_of_shards&amp;#34;: 1, &amp;#34;number_of_replicas&amp;#34;: 0 },
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;                    &amp;#34;mappings&amp;#34;: { &amp;#34;dynamic_templates&amp;#34;: [ { &amp;#34;dates&amp;#34;: { &amp;#34;match&amp;#34;: &amp;#34;*_TS&amp;#34;, &amp;#34;mapping&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;date&amp;#34; } } } ]  }
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;                  }&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Don&amp;#39;t die cos then the container stops 🤦‍♂️&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;sleep&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;infinity&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the case of some SQL that I needed to run on MySQL (and previously mounted externally) I ended up using a &lt;a href=&#34;http://tldp.org/LDP/abs/html/here-docs.html&#34;&gt;here-doc&lt;/a&gt;, which is not so pretty but it works:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;mysql:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# *-----------------------------*&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# To connect to the DB: &lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#   docker exec -it mysql bash -c &amp;#39;mysql -u root -p$MYSQL_ROOT_PASSWORD&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# or&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#   docker exec -it mysql bash -c &amp;#39;mysql -u $MYSQL_USER -p$MYSQL_PASSWORD demo&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# *-----------------------------*&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;image:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;mysql:&lt;span style=&#34;color:#666&#34;&gt;8.0&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;container_name:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;mysql&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;ports:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3306&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;3306&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;environment:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;MYSQL_ROOT_PASSWORD=Admin123&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;MYSQL_USER=connect_user&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;     &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;MYSQL_PASSWORD=asgard&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;command:&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bash&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-c&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121;font-style:italic&#34;&gt;|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121;font-style:italic&#34;&gt;        cat&amp;gt;/docker-entrypoint-initdb.d/z99_dump.sql &amp;lt;&amp;lt;EOF&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;create&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;table&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;CUSTOMERS&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;                &lt;/span&gt;id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;INT&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;PRIMARY&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;KEY,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;                &lt;/span&gt;first_name&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;VARCHAR(&lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;insert&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;into&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;CUSTOMERS&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(id,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;first_name)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;values&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Rick&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;EOF&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Launch mysql&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;docker-entrypoint.sh&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;mysqld&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;sleep&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;infinity&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this case note that the command to launch MySQL requires both the original &lt;code&gt;Cmd&lt;/code&gt; and &lt;code&gt;EntryPoint&lt;/code&gt; of the image:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker inspect --format&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{{.Config.Entrypoint}}&amp;#39;&lt;/span&gt; mysql:8.0
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;docker-entrypoint.sh&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
$ docker inspect --format&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{{.Config.Cmd}}&amp;#39;&lt;/span&gt; mysql:8.0
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;mysqld&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Thus, &lt;code&gt;docker-entrypoint.sh mysqld&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Is ECS the answer to my dreams? Not entirely. It&amp;#8217;s still a bit fiddly and I&amp;#8217;ve definitely got that feeling that I&amp;#8217;m using it for something it&amp;#8217;s not really intended for. But for now I think it&amp;#8217;s &lt;em&gt;OK enough&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If I take a step back, &lt;strong&gt;I can now take a Docker Compose that runs locally and also run it on &amp;lt;x&amp;gt; number of instances in the cloud&lt;/strong&gt;, and that&amp;#8217;s pretty useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/02/notbad.gif&#34; alt=&#34;notbad&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;Interested in learning ksqlDB? Check out &lt;a href=&#34;https://ksqldb.io&#34; class=&#34;bare&#34;&gt;https://ksqldb.io&lt;/a&gt;, and come to my &lt;a href=&#34;https://qconlondon.com/london2020/workshop/kafka&#34;&gt;QCon workshop&lt;/a&gt; or &lt;a href=&#34;https://kafka-tutorials.confluent.io/?utm_campaign=rmoff&amp;amp;utm_term=ecs-rmoff-blog&#34;&gt;try it out for yourself now&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Primitive Keys in ksqlDB</title>
      <link>https://rmoff.net/2020/02/07/primitive-keys-in-ksqldb/</link>
      <pubDate>2020-02-07</pubDate>
      
      <guid>https://rmoff.net/2020/02/07/primitive-keys-in-ksqldb/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/02/IMG_2326.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;ksqlDB 0.7 will add support for message keys as primitive data types beyond just &lt;code&gt;STRING&lt;/code&gt; (which is all we&amp;#8217;ve had to date). That means that Kafka messages are going to be much easier to work with, and require less wrangling to get into the form in which you need them. Take an example of a database table that you&amp;#8217;ve ingested into a Kafka topic, and want to join to a stream of events. Previously you&amp;#8217;d have had to take the Kafka topic into which the table had been ingested and run a ksqlDB processor to re-key the messages such that ksqlDB could join on them. &lt;em&gt;Friends, I am here to tell you that this is no longer needed!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
ksqlDB 0.7 is not yet (7 February 2020) released - my notes here are based on the latest build from &lt;a href=&#34;https://github.com/confluentinc/ksql/&#34;&gt;master on GitHub&lt;/a&gt;. You can find Docker images for the latest build here: &lt;a href=&#34;https://hub.docker.com/r/rmoff/ksqldb-server&#34; class=&#34;bare&#34;&gt;https://hub.docker.com/r/rmoff/ksqldb-server&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s take the example from above, ingesting data from a database. I&amp;#8217;m going to use Debezium (of course), and stream in data from MySQL. Create the connector using the Kafka Connect REST API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -i -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Accept:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http://localhost:8083/connectors/source-debezium-mysql-00/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;connector.class&amp;#34; : &amp;#34;io.debezium.connector.mysql.MySqlConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.hostname&amp;#34; : &amp;#34;mysql&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.port&amp;#34; : &amp;#34;3306&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.user&amp;#34; : &amp;#34;debezium&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.password&amp;#34; : &amp;#34;dbz&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.server.id&amp;#34; : &amp;#34;42&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.server.name&amp;#34; : &amp;#34;asgard&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;table.whitelist&amp;#34; : &amp;#34;demo.customers&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.history.kafka.bootstrap.servers&amp;#34; : &amp;#34;kafka:29092&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.history.kafka.topic&amp;#34; : &amp;#34;dbhistory.demo&amp;#34; ,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;include.schema.changes&amp;#34; : &amp;#34;false&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;transforms&amp;#34;: &amp;#34;unwrap,extractkey&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;transforms.unwrap.type&amp;#34;: &amp;#34;io.debezium.transforms.ExtractNewRecordState&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;transforms.extractkey.type&amp;#34;: &amp;#34;org.apache.kafka.connect.transforms.ExtractField$Key&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;transforms.extractkey.field&amp;#34;: &amp;#34;id&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;key.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.converters.IntegerConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;value.converter&amp;#34;: &amp;#34;io.confluent.connect.avro.AvroConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;value.converter.schema.registry.url&amp;#34;: &amp;#34;http://schema-registry:8081&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check it&amp;#8217;s running&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -s &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;http://localhost:8083/connectors?expand=info&amp;amp;expand=status&amp;#34;&lt;/span&gt; | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;           jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;. | to_entries[] | [ .value.info.type, .key, .value.status.connector.state,.value.status.tasks[].state,.value.info.config.&amp;#34;connector.class&amp;#34;]|join(&amp;#34;:|:&amp;#34;)&amp;#39;&lt;/span&gt; | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;           column -s : -t| sed &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;s/\&amp;#34;//g&amp;#39;&lt;/span&gt;| sort

&lt;span style=&#34;color:#008000&#34;&gt;source&lt;/span&gt;  |  source-debezium-mysql-00  |  RUNNING  |  RUNNING  |  io.debezium.connector.mysql.MySqlConnector&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now let&amp;#8217;s peel back the covers just a bit. The extremely eagle-eyed amongst you will have noticed that in the connector above I specified:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;&#34;key.converter&#34;: &#34;org.apache.kafka.connect.converters.IntegerConverter&#34;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This uses the new set of primitive converters that were added in &lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/KIP-305:+Add+Connect+primitive+number+converters&#34;&gt;KIP-305&lt;/a&gt; as part of Apache Kafka 2.0. So Debezium will take the primary key of the table (&lt;code&gt;id&lt;/code&gt;) and set it as the &lt;em&gt;key&lt;/em&gt; of the message, in a struct. I use the &lt;a href=&#34;https://docs.confluent.io/current/connect/transforms/extractfield.html#description&#34;&gt;&lt;code&gt;ExtractField&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://www.confluent.io/blog/simplest-useful-kafka-connect-data-pipeline-world-thereabouts-part-3/&#34;&gt;Single Message Transform&lt;/a&gt; (SMT) to lift this out of the struct, and write it as the key of the Kafka message as a signed 32-bit integer with the &lt;code&gt;IntegerConverter&lt;/code&gt; converter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I also use the &lt;code&gt;ExtractNewRecordState&lt;/code&gt; SMT to flatten the &lt;em&gt;value&lt;/em&gt; part of the message to just the current DB record state.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can inspect the payload, which shows that things are working as we want them to. I&amp;#8217;m using the &lt;code&gt;-s&lt;/code&gt; setting to specify the serde for reading the key and value:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kafkacat -b kafka:29092 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;         -t asgard.demo.CUSTOMERS &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;         -C &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;         -c1 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;         -s &lt;span style=&#34;color:#19177c&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;i &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;         -s &lt;span style=&#34;color:#19177c&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;avro &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;         -r http://schema-registry:8081
         -f &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Topic %t / Partition %p / Offset: %o / Timestamp: %T\nHeaders: %h\nKey (%K bytes): %k\nPayload (%S bytes): %s\n--\n&amp;#39;&lt;/span&gt; 

Topic asgard.demo.CUSTOMERS / Partition &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; / Offset: &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; / Timestamp: &lt;span style=&#34;color:#666&#34;&gt;1581069692127&lt;/span&gt;
Headers:
Key &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; bytes&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;
Payload &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;155&lt;/span&gt; bytes&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;first_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Mariejeanne&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Cocci&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;mcocci2@techcrunch.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;gender&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Female&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;club_status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;bronze&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;comments&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Multi-tiered bandwidth-monitored capability&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;create_ts&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2020-02-07T09:35:27Z&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;update_ts&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2020-02-07T09:35:27Z&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}}&lt;/span&gt;
--&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What are all these arguments for &lt;code&gt;kafkacat&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-b&lt;/code&gt; is the broker connection, and &lt;code&gt;-t&lt;/code&gt; is the topic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-C&lt;/code&gt; means run as a consumer, and &lt;code&gt;-c1&lt;/code&gt; means just read one message and then exit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-f&lt;/code&gt; is the format string to use when rendering the message - here we&amp;#8217;re showing a ton of useful metadata as well as the key and value themselves.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-s&lt;/code&gt; tells kafkacat how to deserialise the message&amp;#8217;s key and/or value&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;key=i&lt;/code&gt; deserialises the &lt;strong&gt;key&lt;/strong&gt; as a signed 32-bit integer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;value=avro&lt;/code&gt; deserialise the &lt;strong&gt;value&lt;/strong&gt; as Avro using the Schema Registry specified in &lt;code&gt;-r&lt;/code&gt; to fetch the schema&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_use_it_in_ksqldb&#34;&gt;Use it in ksqlDB&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
ksqlDB 0.7 is not yet (7 February 2020) released - my notes here are based on the latest build from &lt;a href=&#34;https://github.com/confluentinc/ksql/&#34;&gt;master on GitHub&lt;/a&gt;. You can find Docker images for the latest build here: &lt;a href=&#34;https://hub.docker.com/r/rmoff/ksqldb-server&#34; class=&#34;bare&#34;&gt;https://hub.docker.com/r/rmoff/ksqldb-server&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So we&amp;#8217;ve got the Kafka topic populated correctly. Now we can declare a table over it, in ksqlDB, using the new &lt;code&gt;ROWKEY … KEY&lt;/code&gt; syntax with the appropriate &lt;a href=&#34;https://docs.confluent.io/current/ksql/docs/developer-guide/serialization.html#kafka&#34;&gt;primitive type&lt;/a&gt;.
&lt;em&gt;Note that at the moment you have to declare the Avro schema explicitly if you are declaring the key&amp;#8217;s type.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; CUSTOMERS (ROWKEY &lt;span style=&#34;color:#008000&#34;&gt;INT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;KEY&lt;/span&gt;, 
                        FIRST_NAME &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;, LAST_NAME &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;, EMAIL &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;, GENDER &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;, CLUB_STATUS &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;, COMMENTS &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;, CREATE_TS &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;, UPDATE_TS &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;) 
                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt;    (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;asgard.demo.CUSTOMERS&amp;#39;&lt;/span&gt;, 
                        VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;AVRO&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check out the schema - note the &lt;code&gt;INTEGER&lt;/code&gt; key:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DESCRIBE&lt;/span&gt; CUSTOMERS;

Name                 : CUSTOMERS
 Field       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Type&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; ROWTIME     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;BIGINT&lt;/span&gt;           (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;system&lt;/span&gt;)
 ROWKEY      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;INTEGER&lt;/span&gt;          (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;system&lt;/span&gt;)
 FIRST_NAME  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 LAST_NAME   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 EMAIL       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 GENDER      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 CLUB_STATUS &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 COMMENTS    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 CREATE_TS   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 UPDATE_TS   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;For&lt;/span&gt; runtime &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;statistics&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;and&lt;/span&gt; query details run: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DESCRIBE&lt;/span&gt; EXTENDED &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;Stream,&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Table&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;;
ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Query the TABLE:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; CUSTOMERS EMIT CHANGES &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------+---------+-------------+-----------+------------------------+--------+------------+--------------------------+--------------------------+--------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ROWTIME         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ROWKEY   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;FIRST_NAME   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;LAST_NAME  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;EMAIL                   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;GENDER  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;CLUB_STATUS &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;COMMENTS                  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;CREATE_TS                 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;UPDATE_TS                 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------+---------+-------------+-----------+------------------------+--------+------------+--------------------------+--------------------------+--------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1581069692127&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Rica         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Blaisdell  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;rblaisdell0&lt;span style=&#34;color:#666&#34;&gt;@&lt;/span&gt;rambler.ru  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Female  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;bronze      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Universal optimal hierarch&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;07&lt;/span&gt;T09:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;27&lt;/span&gt;Z      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;07&lt;/span&gt;T09:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;27&lt;/span&gt;Z      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;y                         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1581069692127&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Ruthie       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Brockherst &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;rbrockherst1&lt;span style=&#34;color:#666&#34;&gt;@&lt;/span&gt;ow.ly      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Female  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;platinum    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Reverse&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;engineered tangibl&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;07&lt;/span&gt;T09:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;27&lt;/span&gt;Z      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;07&lt;/span&gt;T09:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;27&lt;/span&gt;Z      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;e interface               &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1581069692127&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Mariejeanne  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Cocci      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;mcocci2&lt;span style=&#34;color:#666&#34;&gt;@&lt;/span&gt;techcrunch.com  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Female  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;bronze      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Multi&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;tiered bandwidth&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;mon&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;07&lt;/span&gt;T09:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;27&lt;/span&gt;Z      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;07&lt;/span&gt;T09:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;27&lt;/span&gt;Z      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;itored capability         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1581069692128&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Hashim       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Rumke      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;hrumke3&lt;span style=&#34;color:#666&#34;&gt;@&lt;/span&gt;sohu.com        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Male    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;platinum    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Self&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;enabling &lt;span style=&#34;color:#666&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt; firmwar&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;07&lt;/span&gt;T09:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;27&lt;/span&gt;Z      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;07&lt;/span&gt;T09:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;27&lt;/span&gt;Z      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;e                         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1581069692128&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Hansiain     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Coda       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;hcoda4&lt;span style=&#34;color:#666&#34;&gt;@&lt;/span&gt;senate.gov       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Male    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;platinum    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Centralized &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;full&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;range app&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;07&lt;/span&gt;T09:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;27&lt;/span&gt;Z      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;07&lt;/span&gt;T09:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;27&lt;/span&gt;Z      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;roach                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Limit&lt;/span&gt; Reached
Query terminated&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now let&amp;#8217;s take a stream of events that have a foreign key (&lt;code&gt;USER_ID&lt;/code&gt;) to the customer data above:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DESCRIBE&lt;/span&gt; RATINGS;

Name                 : RATINGS
 Field       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Type&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; ROWTIME     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;BIGINT&lt;/span&gt;           (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;system&lt;/span&gt;)
 ROWKEY      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)  (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;system&lt;/span&gt;)
 RATING_ID   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;BIGINT&lt;/span&gt;
 USER_ID     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;INTEGER&lt;/span&gt;
 STARS       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;INTEGER&lt;/span&gt;
 ROUTE_ID    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;INTEGER&lt;/span&gt;
 RATING_TIME &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;BIGINT&lt;/span&gt;
 CHANNEL     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 MESSAGE     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; USER_ID, STARS, MESSAGE &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; RATINGS EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------+--------+------------------------------------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;USER_ID   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;STARS   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;MESSAGE                                                                       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------+--------+------------------------------------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;your team here rocks&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;                                                         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;more&lt;/span&gt; peanuts please                                                           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;19&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;why &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;is&lt;/span&gt; it so difficult &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;to&lt;/span&gt; keep the bathrooms clean &lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt;                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Exceeded &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;all&lt;/span&gt; my expectations. Thank you &lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;                                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;more&lt;/span&gt; peanuts please                                                           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Join this stream to the customer data, on the common key:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;C&lt;/span&gt;.FIRST_NAME &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;C&lt;/span&gt;.LAST_NAME &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; CUSTOMER, 
             R.STARS, 
             R.MESSAGE 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; RATINGS R 
             &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; CUSTOMERS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;C&lt;/span&gt; 
                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; R.USER_ID &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;C&lt;/span&gt;.ROWKEY 
        EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------+-------+-----------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;CUSTOMER        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;STARS  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;MESSAGE                                              &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------+-------+-----------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Brena Tollerton &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;your team here rocks&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;                                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Robinet Leheude &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;more&lt;/span&gt; peanuts please                                  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Josiah Brockett &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;why &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;is&lt;/span&gt; it so difficult &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;to&lt;/span&gt; keep the bathrooms clean &lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Waldon Keddey   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Exceeded &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;all&lt;/span&gt; my expectations. Thank you &lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Rica Blaisdell  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;more&lt;/span&gt; peanuts please                                  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_what_if_im_using_ksqldb_0_7_confluent_platform_5_5_or_if_i_dont_want_to_type_in_the_whole_value_schema_if_its_in_avro&#34;&gt;What if I&amp;#8217;m using ksqlDB &amp;lt;0.7 (Confluent Platform &amp;lt;5.5) ? (or if I don&amp;#8217;t want to type in the whole value schema if it&amp;#8217;s in Avro?)&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The option you&amp;#8217;ve got here it to serialise the key as a string, and then in ksqlDB force the foreign key to the same type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s a new version of the connector, using the StringConverter. Note that it&amp;#8217;s still using the &lt;code&gt;ExtractField$Key&lt;/code&gt; SMT.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -i -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Accept:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http://localhost:8083/connectors/source-debezium-mysql-02/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;connector.class&amp;#34; : &amp;#34;io.debezium.connector.mysql.MySqlConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.hostname&amp;#34; : &amp;#34;mysql&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.port&amp;#34; : &amp;#34;3306&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.user&amp;#34; : &amp;#34;debezium&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.password&amp;#34; : &amp;#34;dbz&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.server.id&amp;#34; : &amp;#34;43&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.server.name&amp;#34; : &amp;#34;asgard2&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;table.whitelist&amp;#34; : &amp;#34;demo.customers&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.history.kafka.bootstrap.servers&amp;#34; : &amp;#34;kafka:29092&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;database.history.kafka.topic&amp;#34; : &amp;#34;dbhistory.demo&amp;#34; ,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;include.schema.changes&amp;#34; : &amp;#34;false&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;transforms&amp;#34;: &amp;#34;unwrap,extractkey&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;transforms.unwrap.type&amp;#34;: &amp;#34;io.debezium.transforms.ExtractNewRecordState&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;transforms.extractkey.type&amp;#34;: &amp;#34;org.apache.kafka.connect.transforms.ExtractField$Key&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;transforms.extractkey.field&amp;#34;: &amp;#34;id&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;key.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;value.converter&amp;#34;: &amp;#34;io.confluent.connect.avro.AvroConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;value.converter.schema.registry.url&amp;#34;: &amp;#34;http://schema-registry:8081&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Create a new version of the table - note that we don&amp;#8217;t have to enter the full schema :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; CUSTOMERS2 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;asgard2.demo.CUSTOMERS&amp;#39;&lt;/span&gt;, VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;AVRO&amp;#39;&lt;/span&gt;);

 Message
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Table&lt;/span&gt; created
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DESCRIBE&lt;/span&gt; CUSTOMERS2;

Name                 : CUSTOMERS2
 Field       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Type&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; ROWTIME     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;BIGINT&lt;/span&gt;           (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;system&lt;/span&gt;)
 ROWKEY      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)  (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;system&lt;/span&gt;)
 ID          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;INTEGER&lt;/span&gt;
 FIRST_NAME  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 LAST_NAME   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 EMAIL       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 GENDER      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 CLUB_STATUS &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 COMMENTS    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 CREATE_TS   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 UPDATE_TS   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------------------------------&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we workaround the fact that the foreign key &lt;code&gt;USER_ID&lt;/code&gt; is an &lt;code&gt;INT&lt;/code&gt; on the events we&amp;#8217;re joining to but &lt;code&gt;ROWKEY&lt;/code&gt; is a &lt;code&gt;STRING&lt;/code&gt; on the table (per the &lt;code&gt;DESCRIBE&lt;/code&gt; output above) by `CAST`ing the datatype on the left-hand side of the join:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;C&lt;/span&gt;.FIRST_NAME &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;C&lt;/span&gt;.LAST_NAME &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; CUSTOMER, 
             R.STARS, 
             R.MESSAGE 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; RATINGS R 
             &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; CUSTOMERS2 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;C&lt;/span&gt; 
                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CAST&lt;/span&gt;(R.USER_ID &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; STRING) &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;C&lt;/span&gt;.ROWKEY 
        EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------+-------+-----------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;CUSTOMER         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;STARS  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;MESSAGE                                              &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------+-------+-----------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Brena Tollerton  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;your team here rocks&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;                                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Robinet Leheude  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;more&lt;/span&gt; peanuts please                                  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Josiah Brockett  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;why &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;is&lt;/span&gt; it so difficult &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;to&lt;/span&gt; keep the bathrooms clean &lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Waldon Keddey    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Exceeded &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;all&lt;/span&gt; my expectations. Thank you &lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Rica Blaisdell   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;more&lt;/span&gt; peanuts please                                  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_but_my_single_message_transform_doesnt_work&#34;&gt;But my Single Message Transform doesn&amp;#8217;t work…&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With the Debezium connector and &lt;code&gt;ExtractField$Key&lt;/code&gt; SMT you might hit this error when you run the connector:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;java.lang.NullPointerException
at org.apache.kafka.connect.transforms.ExtractField.apply&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;ExtractField.java:61&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
at org.apache.kafka.connect.runtime.TransformationChain.apply&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;TransformationChain.java:38&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is detailed &lt;a href=&#34;https://issues.apache.org/jira/browse/KAFKA-7052&#34;&gt;here&lt;/a&gt;, but in short you need to make sure that you&amp;#8217;ve set in the Debezium connector config:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;include.schema.changes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Fantastical / Mac Calendar not showing Google Shared Calendar</title>
      <link>https://rmoff.net/2020/01/24/fantastical-/-mac-calendar-not-showing-google-shared-calendar/</link>
      <pubDate>2020-01-24</pubDate>
      
      <guid>https://rmoff.net/2020/01/24/fantastical-/-mac-calendar-not-showing-google-shared-calendar/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/img/default-header-img.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Very simple to fix: go to &lt;a href=&#34;https://calendar.google.com/calendar/syncselect&#34; class=&#34;bare&#34;&gt;https://calendar.google.com/calendar/syncselect&lt;/a&gt; and select the calendars that you want. Click save.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/01/fantastical02.png&#34; alt=&#34;Google Calendar sync&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;(gotta love the old school Google theme 😉)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now as if by magic, the calendar pixies make all the calendars show up in whatever client&amp;#8217;s syncing, such as Mac&amp;#8217;s own calendar app or Fantastical (which you should use because it&amp;#8217;s great):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/01/fantastical01.png&#34; alt=&#34;Fantastical showing shared calendar&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you&amp;#8217;ve got multiple Google accounts then just go to that URL in incognito mode to signin using the appropriate account.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Notes on getting data into InfluxDB from Kafka with Kafka Connect</title>
      <link>https://rmoff.net/2020/01/23/notes-on-getting-data-into-influxdb-from-kafka-with-kafka-connect/</link>
      <pubDate>2020-01-23</pubDate>
      
      <guid>https://rmoff.net/2020/01/23/notes-on-getting-data-into-influxdb-from-kafka-with-kafka-connect/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/01/IMG_2254.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can download the InfluxDB connector for Kafka Connect &lt;a href=&#34;https://www.confluent.io/hub/confluentinc/kafka-connect-influxdb&#34;&gt;here&lt;/a&gt;. Documentation for it is &lt;a href=&#34;https://docs.confluent.io/current/connect/kafka-connect-influxdb/influx-db-sink-connector/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When a message from your source Kafka topic is written to InfluxDB the InfluxDB values are set thus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Timestamp&lt;/strong&gt; is taken from the Kafka message timestamp (which is either set by your producer, or the time at which it was received by the broker)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tag(s)&lt;/strong&gt; are taken from the &lt;code&gt;tags&lt;/code&gt; field in the message. This field must be a &lt;code&gt;map&lt;/code&gt; type - see below&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Value&lt;/strong&gt; fields are taken from the rest of the message, and must be numeric or boolean&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Measurement name&lt;/strong&gt; can be specified as a field of the message, or hardcoded in the connector config.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_try_it_out&#34;&gt;Try it out&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can find a Docker Compose that will spin up this whole stack for you &lt;a href=&#34;https://github.com/confluentinc/demo-scene/tree/master/influxdb-and-kafka&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_json_example&#34;&gt;JSON example&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;admonitionblock warning&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Warning&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A sharp edge to watch out for is that the InfluxDB connector relies on there being a &lt;strong&gt;schema&lt;/strong&gt; in your data. You cannot just throw some JSON at it and hope that it will &lt;em&gt;just work&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Learn more about &lt;a href=&#34;https://rmoff.net/2020/01/22/kafka-connect-and-schemas/&#34;&gt;schemas in Kafka Connect here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If this is your JSON payload&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;FOO&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;product&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;wibble&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;stock&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;500.0&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Then you&amp;#8217;ll need to wrap it in an envelope with a schema thus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;schema&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;struct&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; [
            { &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt; , &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;map&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt; }, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;values&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt; }, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;},
            { &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;stock&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;double&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt; }
        ],
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
    },
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;payload&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; {
            &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;FOO&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;product&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;wibble&amp;#34;&lt;/span&gt;
        },
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;stock&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;500.0&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
If you don&amp;#8217;t have the option of adding this schema to the producer writing the data, there is &lt;a href=&#34;https://rmoff.net/2020/01/22/kafka-connect-and-schemas/&#34;&gt;a hacky way that you can embed your payload in a schema using kafkacat&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now create the connector.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -i -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;        http://localhost:8083/connectors/sink_influx_json_01/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;        -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;connector.class&amp;#34;               : &amp;#34;io.confluent.influxdb.InfluxDBSinkConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter&amp;#34;               : &amp;#34;org.apache.kafka.connect.json.JsonConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter.schemas.enable&amp;#34;: &amp;#34;true&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;key.converter&amp;#34;                 : &amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;topics&amp;#34;                        : &amp;#34;json_01&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;influxdb.url&amp;#34;                  : &amp;#34;http://influxdb:8086&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;influxdb.db&amp;#34;                   : &amp;#34;my_db&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;measurement.name.format&amp;#34;       : &amp;#34;${topic}&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A most important thing is that the &lt;code&gt;value.converter&lt;/code&gt; is set correctly. This tells Kafka Connect understands how to deserialise the &lt;code&gt;value&lt;/code&gt; component of the message (as opposed to the key, which is specified with &lt;code&gt;key.converter&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For a JSON message such as that shown above with the schema make sure you have set both fields:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#34;value.converter&#34;               : &#34;org.apache.kafka.connect.json.JsonConverter&#34;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#34;value.converter.schemas.enable&#34;: &#34;true&#34;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now let&amp;#8217;s check that the data&amp;#8217;s made it to InfluxDB:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;&#34;&gt;$&lt;/span&gt; influx &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;execute&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;show measurements on &amp;#34;my_db&amp;#34;&amp;#39;&lt;/span&gt;
name: measurements
name
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;json_01

&lt;span style=&#34;&#34;&gt;$&lt;/span&gt; influx &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;execute&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;show tag keys on &amp;#34;my_db&amp;#34;&amp;#39;&lt;/span&gt;
name: json_01
tagKey
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;host&lt;/span&gt;
product

&lt;span style=&#34;&#34;&gt;$&lt;/span&gt; influx &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;execute&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;SELECT * FROM json_01 GROUP BY host, product;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;database&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;my_db&amp;#34;&lt;/span&gt;
name: json_01
tags: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;host&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;FOO, product&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;wibble
time                stock
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----                -----
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1579779810974000000&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;500&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_avro_example&#34;&gt;Avro example&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;admonitionblock warning&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Warning&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
ksqlDB/KSQL cannot yet write data in an Avro format that is compatible with this connector.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Assuming you&amp;#8217;re writing Avro data from your application with full control over the schema, you should follow the same pattern as above, with the &lt;code&gt;tags&lt;/code&gt; field being a &lt;code&gt;map&lt;/code&gt;. Here&amp;#8217;s an example schema:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;record&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;myrecord&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; [
        {
            &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; {
                &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;map&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;values&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
            }
        },
        {
            &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;stock&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;double&amp;#34;&lt;/span&gt;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With your data written in Avro following the above schema pattern using the serialiser provided with Schema Registry, you can now stream it into InfluxDB:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -i -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;        http://localhost:8083/connectors/sink_influx_avro_01/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;        -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;connector.class&amp;#34;                    : &amp;#34;io.confluent.influxdb.InfluxDBSinkConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter&amp;#34;                    : &amp;#34;io.confluent.connect.avro.AvroConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter.schema.registry.url&amp;#34;: &amp;#34;http://schema-registry:8081&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;key.converter&amp;#34;                      : &amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;topics&amp;#34;                             : &amp;#34;avro_01&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;influxdb.url&amp;#34;                       : &amp;#34;http://influxdb:8086&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;influxdb.db&amp;#34;                        : &amp;#34;my_db&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;measurement.name.format&amp;#34;            : &amp;#34;${topic}&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As above, we can check that the data made it into InfluxDB:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;&#34;&gt;$&lt;/span&gt; influx &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;execute&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;SELECT * FROM avro_01 GROUP BY host, product;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;database&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;my_db&amp;#34;&lt;/span&gt;
name: avro_01
tags: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;host&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;FOO, product&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;wibble
time                stock
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----                -----
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1579782223737000000&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;500&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Assuming your connector gets created successfully, you can check its status:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ curl -s &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;http://localhost:8083/connectors?expand=info&amp;amp;expand=status&amp;#34;&lt;/span&gt; | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;           jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;. | to_entries[] | [ .value.info.type, .key, .value.status.connector.state,.value.status.tasks[].state,.value.info.config.&amp;#34;connector.class&amp;#34;]|join(&amp;#34;:|:&amp;#34;)&amp;#39;&lt;/span&gt; | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;           column -s : -t| sed &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;s/\&amp;#34;//g&amp;#39;&lt;/span&gt;| sort

sink  |  sink_influx_json_01  |  RUNNING  |  RUNNING  |  io.confluent.influxdb.InfluxDBSinkConnector&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If the task is &lt;code&gt;FAILED&lt;/code&gt; you&amp;#8217;ll need to dive into the Kafka Connect worker log to find the reason. Even if it&amp;#8217;s &lt;code&gt;RUNNING&lt;/code&gt; you&amp;#8217;ll need the Kafka Connect worker log for troubleshooting more subtle problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you&amp;#8217;re using Confluent Platform 5.4 (or Apache Kafka 2.4) you can use the new &lt;a href=&#34;https://rmoff.net/2020/01/16/changing-the-logging-level-for-kafka-connect-dynamically/&#34;&gt;dynamic logging capabilities in Kafka Connect&lt;/a&gt; to bump up the logging just for the InfluxDB connector without being overwhelmed by tons of other &lt;code&gt;TRACE&lt;/code&gt; data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -s -X PUT http://localhost:8083/admin/loggers/io.confluent.influxdb &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;level&amp;#34;: &amp;#34;TRACE&amp;#34;}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With this set, you then get this kind of useful information:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;…
put&lt;span style=&#34;color:#666&#34;&gt;()&lt;/span&gt; - Processing records &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;INFLUX_TEST&amp;#39;&lt;/span&gt; database &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;io.confluent.influxdb.sink.InfluxDBSinkTask:224&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
put&lt;span style=&#34;color:#666&#34;&gt;()&lt;/span&gt; - Looking &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; tags &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;io.confluent.influxdb.sink.InfluxDBSinkTask:240&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
put&lt;span style=&#34;color:#666&#34;&gt;()&lt;/span&gt; - tags field found but doesn&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;t match Schema{MAP} or Schema{MAP}. (io.confluent.influxdb.sink.InfluxDBSinkTask:253)
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;put() - tags =  (io.confluent.influxdb.sink.InfluxDBSinkTask:258)
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;put() - Processing field &amp;#39;&lt;/span&gt;measurement&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;:STRING:&amp;#39;&lt;/span&gt;null&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39; (io.confluent.influxdb.sink.InfluxDBSinkTask:272)
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;put() - Skipping field &amp;#39;&lt;/span&gt;tags&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39; (io.confluent.influxdb.sink.InfluxDBSinkTask:269)
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;put() - Processing field &amp;#39;&lt;/span&gt;cpu1&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;:INT32:&amp;#39;&lt;/span&gt;null&lt;span style=&#34;&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;io.confluent.influxdb.sink.InfluxDBSinkTask:272&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
…&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_resources&#34;&gt;Resources&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Read more about &lt;a href=&#34;https://www.confluent.io/blog/kafka-connect-deep-dive-converters-serialization-explained/&#34;&gt;Kafka and serialisation/converters&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An example of the &lt;a href=&#34;https://rmoff.net/2020/01/21/monitoring-sonos-with-ksqldb-influxdb-and-grafana/&#34;&gt;InfluxDB connector in action&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learn more about &lt;a href=&#34;https://rmoff.dev/crunch19-zero-to-hero-kafka-connect&#34;&gt;Kafka Connect&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Kafka Connect and Schemas</title>
      <link>https://rmoff.net/2020/01/22/kafka-connect-and-schemas/</link>
      <pubDate>2020-01-22</pubDate>
      
      <guid>https://rmoff.net/2020/01/22/kafka-connect-and-schemas/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/01/IMG_2266.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s a fun one that Kafka Connect can sometimes throw out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;java.lang.ClassCastException: 
java.util.HashMap cannot be cast to org.apache.kafka.connect.data.Struct&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;HashMap? Struct? HUH?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;tenor-gif-embed&#34; data-postid=&#34;9286799&#34; data-share-method=&#34;host&#34; data-width=&#34;100%&#34; data-aspect-ratio=&#34;1.0&#34;&gt;&lt;a href=&#34;https://tenor.com/view/confused-confusing-noidea-cat-gif-9286799&#34;&gt;GIF&lt;/a&gt; from &lt;a href=&#34;https://tenor.com/search/confused-gifs&#34;&gt;Confused GIFs&lt;/a&gt;&lt;/div&gt;&lt;script type=&#34;text/javascript&#34; async src=&#34;https://tenor.com/embed.js&#34;&gt;&lt;/script&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_what_went_wrong&#34;&gt;What went wrong?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The connector you&amp;#8217;re using relies on the data having a &lt;strong&gt;declared schema&lt;/strong&gt;, and you didn&amp;#8217;t pass it one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_schemas_in_my_data&#34;&gt;Schemas? In my data?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are currently (January 2020) two ways that this can happen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Avro with the Confluent Schema Registry (the best option IMO)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JSON with an embedded schema per message&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This is not just JSON that you glance at and can say &#34;yeah I reckon I know the schema&#34;, or JSON with your own funky schema definition embedded in your own funky bespoke way. This is JSON that looks like this, with &lt;code&gt;schema&lt;/code&gt; and &lt;code&gt;payload&lt;/code&gt; root elements:&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;schema&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;struct&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; [
      { &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt; },
      { &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Artist&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt; },
      { &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Song&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt; }
    ] },
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;payload&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Artist&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Rick Astley&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Song&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Never Gonna Give You Up&amp;#34;&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Read more about it &lt;a href=&#34;https://www.confluent.io/blog/kafka-connect-deep-dive-converters-serialization-explained/#json-schemas&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_so_what_went_wrong&#34;&gt;So what went wrong?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You&amp;#8217;ve got JSON data in your Kafka topic, so you told Kafka Connect to use the JSON converter. Makes sense:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value.converter&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;org.apache.kafka.connect.json.JsonConverter&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;BUT&lt;/strong&gt; then you set this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value.converter.schemas.enable&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now the JSON &lt;em&gt;converter&lt;/em&gt; will read the data, but the connector (e.g. the Influx DB Sink) relies on there being a declared schema—which there isn&amp;#8217;t (and we told the JSON converter not to parse for one, by setting &lt;code&gt;&#34;value.converter.schemas.enable&#34;:&#34;false&#34;&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how_do_i_fix_it&#34;&gt;How do I fix it?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you&amp;#8217;ve got JSON data with a schema embedded like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;schema&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;struct&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; [
      { &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt; },
      { &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Artist&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt; },
      { &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Song&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt; }
    ] },
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;payload&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Artist&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Rick Astley&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Song&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Never Gonna Give You Up&amp;#34;&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;then you can just fix the configuration of your converter, by setting:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value.converter.schemas.enable&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you get &lt;code&gt;JsonDeserializer with schemas.enable requires &#34;schema&#34; and &#34;payload&#34; fields and may not contain additional fields&lt;/code&gt; check &lt;a href=&#34;http://rmoff.net/2017/09/06/kafka-connect-jsondeserializer-with-schemas.enable-requires-schema-and-payload-fields/&#34;&gt;this link&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But if you don&amp;#8217;t actually have a schema present, then you&amp;#8217;re going to need to declare one and make it available as part of your Kafka message - either embedded in the JSON, or using Avro (a better solution).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_sounds_like_a_good_idea_how_do_i_add_a_schema_to_my_kafka_message&#34;&gt;Sounds like a good idea! How do I add a schema to my Kafka message?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s assume that you can&amp;#8217;t just fix this at source, and have your producer write data that&amp;#8217;s got the schema declared already (since this is the overall best solution). Your source data looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Artist&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Rick Astley&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Song&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Never Gonna Give You Up&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You&amp;#8217;ve got a couple of approaches to fixing this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_option_1_stream_processingthe_right_way&#34;&gt;Option 1 : Stream Processing—the right way&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use ksqlDB, Kafka Streams, or another stream processing to read your source messages from a topic, apply the schema, and write the message to a new topic. That new topic is then the one that you consume from Kafka Connect (and anywhere else that will benefit from a declared schema).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s an example of doing it using ksqlDB:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Declare the schema on the existing topic&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM TESTDATA_JSON (ID &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;, ARTIST &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;, SONG &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;) &lt;span style=&#34;&#34;&gt;\&lt;/span&gt;
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;testdata-json&amp;#39;&lt;/span&gt;, VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;JSON&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reserialise the data to Avro&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM TESTDATA 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;AVRO&amp;#39;&lt;/span&gt;, KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;testdata-avro&amp;#39;&lt;/span&gt;) 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; TESTDATA_JSON;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you&amp;#8217;re going to use Avro make sure you change your converter config in the connector:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value.converter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.connect.avro.AvroConverter&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value.converter.schema.registry.url&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;http://schema-registry:8081&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Read more about this technique &lt;a href=&#34;https://www.confluent.io/blog/kafka-connect-deep-dive-converters-serialization-explained/#applying-schema&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_option_2_stream_processing_the_hacky_way&#34;&gt;Option 2 : Stream processing the hacky way&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sometimes needs must. We know we should do it the right way, but we need a dirty little fix. Here&amp;#8217;s that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s assume that we don&amp;#8217;t care about:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Message timestamps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Message headers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Message keys&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Message partitions&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;not to mention&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Maintainability&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Supportability&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The hack here is to interpolate the JSON-with-schema template with the payload value from the source, using kafkacat. &lt;code&gt;kafkacat&lt;/code&gt; reads from the topic, pipes it into &lt;code&gt;jq&lt;/code&gt; which adds the schema definition, and then pipes it to another instance of &lt;code&gt;kafkacat&lt;/code&gt; which writes it to a new topic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kafkacat -b localhost:9092 -q -u -X auto.offset.reset&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;earliest -G rmoff_cg_01 testdata-json | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;jq --compact-output --unbuffered &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;. |
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    {   schema: { type: &amp;#34;struct&amp;#34;, optional: false, version: 1, fields: [
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;                { field: &amp;#34;ID&amp;#34;, type: &amp;#34;string&amp;#34;, optional: true},
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;                { field: &amp;#34;Artist&amp;#34;, type: &amp;#34;string&amp;#34;, optional: true},
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;                { field: &amp;#34;Song&amp;#34;, type: &amp;#34;string&amp;#34;, optional: true}]},
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        payload: {
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            ID: .ID,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            Artist: .Artist,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            Song: .Song
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            }
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    }&amp;#39;&lt;/span&gt; | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;kafkacat -b localhost:9092 -t testdata-json-with-schema -P -T -u | jq --unbuffered &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It runs using a consumer group so can be stopped and started, and even scaled out if you have more than one partition. It also dumps to screen the transformed message - remove the final &lt;code&gt;jq&lt;/code&gt; if you don&amp;#8217;t want that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The transformed message looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;schema&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;struct&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; [
      {
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt;
      },
      {
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Artist&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt;
      },
      {
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Song&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;optional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt;
      }
    ]
  },
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;payload&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Artist&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Rick Astley&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Song&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Never Gonna Give You Up&amp;#34;&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_wouldnt_it_be_easier_if_the_json_converter_could_just_infer_the_schema&#34;&gt;Wouldn&amp;#8217;t it be easier if the JSON Converter could just infer the schema?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Probably - and that&amp;#8217;s why &lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/KIP-301%3A+Schema+Inferencing+for+JsonConverter&#34;&gt;KIP-301&lt;/a&gt; exists. PRs are open if you want to contribute :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Monitoring Sonos with ksqlDB, InfluxDB, and Grafana</title>
      <link>https://rmoff.net/2020/01/21/monitoring-sonos-with-ksqldb-influxdb-and-grafana/</link>
      <pubDate>2020-01-21</pubDate>
      
      <guid>https://rmoff.net/2020/01/21/monitoring-sonos-with-ksqldb-influxdb-and-grafana/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/01/IMG_2259.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m quite a fan of Sonos audio equipment but recently had some trouble with some of the devices glitching and even cutting out whilst playing. Under the covers Sonos stuff is running Linux (of course) and exposes some diagnostics through a rudimentary frontend that you can access at &lt;code&gt;http://&amp;lt;sonos player IP&amp;gt;:1400/support/review&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/01/sonos00.png&#34; alt=&#34;Sonos Network Matrix&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Whilst this gives you the current state, you can&amp;#8217;t get historical data on it. It &lt;em&gt;felt&lt;/em&gt; like the problems were happening &#34;all the time&#34;, but &lt;strong&gt;were they actually&lt;/strong&gt;? For that, we need some cold, hard, data! Something like this, in fact:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------+---------+----------+---------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;WINDOW_START_TS      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;DEVICE   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;STATUS    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;STATUS_COUNT   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------+---------+----------+---------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Kitchen  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;YELLOW    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;183&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Kitchen  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;RED       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;162&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Kitchen  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ORANGE    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;156&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Kitchen  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;GREEN     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;              &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
[&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Summaries are nice, but so&amp;#8217;s a plot of the data over time:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/01/sonos01.png&#34; alt=&#34;Sonos connectivity data over time&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this article I&amp;#8217;ll walk through how to collect this data and process it using some of my favourite tools including ksqlDB, InfluxDB, and Grafana.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Which data are we going to collect? For now it&amp;#8217;s based on two metrics of interest here - &lt;code&gt;Noise Floor&lt;/code&gt; and &lt;code&gt;OFDM ANI level&lt;/code&gt;. Why these two? Well, if we open up the code behind the Network Matrix shown above, we can see the Javascript that defines the colour of the cells evaluates these two:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;[&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;]
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;( nf &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;94&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ofdm &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; )
    td.style.background &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rgb(32,190,32)&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// GREEN
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;( nf &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ofdm &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; )
    td.style.background &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rgb(255,255,32)&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// YELLOW
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;( nf &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ofdm &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; )
    td.style.background &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rgb(255,159,32)&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// ORANGE
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt;
    td.style.background &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rgb(255,32,32)&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// RED
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;[&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_the_stack&#34;&gt;The stack&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;curl&lt;/code&gt; to poll the API for diagnostics, and parse it with &lt;a href=&#34;https://github.com/kislyuk/yq&#34;&gt;&lt;code&gt;xq&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/edenhill/kafkacat&#34;&gt;kafkacat&lt;/a&gt; to stream the data into Kafka&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://kafka.apache.org&#34;&gt;Apache Kafka&lt;/a&gt; to stream and store the data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://ksqldb.io&#34;&gt;ksqlDB&lt;/a&gt; to process, wrangle, and query the data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://kafka.apache.org&#34;&gt;Kafka Connect&lt;/a&gt; to load the data into &lt;a href=&#34;https://www.influxdata.com/&#34;&gt;InfluxDB&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt; to visualise it all&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Why Kafka? Because we&amp;#8217;re doing all of this with streams of events. We want to have a low-latency pipeline from event to dashboard, and we also want to be able to replay and re-use the data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_ingest_diagnostics_data_from_sonos_into_kafka&#34;&gt;Ingest diagnostics data from Sonos into Kafka&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We&amp;#8217;re going to go full-MacGyver for part of this, since Sonos does not offer a nice API. The diagnostics that Sonos devices serve up on the &lt;code&gt;http://&amp;lt;sonos player IP&amp;gt;:1400/support/review&lt;/code&gt; interface (I&amp;#8217;ll not actually call it an API, since it isn&amp;#8217;t really) are XML-wrapped plaintext. So whilst XML may actually be nicer than YAML to work with (who knew), plain text is not so nice to work with. Fancy parsing this for key/value pairs? It&amp;#8217;s going to be all hand-crafted code needed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Mode: INFRA (sonosnet)
Operating on channel 2437
Home channel is 2437
HT Channel is 0
RF Chains: RX:4 TX:4
RF Chainmask: RX:0x0F TX:0x0F
Max Spatial Streams: RX:4 TX:4
Noise Floor:    0 dBm (chain 0 ctl)
Noise Floor:    0 dBm (chain 1 ctl)
Noise Floor:    0 dBm (chain 2 ctl)
Noise Floor:    0 dBm (chain 3 ctl)
PHY errors since last reading/reset: 3882&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To pull the data from Sonos you just need to hit one of the devices, since it serves up the stats for all the others too. I&amp;#8217;m using &lt;a href=&#34;https://github.com/kislyuk/yq&#34;&gt;&lt;code&gt;xq&lt;/code&gt;&lt;/a&gt; here which is an XML version of the superb &lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;&lt;code&gt;jq&lt;/code&gt;&lt;/a&gt; tool (which is for JSON). It means that I can stream data from &lt;code&gt;curl&lt;/code&gt; into &lt;code&gt;xq&lt;/code&gt; and parse the document structure for fields and values that I want, as well as starting to manipulate the data into more of a structure for processing (such as splitting the &lt;code&gt;status&lt;/code&gt; data shown above into an array).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Once it&amp;#8217;s parsed the data it pipes it into &lt;code&gt;kafkacat&lt;/code&gt; which writes it to a Kafka topic, as well as echo&amp;#8217;ing it to the terminal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;while [ 1 -eq 1 ];do
    curl -s &#39;http://192.168.10.98:1400/support/review&#39; | \
        xq -c &#39;.ZPNetworkInfo.ZPSupportInfo[] |
            {ZPInfo: .ZPInfo.ZoneName,
            data: [(.File[] |
                    select (.&#34;@name&#34; == &#34;/proc/ath_rincon/status&#34;) |
                    .&#34;#text&#34; |
                    split(&#34;\n&#34;)[] |
                    select((. | contains(&#34;OFDM&#34;)) or (.|contains(&#34;Noise&#34;)) or (.|contains(&#34;PHY&#34;))))]
                }&#39; | \
            docker exec -i kafkacat kafkacat \
                -b kafka-1:39092,kafka-2:49092,kafka-3:59092 \
                -t sonos-metrics -P -T | jq &#39;.&#39;
    sleep 20
done&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_query_the_streams_of_data_in_ksqldb&#34;&gt;Query the streams of data in ksqlDB&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now the data&amp;#8217;s in Kafka we can examine and process it with ksqlDB. First up we need to create a stream on top of the topic—which is just declaring the schema for the data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM SONOS_RAW (ZPINFO STRING, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DATA&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;ARRAY&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;,RAWDATA STRING) 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;sonos-metrics&amp;#39;&lt;/span&gt;, VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;JSON&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can query this data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;auto.offset.reset&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;earliest&amp;#39;&lt;/span&gt;;

ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TIMESTAMPTOSTRING(ROWTIME,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Europe/London&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; TS, 
             ZPINFO, 
             &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DATA&lt;/span&gt; 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SONOS_RAW 
        EMIT CHANGES 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------+-------------+-----------------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;TS                   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ZPINFO       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DATA&lt;/span&gt;                                                       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------+-------------+-----------------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;23&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;09&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Study (R)    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;[Noise Floor:    &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; dBm (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chain&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; ctl), Noise Floor:    &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; dBm&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chain&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; ctl), Noise Floor:    &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; dBm (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chain&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; ctl), Noise &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Floor:    &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; dBm (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chain&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; ctl), PHY errors since &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;last&lt;/span&gt; readin&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;reset&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;6803&lt;/span&gt;        ]                                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Limit&lt;/span&gt; Reached
Query terminated
ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and we can manipulate the data using standard SQL capabilities - for example to take a substring of a value and cast it to a new type:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; ZPINFO, 
             &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DATA&lt;/span&gt;[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;],
             &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CAST&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SUBSTRING&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DATA&lt;/span&gt;[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;],&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; DOUBLE) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; NOISE_FLOOR_DBM0
     &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt;   SONOS_RAW
     EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------+---------------------------------------------+---------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ZPINFO          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;KSQL_COL_1                                   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;NOISE_FLOOR_DBM0                             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------+---------------------------------------------+---------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Bedroom         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Noise Floor: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;104&lt;/span&gt; dBm (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chain&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; ctl)          &lt;span style=&#34;color:#666&#34;&gt;|-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;104&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;                                       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Study (L)       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Noise Floor:    &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; dBm (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chain&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; ctl)          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;                                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
[&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_transform_the_data_in_ksqldb&#34;&gt;Transform the data in ksqlDB&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The actual data that we want to pull out for now is just the device name (&lt;code&gt;ZPINFO&lt;/code&gt;), &lt;code&gt;Noise Floor&lt;/code&gt;, and &lt;code&gt;OFDM ANI level&lt;/code&gt;. We&amp;#8217;ll do this with some data wrangling along the same lines as shown above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A key thing to note is that the &lt;code&gt;CREATE STREAM&lt;/code&gt; here is now writing the results of this query to a new stream, underpinned by a new Kafka topic:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM SONOS_HEALTH_METRICS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;sonos_metrics_01&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;MAP&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;DEVICE&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;ZPINFO) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; TAGS,
            (( (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CAST&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SUBSTRING&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DATA&lt;/span&gt;[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;],&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; DOUBLE) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CAST&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SUBSTRING&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DATA&lt;/span&gt;[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;],&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; DOUBLE) &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CAST&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SUBSTRING&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DATA&lt;/span&gt;[&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;],&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; DOUBLE)) &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; )) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; AVG_NOISE_FLOOR_DBM,
            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CAST&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SUBSTRING&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DATA&lt;/span&gt;[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;],&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; DOUBLE) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; NOISE_FLOOR_DBM0,
            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CAST&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SUBSTRING&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DATA&lt;/span&gt;[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;],&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; DOUBLE) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; NOISE_FLOOR_DBM1,
            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CAST&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SUBSTRING&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DATA&lt;/span&gt;[&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;],&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; DOUBLE) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; NOISE_FLOOR_DBM2,
            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CAST&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SUBSTRING&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DATA&lt;/span&gt;[&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;],&lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;INT&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; OFDM_ANI_LEVEL,
            (&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CAST&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SUBSTRING&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DATA&lt;/span&gt;[&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;],&lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;INT&lt;/span&gt;))&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; OFDM_ANI_LEVEL_ADJUSTED
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt;   SONOS_RAW
    EMIT CHANGES ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Note the schemas includes a &lt;code&gt;MAP&lt;/code&gt; for the tags, which we&amp;#8217;ll use to load into InfluxDB shortly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DESCRIBE&lt;/span&gt; SONOS_HEALTH_METRICS;

Name                 : SONOS_HEALTH_METRICS
 Field                   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Type&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; ROWTIME                 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;BIGINT&lt;/span&gt;           (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;system&lt;/span&gt;)
 ROWKEY                  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)  (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;system&lt;/span&gt;)
 TAGS                    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;MAP&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;STRING, &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;
 AVG_NOISE_FLOOR_DBM     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; DOUBLE
 NOISE_FLOOR_DBM0        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; DOUBLE
 NOISE_FLOOR_DBM1        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; DOUBLE
 NOISE_FLOOR_DBM2        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; DOUBLE
 OFDM_ANI_LEVEL          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;INTEGER&lt;/span&gt;
 OFDM_ANI_LEVEL_ADJUSTED &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;INTEGER&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;For&lt;/span&gt; runtime &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;statistics&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;and&lt;/span&gt; query details run: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DESCRIBE&lt;/span&gt; EXTENDED &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;Stream,&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Table&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;From this fairly simple transformation we now have a set of metrics which we can query from the stream:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TIMESTAMPTOSTRING(ROWTIME,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Europe/London&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; TS, 
             TAGS[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;DEVICE&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; DEVICE, 
             AVG_NOISE_FLOOR_DBM, 
             OFDM_ANI_LEVEL_ADJUSTED 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; SONOS_HEALTH_METRICS 
        EMIT CHANGES 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------+-------------+----------------------+-------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;TS                   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;DEVICE       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;AVG_NOISE_FLOOR_DBM   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;OFDM_ANI_LEVEL_ADJUSTED  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------+-------------+----------------------+-------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;06&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;33&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;24&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Sitting Room &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;                   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;06&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Kitchen      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;104&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;33333333333333&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;06&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;36&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;30&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Study (L)    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;                   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;06&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;37&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Bedroom      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;103&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;66666666666667&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;06&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;37&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Study (R)    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;                   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Limit&lt;/span&gt; Reached
Query terminated
ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can also query it from the underlying Kafka topic:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; PRINT sonos_metrics_01 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;;
Format:JSON
&lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ROWTIME&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1578956524472&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ROWKEY&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;TAGS&amp;#34;&lt;/span&gt;:&lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;DEVICE&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Study (R)&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AVG_NOISE_FLOOR_DBM&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;NOISE_FLOOR_DBM0&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;NOISE_FLOOR_DBM1&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;NOISE_FLOOR_DBM2&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;OFDM_ANI_LEVEL&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;OFDM_ANI_LEVEL_ADJUSTED&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ROWTIME&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1578956524472&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ROWKEY&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;TAGS&amp;#34;&lt;/span&gt;:&lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;DEVICE&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Dining Room&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AVG_NOISE_FLOOR_DBM&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;NOISE_FLOOR_DBM0&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;NOISE_FLOOR_DBM1&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;NOISE_FLOOR_DBM2&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;OFDM_ANI_LEVEL&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;OFDM_ANI_LEVEL_ADJUSTED&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ROWTIME&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1578956524472&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ROWKEY&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;TAGS&amp;#34;&lt;/span&gt;:&lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;DEVICE&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Kitchen&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AVG_NOISE_FLOOR_DBM&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;104&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;33333333333333&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;NOISE_FLOOR_DBM0&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;104&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;NOISE_FLOOR_DBM1&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;109&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;NOISE_FLOOR_DBM2&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;E&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;OFDM_ANI_LEVEL&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;OFDM_ANI_LEVEL_ADJUSTED&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ROWTIME&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1578956524472&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ROWKEY&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;TAGS&amp;#34;&lt;/span&gt;:&lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;DEVICE&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Sitting Room&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AVG_NOISE_FLOOR_DBM&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;NOISE_FLOOR_DBM0&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;NOISE_FLOOR_DBM1&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;NOISE_FLOOR_DBM2&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;OFDM_ANI_LEVEL&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;OFDM_ANI_LEVEL_ADJUSTED&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ROWTIME&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1578956603128&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ROWKEY&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;TAGS&amp;#34;&lt;/span&gt;:&lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;DEVICE&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Study (R)&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AVG_NOISE_FLOOR_DBM&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;NOISE_FLOOR_DBM0&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;NOISE_FLOOR_DBM1&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;NOISE_FLOOR_DBM2&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;OFDM_ANI_LEVEL&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;OFDM_ANI_LEVEL_ADJUSTED&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_transform_the_message_structure_to_load_into_influxdb&#34;&gt;Transform the message structure to load into InfluxDB&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In a moment we&amp;#8217;re going to stream all this data into InfluxDB, but first we need to do a little &lt;a href=&#34;https://libquotes.com/linus-torvalds/quote/lbr1k4j&#34;&gt;&lt;code&gt;random jiggling&lt;/code&gt;&lt;/a&gt; to get the data into an appropriate format.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock warning&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Warning&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
This is not part of a normal ksqlDB pipeline! It&amp;#8217;s just a hacky workaround to deal with some slightly misaligned interfaces.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In a nutshell, the InfluxDB connector needs the data to either have a schema embedded in the JSON, or the Avro schema to be constructed a certain way (&lt;code&gt;map&lt;/code&gt; not &lt;code&gt;array&lt;/code&gt;). Here we&amp;#8217;ll interpolate the JSON-with-schema shell with the payload value, using kafkacat:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;kafkacat&lt;/code&gt; reads from the topic, pipes it into &lt;code&gt;jq&lt;/code&gt; which adds the schema definition, and then pipes it to another instance of &lt;code&gt;kafkacat&lt;/code&gt; which writes it to a new topic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker exec -it kafkacat /bin/sh -c &#39;kafkacat -b kafka-1:39092,kafka-2:49092,kafka-3:59092 -q -u -X auto.offset.reset=latest -G sonos_rmoff_cg_01 sonos_metrics_01 |jq -c &#39;&#34;&#39;&#34;&#39;. |
{   schema: { type: &#34;struct&#34;, optional: false, version: 1, fields: [
            { field: &#34;tags&#34;, type: &#34;map&#34;, keys: {type: &#34;string&#34;, optional: false}, values: {type: &#34;string&#34;, optional: false}, optional: false },
            { field: &#34;AVG_NOISE_FLOOR_DBM&#34;, type: &#34;double&#34;, optional: true},
            { field: &#34;NOISE_FLOOR_DBM0&#34;, type: &#34;double&#34;, optional: true},
            { field: &#34;NOISE_FLOOR_DBM1&#34;, type: &#34;double&#34;, optional: true},
            { field: &#34;NOISE_FLOOR_DBM2&#34;, type: &#34;double&#34;, optional: true},
            { field: &#34;OFDM_ANI_LEVEL&#34;, type: &#34;double&#34;, optional: true},
            { field: &#34;OFDM_ANI_LEVEL_ADJUSTED&#34;, type: &#34;double&#34;, optional: true}]},
    payload: {
        tags:  .TAGS ,
        AVG_NOISE_FLOOR_DBM: .AVG_NOISE_FLOOR_DBM,
        NOISE_FLOOR_DBM0: .NOISE_FLOOR_DBM0,
        NOISE_FLOOR_DBM1: .NOISE_FLOOR_DBM1,
        NOISE_FLOOR_DBM2: .NOISE_FLOOR_DBM2,
        OFDM_ANI_LEVEL: .OFDM_ANI_LEVEL,
        OFDM_ANI_LEVEL_ADJUSTED: .OFDM_ANI_LEVEL_ADJUSTED
        }
}&#39;&#34;&#39;&#34;&#39; | \
kafkacat -b kafka-1:39092,kafka-2:49092,kafka-3:59092 -t sonos_metrics_01_json_with_schema -P -T&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{
  &#34;TAGS&#34;: {
    &#34;DEVICE&#34;: &#34;Kitchen&#34;
  },
  &#34;AVG_NOISE_FLOOR_DBM&#34;: 104.33333333333333,
  &#34;NOISE_FLOOR_DBM0&#34;: -104,
  &#34;NOISE_FLOOR_DBM1&#34;: -109,
  &#34;NOISE_FLOOR_DBM2&#34;: -100,
  &#34;OFDM_ANI_LEVEL&#34;: 5,
  &#34;OFDM_ANI_LEVEL_ADJUSTED&#34;: 3
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Becomes this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{
    &#34;schema&#34;: { &#34;type&#34;: &#34;struct&#34;, &#34;optional&#34;: false, &#34;version&#34;: 1, &#34;fields&#34;: [
        {&#34;field&#34;: &#34;tags&#34;, &#34;type&#34;: &#34;map&#34;, &#34;keys&#34;: { &#34;type&#34;: &#34;string&#34;, &#34;optional&#34;: false }, &#34;values&#34;: { &#34;type&#34;: &#34;string&#34;, &#34;optional&#34;: false }, &#34;optional&#34;: false },
        {&#34;field&#34;: &#34;AVG_NOISE_FLOOR_DBM&#34;, &#34;type&#34;: &#34;double&#34;, &#34;optional&#34;: true },
        { &#34;field&#34;: &#34;NOISE_FLOOR_DBM0&#34;, &#34;type&#34;: &#34;double&#34;, &#34;optional&#34;: true },
        { &#34;field&#34;: &#34;NOISE_FLOOR_DBM1&#34;, &#34;type&#34;: &#34;double&#34;, &#34;optional&#34;: true },
        { &#34;field&#34;: &#34;NOISE_FLOOR_DBM2&#34;, &#34;type&#34;: &#34;double&#34;, &#34;optional&#34;: true },
        { &#34;field&#34;: &#34;OFDM_ANI_LEVEL&#34;, &#34;type&#34;: &#34;double&#34;, &#34;optional&#34;: true },
        { &#34;field&#34;: &#34;OFDM_ANI_LEVEL_ADJUSTED&#34;, &#34;type&#34;: &#34;double&#34;, &#34;optional&#34;: true }
        ]
    },
    &#34;payload&#34;: {
        &#34;tags&#34;: { &#34;device&#34;: &#34;Dining Room&#34; },
        &#34;AVG_NOISE_FLOOR_DBM&#34;: -0,
        &#34;NOISE_FLOOR_DBM0&#34;: 0,
        &#34;NOISE_FLOOR_DBM1&#34;: 0,
        &#34;NOISE_FLOOR_DBM2&#34;: 0,
        &#34;OFDM_ANI_LEVEL&#34;: null,
        &#34;OFDM_ANI_LEVEL_ADJUSTED&#34;: null
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Whilst kafkacat is pretty neat for this kind of message manipulation, note that it will not preserve the partition, timestamp, or header of the source message.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_stream_data_from_kafka_into_influxdb&#34;&gt;Stream data from Kafka into InfluxDB&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Back in ksqlDB we can now create a connector:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;CREATE SINK CONNECTOR SINK_INFLUX_01 WITH (
        &#39;connector.class&#39;               = &#39;io.confluent.influxdb.InfluxDBSinkConnector&#39;,
        &#39;value.converter&#39;               = &#39;org.apache.kafka.connect.json.JsonConverter&#39;,
        &#39;value.converter.schemas.enable&#39;= &#39;true&#39;,
        &#39;topics&#39;                        = &#39;sonos_metrics_01_json_with_schema&#39;,
        &#39;influxdb.url&#39;                  = &#39;http://influxdb:8086&#39;,
        &#39;influxdb.db&#39;                   = &#39;sonos&#39;,
        &#39;measurement.name.format&#39;       = &#39;metrics&#39;
  );&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check the connector status:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&amp;gt; SHOW CONNECTORS;

 Connector Name | Type | Class                                       | Status
---------------------------------------------------------------------------------------------------
 SINK_INFLUX_01 | SINK | io.confluent.influxdb.InfluxDBSinkConnector | RUNNING (1/1 tasks RUNNING)
---------------------------------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And in InfluxDB itself we can see data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker &lt;span style=&#34;color:#008000&#34;&gt;exec&lt;/span&gt; -it influxdb influx -execute &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;SHOW MEASUREMENTS&amp;#39;&lt;/span&gt; -database &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;sonos&amp;#39;&lt;/span&gt;
name: measurements
name
----
metrics
----

docker &lt;span style=&#34;color:#008000&#34;&gt;exec&lt;/span&gt; -it influxdb influx -database &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;sonos&amp;#39;&lt;/span&gt; -execute &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;SELECT LAST(&amp;#34;AVG_NOISE_FLOOR_DBM&amp;#34;) FROM &amp;#34;metrics&amp;#34; GROUP BY &amp;#34;device&amp;#34; LIMIT 3;&amp;#39;&lt;/span&gt;
name: metrics
tags: &lt;span style=&#34;color:#19177c&#34;&gt;device&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;Bedroom
&lt;span style=&#34;color:#008000&#34;&gt;time&lt;/span&gt;                last
----                ----
&lt;span style=&#34;color:#666&#34;&gt;1579608296503000000&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;103&lt;/span&gt;.66666666666667

name: metrics
tags: &lt;span style=&#34;color:#19177c&#34;&gt;device&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;Dining Room
&lt;span style=&#34;color:#008000&#34;&gt;time&lt;/span&gt;                last
----                ----
&lt;span style=&#34;color:#666&#34;&gt;1579608234480000000&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;

name: metrics
tags: &lt;span style=&#34;color:#19177c&#34;&gt;device&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;Kitchen
&lt;span style=&#34;color:#008000&#34;&gt;time&lt;/span&gt;                last
----                ----
&lt;span style=&#34;color:#666&#34;&gt;1579608296491000000&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;104&lt;/span&gt;.33333333333333&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_visualisation&#34;&gt;Visualisation&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Grafana is the tool I&amp;#8217;m more familiar with, and plays nicely with InfluxDB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/01/sonos01.png&#34; alt=&#34;Sonos data plotted in Grafana&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;ve taken the thresholds that the Sonos network matrix javascript code (quoted above) uses to determine good/warning/bad and overlaid these on the charts and used them to background colour the current values.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe src=&#34;https://snapshot.raintank.io/dashboard-solo/snapshot/CcjhhhJZy2sVCqYylAAlxF62cx6DaFgi?orgId=2&amp;from=1579644113369&amp;to=1579652250260&amp;var-Device=Bedroom&amp;var-Device=Kitchen&amp;panelId=7&#34; width=&#34;550&#34; height=&#34;200&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can try the Grafana dashboard &lt;a href=&#34;https://snapshot.raintank.io/dashboard/snapshot/qBALXdQGwjU37KTO8Q1zAZ7o8IjaGisB&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It&amp;#8217;s worth noting that in recent years Influx have developed their own visualisation tool, Chronograf, which is pretty nice too&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/01/sonos02.png&#34; alt=&#34;Sonos data plotted in Chronograf&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_aggregation_in_ksqldb&#34;&gt;Aggregation in ksqlDB&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Because ksqlDB gives you a SQL interface to the data in Apache Kafka you can do things like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Apply threshold calculations to the data as it passes through:&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM DEVICE_STATUS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; 
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TIMESTAMPTOSTRING(ROWTIME,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Europe/London&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; TS, 
            TAGS[&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;DEVICE&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; DEVICE, 
            AVG_NOISE_FLOOR_DBM,
            OFDM_ANI_LEVEL_ADJUSTED,
            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CASE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHEN&lt;/span&gt; AVG_NOISE_FLOOR_DBM &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;94&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AND&lt;/span&gt; OFDM_ANI_LEVEL_ADJUSTED &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;THEN&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;GREEN&amp;#39;&lt;/span&gt;
                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHEN&lt;/span&gt; AVG_NOISE_FLOOR_DBM &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AND&lt;/span&gt; OFDM_ANI_LEVEL_ADJUSTED &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;THEN&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;YELLOW&amp;#39;&lt;/span&gt;
                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHEN&lt;/span&gt; AVG_NOISE_FLOOR_DBM &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AND&lt;/span&gt; OFDM_ANI_LEVEL_ADJUSTED &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;THEN&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;ORANGE&amp;#39;&lt;/span&gt;
                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHEN&lt;/span&gt; OFDM_ANI_LEVEL_ADJUSTED &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;THEN&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;RED&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;END&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; STATUS
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt;    SONOS_HEALTH_METRICS
    EMIT CHANGES;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TS, DEVICE, AVG_NOISE_FLOOR_DBM, OFDM_ANI_LEVEL_ADJUSTED, STATUS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; DEVICE_STATUS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; STATUS &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;NULL&lt;/span&gt; EMIT CHANGES &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------+----------+---------------------+------------------------+-------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;TS                  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;DEVICE    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;AVG_NOISE_FLOOR_DBM  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;OFDM_ANI_LEVEL_ADJUSTED &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;STATUS &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------+----------+---------------------+------------------------+-------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;06&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;23&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;04&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Bedroom   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;103&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;66666666666667&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;                       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ORANGE &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;05&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Bedroom   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;103&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;66666666666667&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;                       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ORANGE &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Bedroom   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;103&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;66666666666667&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;                       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ORANGE &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;06&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;24&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;06&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Bedroom   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;103&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;                &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;                       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ORANGE &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Bedroom   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;103&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;66666666666667&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;                       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;RED    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Limit&lt;/span&gt; Reached
Query terminated&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show aggregate values based on the data in the Kafka topic:&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TIMESTAMPTOSTRING(WINDOWSTART(),&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Europe/London&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; WINDOW_START_TS, 
             DEVICE, 
             STATUS, 
             &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; STATUS_COUNT 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; DEVICE_STATUS 
                WINDOW TUMBLING (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SIZE&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DAY&lt;/span&gt;) 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; DEVICE&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Kitchen&amp;#39;&lt;/span&gt; 
          &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AND&lt;/span&gt; ROWTIME &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; (UNIX_TIMESTAMP() &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;86400000&lt;/span&gt;) 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;BY&lt;/span&gt; DEVICE, STATUS 
        EMIT CHANGES;

&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------+---------+----------+---------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;WINDOW_START_TS      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;DEVICE   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;STATUS    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;STATUS_COUNT   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------+---------+----------+---------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Kitchen  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;YELLOW    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;183&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Kitchen  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;RED       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;162&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Kitchen  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ORANGE    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;156&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Kitchen  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;GREEN     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;              &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
[&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_try_it_out&#34;&gt;Try it out!&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Grab the &lt;a href=&#34;https://github.com/confluentinc/demo-scene/blob/master/sonos&#34;&gt;Docker Compose from here&lt;/a&gt;, and give it a whirl.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;You need to find the IP of your Sonos device (e.g. from the Sonos mobile app &lt;code&gt;About My System&lt;/code&gt;), and put this in the &lt;code&gt;log-sonos-to-kafka.sh&lt;/code&gt; file and then execute it:&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./log-sonos-to-kafka.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Launch ksqlDB CLI:&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker &lt;span style=&#34;color:#008000&#34;&gt;exec&lt;/span&gt; -it ksqldb-cli bash -c &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;echo -e &amp;#34;\n\n⏳ Waiting for ksqlDB to be available before launching CLI\n&amp;#34;; while : ; do curl_status=$(curl -s -o /dev/null -w %{http_code} http://ksqldb-server:8088/info) ; echo -e $(date) &amp;#34; ksqlDB server listener HTTP state: &amp;#34; $curl_status &amp;#34; (waiting for 200)&amp;#34; ; if [ $curl_status -eq 200 ] ; then  break ; fi ; sleep 5 ; done ; ksql http://ksqldb-server:8088&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Then run through the article as shown, and enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You&amp;#8217;ll find Grafana at &lt;a href=&#34;http://localhost:3000&#34; class=&#34;bare&#34;&gt;http://localhost:3000&lt;/a&gt; (login &lt;code&gt;admin&lt;/code&gt;/&lt;code&gt;admin&lt;/code&gt;) and Chronograf at &lt;a href=&#34;http://localhost:8888/&#34; class=&#34;bare&#34;&gt;http://localhost:8888/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_appendix_todo&#34;&gt;Appendix : TODO&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The data at &lt;code&gt;http://&amp;lt;sonos player IP&amp;gt;:1400/support/review&lt;/code&gt; also includes other things that would be interesting to extract and plot:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the signal strength between each device&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the &lt;code&gt;ifconfig&lt;/code&gt; stats for each device (packets received/dropped/errors etc)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_appendix_other_interesting_sonos_web_endpoints&#34;&gt;Appendix : Other interesting Sonos web endpoints&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/status/zp&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/status/proc/ath_rincon/status&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/status/ifconfig&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/status/showstp&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/tools.htm&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_sodid_you_fix_your_sonos_problems&#34;&gt;So…did you fix your Sonos problems?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So I started this article with a teaser about a problem with my Sonos equipment, and how I wanted to try and troubleshoot it. What did I learn (other than plain-text is a crappy way to share metrics and is a PITA to parse)?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Well, whilst doing all this data stuff, I also moved all but one of my Sonos devices to &#34;SonosNet&#34;, and away from wired connections. I&amp;#8217;m using Powerline connectors in my house for hard wiring, and it&amp;#8217;s not always great. Turns out the Sonos devices on their own wifi network work much better. So now I have a single Sonos device that&amp;#8217;s wired into my router, and the rest just use a wifi link between themselves (separate from my home wifi network). This seems to have fixed the problem that I had with &#34;burbling&#34; and cutouts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_footnote&#34;&gt;Footnote&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Turns out the timing of this blog &lt;a href=&#34;https://www.theverge.com/2019/12/30/21042871/sonos-recycle-mode-trade-up-program-controversy&#34;&gt;wasn&amp;#8217;t so great&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Thread! I just got a letter from &lt;a href=&#34;https://twitter.com/Sonos?ref_src=twsrc%5Etfw&#34;&gt;@Sonos&lt;/a&gt; about one of my old speakers. At face value it seems innocuous, but read between the lines and it&amp;#39;s actually fairly threatening. &lt;a href=&#34;https://t.co/b0DZCrBuwW&#34;&gt;pic.twitter.com/b0DZCrBuwW&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sean Bonner Ⓥ (@seanbonner) &lt;a href=&#34;https://twitter.com/seanbonner/status/1219760460028760065?ref_src=twsrc%5Etfw&#34;&gt;January 21, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>UnsupportedClassVersionError: `&lt;x&gt;` has been compiled by a more recent version of the Java Runtime</title>
      <link>https://rmoff.net/2020/01/21/unsupportedclassversionerror-x-has-been-compiled-by-a-more-recent-version-of-the-java-runtime/</link>
      <pubDate>2020-01-21</pubDate>
      
      <guid>https://rmoff.net/2020/01/21/unsupportedclassversionerror-x-has-been-compiled-by-a-more-recent-version-of-the-java-runtime/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/01/IMG_2114.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This article is just for Googlers and my future self encountering this error. Recently I was building a Docker image from the ksqlDB code base, and whilst it built successfully the ksqlDB server process in the Docker container when instantiated failed with a &lt;code&gt;UnsupportedClassVersionError&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;java.lang.UnsupportedClassVersionError: javafx/beans/value/ObservableValue has been compiled by a more recent version of the Java Runtime &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;class file version &lt;span style=&#34;color:#666&#34;&gt;54&lt;/span&gt;.0&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;, this version of the Java Runtime only recognizes class file versions up to &lt;span style=&#34;color:#666&#34;&gt;52&lt;/span&gt;.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s how I fixed it, courtesy of help from my colleagues Colin and Tim.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Download &lt;a href=&#34;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&#34;&gt;JDK 8 (&#34;Java SE&#34;)&lt;/a&gt; and install it&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On my Mac I had an existing Java, &lt;a href=&#34;https://medium.com/@devkosal/switching-java-jdk-versions-on-macos-80bc868e686a&#34;&gt;this article&lt;/a&gt; showed how to list them and switch between them&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ /usr/libexec/java_home -V

Matching Java Virtual Machines &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;:
    &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;.0.2, x86_64:	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;OpenJDK 12.0.2&amp;#34;&lt;/span&gt;	/Library/Java/JavaVirtualMachines/adoptopenjdk-12.0.2.jdk/Contents/Home
    &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;.8.0_241, x86_64:	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Java SE 8&amp;#34;&lt;/span&gt;	/Library/Java/JavaVirtualMachines/jdk1.8.0_241.jdk/Contents/Home&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the &lt;code&gt;JAVA_HOME&lt;/code&gt; for your current shell to JDK 8&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;JAVA_HOME&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;`&lt;/span&gt;/usr/libexec/java_home -v &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;.8&lt;span style=&#34;color:#ba2121&#34;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the same shell, run&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;`&lt;/span&gt;mvn clean&lt;span style=&#34;color:#ba2121&#34;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the same shell, run the actual Maven build, which will now be done under Java 8 and should work 🤞&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Changing the Logging Level for Kafka Connect Dynamically</title>
      <link>https://rmoff.net/2020/01/16/changing-the-logging-level-for-kafka-connect-dynamically/</link>
      <pubDate>2020-01-16</pubDate>
      
      <guid>https://rmoff.net/2020/01/16/changing-the-logging-level-for-kafka-connect-dynamically/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/01/IMG_0102.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Logs are magical things. They tell us what an application is doing—or not doing. They help us debug problems. As it happens, they also underpin the &lt;a href=&#34;https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying&#34;&gt;entire philosophy of Apache Kafka&lt;/a&gt;, but that&amp;#8217;s a story for another day. Today we&amp;#8217;re talking about logs written by Kafka Connect, and how we can change the amount of detail written.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;By default, Kafka Connect will write logs at &lt;code&gt;INFO&lt;/code&gt; and above. So when it starts up, the settings that it&amp;#8217;s using, and any &lt;code&gt;WARN&lt;/code&gt; or &lt;code&gt;ERROR&lt;/code&gt; messages along the way - a missing configuration, a broken connector, and so on. If you want to peer under the covers of what&amp;#8217;s happening, perhaps in a given connector, you&amp;#8217;d want to see &lt;code&gt;DEBUG&lt;/code&gt; or even &lt;code&gt;TRACE&lt;/code&gt; messages too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Until Apache Kafka 2.4 it was necessary to bring down the Kafka Connect worker, &lt;a href=&#34;https://rmoff.net/post/kafka-connect-change-log-level-and-write-log-to-file/&#34;&gt;change the log configuration file&lt;/a&gt;, and restart the worker. There are a few problems with this approach:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Where&amp;#8217;s the log configuration file? It can be fiddly to find, especially if you&amp;#8217;re not regularly working with it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you&amp;#8217;re troubleshooting a connector with an issue that&amp;#8217;s intermittent, restarting the worker may clear the problem, so you lose the opportunity to see the more detailed log&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you&amp;#8217;re trying to get the log files for just a certain element of the logs generated it can be trial-and-error to get the configuration for this, and thus a really long-winded process with stopping and starting the worker each time until you get it right&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_changing_the_log_level_of_kafka_connect&#34;&gt;Changing the log level of Kafka Connect&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With the implementation of &lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/KIP-495%3A+Dynamically+Adjust+Log+Levels+in+Connect&#34;&gt;KIP-495&lt;/a&gt; it&amp;#8217;s possible to leave the Kafka Connect worker running and change log levels dynamically. This is &lt;strong&gt;VERY&lt;/strong&gt; useful. Let me show you why.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To start with Kafka Connect is running at the default &lt;code&gt;INFO&lt;/code&gt; level. We can confirm this by querying the new &lt;code&gt;admin/logger&lt;/code&gt; API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ curl -s http://localhost:8083/admin/loggers/ | jq
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;org.apache.kafka.connect.runtime.rest&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;WARN&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;org.reflections&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ERROR&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;INFO&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For reference, this corresponds to the three loggers that are configured in log4j:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cat /etc/kafka/connect-log4j.properties

log4j.rootLogger&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;INFO, stdout
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;…&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
log4j.logger.org.reflections&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;ERROR
log4j.logger.org.apache.kafka.connect.runtime.rest&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;WARN&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can reference any particular logger that you want. Imagine you&amp;#8217;ve got a connector that you want to inspect, but without the noise of &lt;code&gt;TRACE&lt;/code&gt; logging throughout. You can target just this set of logs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ curl -s -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    http://localhost:8083/admin/loggers/org.apache.kafka.connect.runtime.WorkerSourceTask &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;level&amp;#34;: &amp;#34;TRACE&amp;#34;}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script id=&#34;asciicast-rrTTMT9Bb3jpss0IhSsqIhJsT&#34; src=&#34;https://asciinema.org/a/rrTTMT9Bb3jpss0IhSsqIhJsT.js&#34; async&gt;&lt;/script&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To revert the logging you just re-issue the API call with a different &lt;code&gt;level&lt;/code&gt; set:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ curl -s -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    http://localhost:8083/admin/loggers/org.apache.kafka.connect.runtime.WorkerSourceTask &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;level&amp;#34;: &amp;#34;INFO&amp;#34;}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_dynamic_log_levels_in_action_for_troubleshooting_debezium&#34;&gt;Dynamic log levels in action for troubleshooting Debezium&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I had great use for this just today when I was &lt;a href=&#34;https://stackoverflow.com/a/59756354/350613&#34;&gt;debugging a problem that someone was having with Debezium&lt;/a&gt;. In this case, I spun up Kafka Connect with its default config, and simply bumped up the logs for Debezium so that I could see in detail what it was doing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ curl -s -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    http://localhost:8083/admin/loggers/io.debezium &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;level&amp;#34;: &amp;#34;TRACE&amp;#34;}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.debezium&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.debezium.connector.mysql.MySqlConnector&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.debezium.connector.postgresql.PostgresConnector&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.debezium.util.IoUtil&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now I can see exactly what&amp;#8217;s going on&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;…
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;-01-16 &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;:47:26,864&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; TRACE Polling &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; events &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;io.debezium.connector.mysql.MySqlConnectorTask&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;-01-16 &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;:47:26,864&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; TRACE Polling &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; next batch of records &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;io.debezium.connector.mysql.BinlogReader&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;-01-16 &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;:47:26,866&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; INFO Creating thread debezium-mysqlconnector-asgard-binlog-client &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;io.debezium.util.Threads&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;-01-16 &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;:47:26,913&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; DEBUG Rotating logs: Event&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;header&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;EventHeaderV4&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;eventType&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;ROTATE, &lt;span style=&#34;color:#19177c&#34;&gt;serverId&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;headerLength&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;dataLength&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;nextPosition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;flags&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RotateEventData&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;binlogFilename&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;binlog.000002&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;binlogPosition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;155&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}}&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;io.debezium.connector.mysql.BinlogReader&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;-01-16 &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;:47:26,914&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; DEBUG Clearing table converters &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;io.debezium.connector.mysql.RecordMakers&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;-01-16 &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;:47:26,916&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; TRACE Received event: Event&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;header&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;EventHeaderV4&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;eventType&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;ROTATE, &lt;span style=&#34;color:#19177c&#34;&gt;serverId&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;headerLength&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;dataLength&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;nextPosition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;flags&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;RotateEventData&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;binlogFilename&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;binlog.000002&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;binlogPosition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;155&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}}&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;io.debezium.connector.mysql.BinlogReader&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;-01-16 &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;:47:26,918&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; TRACE Ignoring event due to missing handler: Event&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;header&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;EventHeaderV4&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1579212895000&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;eventType&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;FORMAT_DESCRIPTION, &lt;span style=&#34;color:#19177c&#34;&gt;serverId&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;headerLength&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;dataLength&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;nextPosition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;flags&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;FormatDescriptionEventData&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;binlogVersion&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;serverVersion&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;8.0.18&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;headerLength&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;dataLength&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;96&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;checksumType&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;CRC32&lt;span style=&#34;color:#666&#34;&gt;}}&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;io.debezium.connector.mysql.BinlogReader&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;-01-16 &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;:47:26,918&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; TRACE Received event: Event&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;header&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;EventHeaderV4&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1579212895000&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;eventType&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;FORMAT_DESCRIPTION, &lt;span style=&#34;color:#19177c&#34;&gt;serverId&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;headerLength&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;dataLength&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;nextPosition&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;flags&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;FormatDescriptionEventData&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;binlogVersion&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;serverVersion&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;8.0.18&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;headerLength&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;dataLength&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;96&lt;/span&gt;, &lt;span style=&#34;color:#19177c&#34;&gt;checksumType&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;CRC32&lt;span style=&#34;color:#666&#34;&gt;}}&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;io.debezium.connector.mysql.BinlogReader&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;-01-16 &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;:47:31,929&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; TRACE Completed batch of &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; records &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;io.debezium.connector.mysql.BinlogReader&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
…&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and when I&amp;#8217;m done troubleshooting I can leave the stack undisturbed and simple dial down the logging:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ curl -s -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    http://localhost:8083/admin/loggers/io.debezium &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;level&amp;#34;: &amp;#34;INFO&amp;#34;}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;No more restarting workers, no more fiddling with logging configuration files - just simple and straightforward dynamic log levels 😍&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_preset_values_for_troubleshooting_connectors&#34;&gt;Preset values for troubleshooting connectors&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Set &lt;code&gt;TRACE&lt;/code&gt; logging for all but the noisiest of logs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -s -X PUT http://localhost:8083/admin/loggers/root -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;level&amp;#34;: &amp;#34;TRACE&amp;#34;}&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
curl -s -X PUT http://localhost:8083/admin/loggers/org.apache.kafka.clients.consumer.internals -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;level&amp;#34;: &amp;#34;INFO&amp;#34;}&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
curl -s -X PUT http://localhost:8083/admin/loggers/org.apache.kafka.clients.FetchSessionHandler -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;level&amp;#34;: &amp;#34;INFO&amp;#34;}&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
curl -s -X PUT http://localhost:8083/admin/loggers/org.apache.kafka.clients.Metadata -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;level&amp;#34;: &amp;#34;INFO&amp;#34;}&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
curl -s -X PUT http://localhost:8083/admin/loggers/org.apache.kafka.clients.NetworkClient -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;level&amp;#34;: &amp;#34;INFO&amp;#34;}&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
curl -s -X PUT http://localhost:8083/admin/loggers/org.apache.kafka.common.metrics -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;level&amp;#34;: &amp;#34;INFO&amp;#34;}&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
curl -s -X PUT http://localhost:8083/admin/loggers/org.eclipse.jetty -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;level&amp;#34;: &amp;#34;INFO&amp;#34;}&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Trace specific connectors:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -s -X PUT http://localhost:8083/admin/loggers/io.debezium -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;level&amp;#34;: &amp;#34;TRACE&amp;#34;}&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
curl -s -X PUT http://localhost:8083/admin/loggers/io.confluent.influxdb -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;level&amp;#34;: &amp;#34;TRACE&amp;#34;}&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Dial down the logging a bit:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -s -X PUT http://localhost:8083/admin/loggers/io.confluent.influxdb -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;level&amp;#34;: &amp;#34;DEBUG&amp;#34;}&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
curl -s -X PUT http://localhost:8083/admin/loggers/org.apache.kafka.connect.runtime -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;level&amp;#34;: &amp;#34;INFO&amp;#34;}&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>How to win [or at least not suck] at the conference abstract submission game</title>
      <link>https://rmoff.net/2020/01/16/how-to-win-or-at-least-not-suck-at-the-conference-abstract-submission-game/</link>
      <pubDate>2020-01-16</pubDate>
      
      <guid>https://rmoff.net/2020/01/16/how-to-win-or-at-least-not-suck-at-the-conference-abstract-submission-game/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/01/IMG_2206.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Just over a year ago, I put together the crudely-titled &lt;a href=&#34;https://rmoff.net/2018/12/19/quick-thoughts-on-not-writing-a-crap-abstract/&#34;&gt;&#34;Quick Thoughts on Not Writing a Crap Abstract&#34;&lt;/a&gt; after reviewing a few dozen conference abstracts. This time around I&amp;#8217;ve had the honour of being on a conference programme committee and with it the pleasure of reading 250+ abstracts—from which I have some more snarky words of wisdom to impart on the matter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_remind_mehow_does_this_conference_game_work&#34;&gt;Remind me…how does this conference game work?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Before we really get into it, let&amp;#8217;s recap how this whole game works, because plenty of people are new to conference speaking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;A conference will usually have a &#34;call for papers&#34; (CfP) that is open for a period of time, during which you can submit your &#34;paper&#34;. Except, this isn&amp;#8217;t an academic conference to which you &lt;strong&gt;actually&lt;/strong&gt; submit a paper for peer-review prior to presenting it. Technical conferences generally work on &#34;abstracts&#34;.&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your abstract is a description of the talk that you intend to give. At this stage its sole purpose is as a &#34;pitch&#34; to the conference programme committee. &lt;strong&gt;You do not need to have written your talk before submitting the abstract&lt;/strong&gt;. In fact, if it&amp;#8217;s a new talk, I wouldn&amp;#8217;t write it until you get it accepted somewhere. Abstracts let you test the water for an idea, and once you have an audience for it, &lt;strong&gt;then&lt;/strong&gt; you can develop it into a talk.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once the CfP has closed (and occasionally before) the conference&amp;#8217;s programme committee will review all of the submitted abstracts.&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Allow me to let you into a dirty little secret: not every abstract is always going to get read in its entirety and at length&lt;/em&gt;. Conferences will have &lt;em&gt;hundreds&lt;/em&gt; (if not thousands) of submissions, and most of the time the programme committee will be volunteers kindly giving up their time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Consider this: if you have 200 abstracts to review and spend &lt;strong&gt;just two minutes&lt;/strong&gt; on each, that&amp;#8217;s already nearly seven hours. And think what you can actually do in that time (including the context switching between subjects, opening the abstract, logging the score). It&amp;#8217;s not a lot…scan the title, start reading the abstract…&lt;strong&gt;tick tock…DONE. NEXT ABSTRACT&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Even allowing for a more leisurely review process, the point still stands: &lt;strong&gt;you need to stack the odds in your favour&lt;/strong&gt; because in general if your abstract is not &lt;em&gt;crystal clear&lt;/em&gt; people are not going to go searching through it to discern what you meant - it&amp;#8217;ll just go onto the &#39;maybe&#39; or &#39;nope&#39; pile.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The programme committee decides on the talks to accept and send out notifications.&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Your talk got accepted? Yay! Now you get to go and write it :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your talk didn&amp;#8217;t get accepted? Never mind. In 2019 I got accepted by 57% of conferences to which I submitted - which is the same as saying that pretty much half the conferences reject every submission - and I&amp;#8217;ve been doing this a while so know a thing or two about crafting abstracts. Not to say they couldn&amp;#8217;t be improved, but just to give you an idea of how often you might strike out.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Don&amp;#8217;t hold off submitting to speak at conferences until your dream conference (Kafka Summit, obviously) comes up. I&amp;#8217;m not saying to submit your talk to &lt;em&gt;every single conference ever&lt;/em&gt;. But I am saying get practice in writing abstracts, navigating the CfP process, and getting experience speaking - all of these will help you, in the long run, to load the dice in your favour when it comes to conferences at which you &lt;em&gt;really really&lt;/em&gt; want to speak.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_show_that_you_care&#34;&gt;Show that you care&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you&amp;#8217;re serious about wanting to speak at a conference then I would recommend that you &lt;strong&gt;invest some serious time in preparing your abstract&lt;/strong&gt;. You need to do everything you can to show the programme committee of a conference that &lt;strong&gt;you deserve that speaking slot&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One way that you do this is by showing that you have taken the CfP process seriously. Just like teachers at school could spot the homework that was done whilst sat on the bus ride to school the day it was due in, the same goes for your conference abstracts. Abstracts that are mistargeted, lazily written, poorly spelt (plus all the things I list below too) shout out &#34;&lt;em&gt;Yeah I fancy speaking at your conference, but I&amp;#8217;ve got better things to do than spend time on this…but can I do a talk anyway?&lt;/em&gt;&#34;. Or to put it more simply from how the programme committee might see it when weighing up your abstract against others: &#34;&lt;em&gt;&#39;Do I feel lucky?&#39; Well, do you, punk?&lt;/em&gt;&#34;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here are some concrete ways you can ensure you&amp;#8217;re doing everything to prepare your abstract:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;READ THIS ADVICE! Not just mine, but all the other advice that&amp;#8217;s out there. You would be surprised how many people don&amp;#8217;t. A lot of this process is &#39;playing the game&#39;, and these kinds of blogs all spell out the rules to follow:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://dataeducation.com/capturing-attention-writing-great-session-descriptions/&#34;&gt;Adam Machanic - Capturing Attention: Writing Great Session Descriptions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.pythian.com/blog/concrete-advice-for-abstract-writers/&#34;&gt;Gwen Shapira - Concrete Advice for Abstract Writers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://dbakevlar.com/2013/10/abstracts-reviews-and-conferences-oh-my/&#34;&gt;Kellyn Pot’Vin-Gorman - Abstracts, Reviews and Conferences, Oh My!&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://alistapart.com/article/conference-proposals-that-dont-suck&#34;&gt;Russ Unger - Conference Proposals that Don’t Suck&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mwidlake.wordpress.com/2015/04/17/tips-on-submitting-an-abstract-to-conference/&#34;&gt;Martin Widlake - Tips on Submitting an Abstract to Conference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://bridgetkromhout.com/blog/give-actionable-takeaways/&#34;&gt;Bridget Kromhout - give actionable takeaways&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Proofread your abstract. Read it out loud (not just mutter it under your breath, but actually out loud). Proofread it again. Use &lt;a href=&#34;https://grammarly.com&#34;&gt;Grammarly&lt;/a&gt; to proofread it. There is no excuse for spelling or grammatical errors and they give a REALLY bad impression for your abstract because they imply a lack of attention to detail that the programme committee might assume will be present in your talk too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get others to review your abstract. Put it in a Google Doc, give people comment access, and send them the link. A couple of tips for getting the most out of this:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;#8217;t do it the day before the abstract is due in. Make sure there&amp;#8217;s enough time for you to review the changes that might be suggested.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Respect the reviewer&amp;#8217;s time. Don&amp;#8217;t send over a draft abstract you just chucked together. It&amp;#8217;s not their job to write it for you, but to &lt;em&gt;help&lt;/em&gt; you write a good abstract. Make sure you&amp;#8217;ve read some of the material I&amp;#8217;ve linked to above and that you&amp;#8217;re not repeating some of the basic mistakes that show you&amp;#8217;ve not really spent any time on this.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get some speaking experience. This is not about the abstract as such, but speaking in general. Speak at meetups. If a reviewer is wavering on your talk then you having zero experience may push them to reject. Meetups always want speakers—it&amp;#8217;s a great way to trial your talks, develop your relationship with the community - and to increase your hours in front of an audience.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_why_didnt_my_talk_get_accepted&#34;&gt;Why didn&amp;#8217;t my talk get accepted?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Whilst these are specific to a Kafka-focussed conference, the premise of them will be transferable to other technologies.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Scale alone does not get you a speaking slot&lt;/strong&gt;. I don&amp;#8217;t care if you&amp;#8217;re processing 1 gazillion messages - that in itself is not a 45-minute conference talk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Just because you use Kafka in your architecture doesn&amp;#8217;t itself mean that the audience want to hear about your bespoke Llama-shaving software you wrote with it. Make the talk about the technology or the problems you solved—not the bespoke software that you wrote (that&amp;#8217;s just your vehicle for the story that you&amp;#8217;re going to tell).&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Kafka is a fairly mature technology now. &#34;Show &amp;amp; Tell&#34; is not enough. Just because you have a system using it in Production, that&amp;#8217;s not enough. You need something engaging; a hook, a story. &#34;We&amp;#8217;re using Kafka, we&amp;#8217;ll talk about the problems we encountered&#34; is not compelling. It&amp;#8217;s the same as probably 75% of the other abstracts.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pay attention to the conference subject(s)&lt;/strong&gt;. If it&amp;#8217;s a Kafka conference don&amp;#8217;t submit a talk that&amp;#8217;s about a technology that&amp;#8217;s not Kafka unless you can clearly explain in your abstract why it&amp;#8217;s relevant.&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your use of the technology needs to be relevant too. If you use Kafka to stream your messages in but then your talk is 90% all about how you use Spark to process them I am going to wonder what it&amp;#8217;s doing at a Kafka conference. Maybe a great talk for Strata, but not a Kafka conference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Read the CfP closely - conferences will say what kind of talks they want, what subjects and technologies they want.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kafka and Kubernetes, it&amp;#8217;s &lt;em&gt;so&lt;/em&gt; 2019 😜&lt;/strong&gt;. Either get &lt;em&gt;ahead&lt;/em&gt; of the BS curve if that&amp;#8217;s your intended route in for a talk—or if you do want to talk about something that&amp;#8217;s now &#34;early majority&#34; then make sure you&amp;#8217;re pitching beyond simply &#34;hey &amp;lt;buzzwords!&amp;gt;&#34; and instead have something to say about it that others don&amp;#8217;t.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_abstract_specifics&#34;&gt;Abstract specifics&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here are some of the common mistakes that I&amp;#8217;ve noticed people make. Some of them you might disagree with, but in general if you can check off all this list as things you&amp;#8217;ve avoided doing then you&amp;#8217;re off to a good start.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I don&amp;#8217;t care what your system&amp;#8217;s internal name is and nor do conference attendees. It&amp;#8217;s just confusing, even if it&amp;#8217;s the wittiest acronym ever.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Think about &lt;strong&gt;the audience&lt;/strong&gt;. What are they going to &lt;strong&gt;gain&lt;/strong&gt; from attending your talk? Ensure that your abstract makes that clear. If you&amp;#8217;re talking about an implementation then focus on something relevant within what you built that you want to share with people for them to benefit from.&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An analogy would be the 1000 photos from your latest holiday. Do you take five photos of that 1000 and weave a good story around each one, or do you subject someone to every single step and sight of the journey with every one of those 1000 photos?&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Capitalise your words correctly (Kafka has a Kapital K!) ESPECIALLY in your titles! If you don&amp;#8217;t then it looks sloppy and gives a bad impression from the outset.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;#8217;t include &lt;strong&gt;all&lt;/strong&gt; the URLs! Especially if it&amp;#8217;s plain text then a dozen &lt;code&gt;http://&lt;/code&gt; quickly pollute the readability of the text. You only need one or two at the very most. You&amp;#8217;re writing an abstract, not a blog.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&#34;&lt;em&gt;If there&amp;#8217;s time&lt;/em&gt;&#34; / &#34;&lt;em&gt;Bonus content if time permits&lt;/em&gt;&#34; - don&amp;#8217;t put this in your abstract. Either cover &amp;lt;x&amp;gt;, or don&amp;#8217;t. By putting this in you&amp;#8217;re suggesting to me that you don&amp;#8217;t really have a handle on what your talk will be like.&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pro-tip: no-one will actually read your abstract back against the delivered talk. So long as you don&amp;#8217;t completely lie and deliver a talk about Mozart when you promised the crowd Meatloaf, you are fine to ad-lib content that wasn&amp;#8217;t included in your abstract.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Just as you should not be terse in your abstract, do not be too verbose.&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The reviewer will get bored and be desperate for a tl;dr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it suggests that if you cannot be clear and concise in your abstract maybe your talk will also be waffly and wordy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;#8217;t submit too many abstracts. If I see your name multiple times my eyes as a reviewer start to glaze over. Pick a small handful of your best topics and pitch those. Focus on the conference and work out which is likely to fit best. If you really have half a dozen talks that are all perfect for the conference then just pick the ones that &lt;strong&gt;you&lt;/strong&gt; would like to deliver most.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The few hundred words that you have in your abstract are your &lt;strong&gt;only&lt;/strong&gt; opportunity to pitch your talk to the programme committee. Take care with those words and make them justify their space on the screen. Don&amp;#8217;t assume that the programme committee will have mind-reading powers and will somehow magically know what an amazing talk you &lt;em&gt;might&lt;/em&gt; give - lay it out in front of them in the abstract.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Links to talks and blogs are useful to indicate that you&amp;#8217;ve got experience in the subject, but they are not a substitute for a good abstract. Chances are the programme committee won&amp;#8217;t have time to read and watch them, so you still need to nail the abstract.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use white space! Use paragraphs! Confronted with this, how many people will take the time to pick through it?&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/01/ks02.png&#34; alt=&#34;ks02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Compared to this, where the paragraph breaks make it nice and easy to grok:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/01/ks01.png&#34; alt=&#34;ks01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_thoughts_questions&#34;&gt;Thoughts? Questions?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/rmoff&#34;&gt;@ me on Twitter!&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>