<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rmoff&#39;s random ramblings</title>
    <link>https://rmoff.net/</link>
    <description>Recent content on rmoff&#39;s random ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>2020-05-26</lastBuildDate>
    
        <atom:link href="https://rmoff.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ksqlDB nested arrays - example</title>
      <link>https://rmoff.net/2020/05/26/ksqldb-nested-arrays-example/</link>
      <pubDate>2020-05-26</pubDate>
      
      <guid>https://rmoff.net/2020/05/26/ksqldb-nested-arrays-example/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/img/default-header-img.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Question from the Confluent Community Slack group:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How can I access the data in object in an array like below using ksqlDB stream&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&#34;Total&#34;: [
        {
          &#34;TotalType&#34;: &#34;Standard&#34;,
          &#34;TotalAmount&#34;: 15.99
        },
{
          &#34;TotalType&#34;: &#34;Old Standard&#34;,
          &#34;TotalAmount&#34;: 16,
&#34; STID&#34;:56
        }
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s take a look at this. First, spin up a ksqlDB environment using &lt;a href=&#34;https://github.com/confluentinc/demo-scene/tree/master/introduction-to-ksqldb&#34;&gt;this Docker Compose&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Send the sample message to a Kafka topic, first wrapping it in curly braces to make it valid JSON&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker &lt;span style=&#34;color:#008000&#34;&gt;exec&lt;/span&gt; -i kafkacat kafkacat &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;        -b kafka:29092 -P &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;        -t my_topic &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;{ &amp;#34;Total&amp;#34;: [ { &amp;#34;TotalType&amp;#34;: &amp;#34;Standard&amp;#34;, &amp;#34;TotalAmount&amp;#34;: 15.99 }, { &amp;#34;TotalType&amp;#34;: &amp;#34;Old Standard&amp;#34;, &amp;#34;TotalAmount&amp;#34;: 16, &amp;#34;STID&amp;#34;: 56 } ] }
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Fire up ksqlDB CLI&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;&#34;&gt;$&lt;/span&gt; ksql htp:&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt;ksqldb:&lt;span style=&#34;color:#666&#34;&gt;8088&lt;/span&gt;

                  &lt;span style=&#34;color:#666&#34;&gt;===========================================&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;       _              _ ____  ____       &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; _____  __ _&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;  _ &lt;span style=&#34;&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; __ )      &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|/&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; __&lt;span style=&#34;color:#666&#34;&gt;|/&lt;/span&gt; _&lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;  _ &lt;span style=&#34;&#34;&gt;\&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;\&lt;/span&gt;__ &lt;span style=&#34;&#34;&gt;\&lt;/span&gt; (_&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;_&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;_) &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;_&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;&#34;&gt;\&lt;/span&gt;_&lt;span style=&#34;&#34;&gt;\&lt;/span&gt;___&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;&#34;&gt;\&lt;/span&gt;__, &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;_&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;____&lt;span style=&#34;color:#666&#34;&gt;/|&lt;/span&gt;____&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;                   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;_&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                   &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;  Event Streaming &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Database&lt;/span&gt; purpose&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;built &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; stream processing apps       &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;===========================================&lt;/span&gt;

Copyright &lt;span style=&#34;color:#666&#34;&gt;2017&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt; Confluent Inc.

CLI v0.&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, Server v0.&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; located &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;at&lt;/span&gt; http:&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt;ksqldb:&lt;span style=&#34;color:#666&#34;&gt;8088&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Having&lt;/span&gt; trouble&lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Type&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;help&amp;#39;&lt;/span&gt; (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;insensitive&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; a rundown &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;of&lt;/span&gt; how things &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;work&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;

ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Set the offset to the earliest so that we&amp;#8217;re querying all the data in the topic&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;auto.offset.reset&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;earliest&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;
Successfully changed &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;local&lt;/span&gt; property &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;auto.offset.reset&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;earliest&amp;#39;&lt;/span&gt;. Use the UNSET command &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;to&lt;/span&gt; revert your change.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Model the input data as a ksqlDB stream:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM my_stream (TOTAL &lt;span style=&#34;color:#008000&#34;&gt;ARRAY&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;STRUCT&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;TotalType   &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;, 
                                                  TotalAmount &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;, 
                                                  STID        &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;) 
                         &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;my_topic&amp;#39;&lt;/span&gt;, 
                               VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;JSON&amp;#39;&lt;/span&gt;);

 Message
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; Stream created
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Play with the data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Select specific array entry&lt;/p&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
ksqlDB arrays are 1-based
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TOTAL[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; my_stream EMIT CHANGES &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-------------------------------------------------------------------------------------------------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;KSQL_COL_0                                                                                                                                 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-------------------------------------------------------------------------------------------------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;&#34;&gt;{&lt;/span&gt;TOTALTYPE&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;Standard, TOTALAMOUNT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;99&lt;/span&gt;, STID&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;                                                                                         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select nested array element&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TOTAL[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;TotalType, TOTAL[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;totalamount &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; my_stream EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------------------------------------------------------+--------------------------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;TOTALTYPE                                                           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;TOTALAMOUNT                                                         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------------------------------------------------------+--------------------------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Standard                                                            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;99&lt;/span&gt;                                                               &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explode the array&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; EXPLODE(TOTAL) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; my_stream EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-------------------------------------------------------------------------------------------------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;KSQL_COL_0                                                                                                                                 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-------------------------------------------------------------------------------------------------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;&#34;&gt;{&lt;/span&gt;TOTALTYPE&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;Standard, TOTALAMOUNT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;99&lt;/span&gt;, STID&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;                                                                                         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;&#34;&gt;{&lt;/span&gt;TOTALTYPE&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Old&lt;/span&gt; Standard, TOTALAMOUNT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;, STID&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;                                                                                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explode, un-nest, and change the field names of the resulting fields&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; EXPLODE(TOTAL)&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;TOTALTYPE &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; TOTAL_TYPE, 
             EXPLODE(TOTAL)&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;TOTALAMOUNT &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; TOTALAMOUNT, 
             EXPLODE(TOTAL)&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;STID &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; STID 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; my_stream EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------------------------------+---------------------------------------------+---------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;TOTAL_TYPE                                   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;TOTALAMOUNT                                  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;STID                                         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------------------------------+---------------------------------------------+---------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Standard                                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;99&lt;/span&gt;                                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;                                         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Old&lt;/span&gt; Standard                                 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;                                           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;56&lt;/span&gt;                                           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Persist this to a new stream (backed by a Kafka topic):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM new_stream &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt;
         &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; EXPLODE(TOTAL)&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;TOTALTYPE &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; TOTAL_TYPE, 
                EXPLODE(TOTAL)&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;TOTALAMOUNT &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; TOTALAMOUNT, 
                EXPLODE(TOTAL)&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;STID &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; STID 
            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; my_stream EMIT CHANGES;
 Message
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; Created query &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;with&lt;/span&gt; ID CSAS_NEW_STREAM_0
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SHOW&lt;/span&gt; TOPICS;

 Kafka Topic &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; Partitions &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; Partition Replicas
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; NEW_STREAM  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
 my_topic    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; PRINT NEW_STREAM &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; BEGINNING;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Key&lt;/span&gt; format: &lt;span style=&#34;&#34;&gt;¯\&lt;/span&gt;_(&lt;span style=&#34;&#34;&gt;ツ&lt;/span&gt;)_&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;&#34;&gt;¯&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;no&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;data&lt;/span&gt; processed
Value format: JSON &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;or&lt;/span&gt; KAFKA_STRING
rowtime: &lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;05&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;08&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;58&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;691&lt;/span&gt; Z, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;, value: &lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;TOTAL_TYPE&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Standard&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;TOTALAMOUNT&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;15.99&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;STID&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;
rowtime: &lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;05&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;08&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;58&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;691&lt;/span&gt; Z, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;, value: &lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;TOTAL_TYPE&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Old Standard&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;TOTALAMOUNT&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;16&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;STID&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;56&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Viewing Kafka messages bytes as hex</title>
      <link>https://rmoff.net/2020/05/22/viewing-kafka-messages-bytes-as-hex/</link>
      <pubDate>2020-05-22</pubDate>
      
      <guid>https://rmoff.net/2020/05/22/viewing-kafka-messages-bytes-as-hex/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/05/IMG_4466.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;ve been playing around with the new SerDes (serialisers/deserialisers) that shipped with Confluent Platform 5.5 - &lt;a href=&#34;https://docs.confluent.io/current/schema-registry/serdes-develop/index.html&#34;&gt;Protobuf, and JSON Schema&lt;/a&gt; (these were added to the existing support for Avro). The serialisers (and associated &lt;a href=&#34;https://docs.confluent.io/current/schema-registry/connect.html&#34;&gt;Kafka Connect converters&lt;/a&gt;) take a payload and serialise it into bytes for sending to Kafka, and I was interested in what those bytes look like. For that I used my favourite Kafka swiss-army knife: kafkacat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s a message serialised to JSON Schema:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kafkacat -b kafka:29092 -t pageviews-js -C -c1

&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;viewtime&amp;#34;&lt;/span&gt;:1,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;userid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;User_9&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pageid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Page_57&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Looks just like a message from another topic serialised as regular JSON, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kafkacat -b kafka:29092 -t pageviews-j -C -c1

&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;viewtime&amp;#34;&lt;/span&gt;:1,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;userid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;User_3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pageid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Page_77&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Except it&amp;#8217;s not! We can confirm this by looking at the raw bytes on the message itself by piping the output from kafkacat into hexdump.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check out these magical, pesky, bytes on the front of the JSON Schema-encoded message, and note that they&amp;#8217;re not there on the JSON message:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kafkacat -b kafka:29092 -t pageviews-js -C -c1 | hexdump -C

&lt;span style=&#34;color:#666&#34;&gt;00000000&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt; 7b &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;76&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; 6d &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;  |.....&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;viewtime&amp;#34;&lt;/span&gt;|
&lt;span style=&#34;color:#666&#34;&gt;00000010&lt;/span&gt;  3a &lt;span style=&#34;color:#666&#34;&gt;31&lt;/span&gt; 2c &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;75&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;72&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; 3a &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt;  |:1,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;userid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Use|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;00000020  72 5f 39 22 2c 22 70 61  67 65 69 64 22 3a 22 50  |r_9&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pageid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;P|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;00000030  61 67 65 5f 35 37 22 7d  0a                       |age_57&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;.|
&lt;span style=&#34;color:#666&#34;&gt;00000039&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kafkacat -b kafka:29092 -t pageviews-j -C -c1 | hexdump -C

&lt;span style=&#34;color:#666&#34;&gt;00000000&lt;/span&gt;  7b &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt;  6d &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; 3a &lt;span style=&#34;color:#666&#34;&gt;31&lt;/span&gt; 2c &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;75&lt;/span&gt;  |&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;viewtime&amp;#34;&lt;/span&gt;:1,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;u|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;00000010  73 65 72 69 64 22 3a 22  55 73 65 72 5f 33 22 2c  |serid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;User_3&amp;#34;&lt;/span&gt;,|
&lt;span style=&#34;color:#666&#34;&gt;00000020&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;  3a &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; 5f &lt;span style=&#34;color:#666&#34;&gt;37&lt;/span&gt;  |&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pageid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Page_7|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;00000030  37 22 7d 0a                                       |7&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;.|
&lt;span style=&#34;color:#666&#34;&gt;00000034&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The five extra bytes (&lt;code&gt;00 00 00 00 02&lt;/code&gt;) are defined in the &lt;a href=&#34;https://docs.confluent.io/current/schema-registry/serdes-develop/index.html#wire-format&#34;&gt;wire format&lt;/a&gt; used by the Schema Registry serdes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Byte 0&lt;/strong&gt;: Magic Byte - Confluent serialization format version number; currently always 0.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bytes 1-4&lt;/strong&gt;: 4-byte schema ID as returned by Schema Registry.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Searching Alfred&#39;s Clipboard history programatically</title>
      <link>https://rmoff.net/2020/05/18/searching-alfreds-clipboard-history-programatically/</link>
      <pubDate>2020-05-18</pubDate>
      
      <guid>https://rmoff.net/2020/05/18/searching-alfreds-clipboard-history-programatically/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/05/IMG_4456.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.alfredapp.com/&#34;&gt;Alfred&lt;/a&gt; is one of my favourite productivity apps for the Mac. It&amp;#8217;s a file indexer, a clipboard manager, a snippet expander - and that&amp;#8217;s just scratching the surface really. I recently got a new machine without it installed and realised &lt;em&gt;just how much&lt;/em&gt; I rely on Alfred, particularly its clipboard manager.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With the clipboard manager Alfred keeps a history of the text (and images, cool huh!) that I put on my clipboard, and I can recall any of them using a simple shortcut&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/alfred01.png&#34; alt=&#34;alfred01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The clipboard itself is stored in a file by Alfred, and is just a SQLite database. Since it&amp;#8217;s that, you can query it using SQL!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To find your clipboard history file go to Alfred&amp;#8217;s preferences pane and Advanced. Click the &lt;code&gt;Reveal in Finder&lt;/code&gt; in the bottom right of the window, and in the resulting folder there should be a &lt;code&gt;Databases&lt;/code&gt; sub-folder and within that a &lt;code&gt;clipboard.alfdb&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
This is not intended as a user-servicable file! Don&amp;#8217;t blame me if opening it in SQLite knackers it, and definitely don&amp;#8217;t try running `UPDATE`s against it…
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With the file located, you can query it by opening it up with SQLite:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sqlite3 clipboard.alfdb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s the clipboard history table&amp;#8217;s schema:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;schema&lt;/span&gt; clipboard

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; clipboard(item, ts &lt;span style=&#34;color:#008000&#34;&gt;decimal&lt;/span&gt;, app, apppath, dataType &lt;span style=&#34;color:#008000&#34;&gt;integer&lt;/span&gt;, dataHash);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INDEX&lt;/span&gt; clipboard_items &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; clipboard (item);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INDEX&lt;/span&gt; clipboard_ts &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; clipboard (ts);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INDEX&lt;/span&gt; clipboard_app &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; clipboard (app);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INDEX&lt;/span&gt; clipboard_datatype &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; clipboard (dataType);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INDEX&lt;/span&gt; clipboard_datahash &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; clipboard (dataHash);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can query individual rows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;sqlite&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; .header &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;on&lt;/span&gt;
sqlite&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; .&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;mode&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;column&lt;/span&gt;
sqlite&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; clipboard &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;

item                                                                                 ts          app            apppath                          dataType    dataHash
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------------------------------------------------------------------------  ----------  -------------  -------------------------------  ----------  ----------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;https:&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;get&lt;/span&gt;.slack.help&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;hc&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;en&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;us&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;articles&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;202288908&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;Format&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;your&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;messages&lt;span style=&#34;color:#666&#34;&gt;#&lt;/span&gt;code&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;blocks  &lt;span style=&#34;color:#666&#34;&gt;610489734&lt;/span&gt;   Google Chrome  &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;Applications&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;Google Chrome.app  &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and you can run aggregations on it, here showing which application I most frequently copy content from:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;sqlite&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;select&lt;/span&gt; app,&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;from&lt;/span&gt; clipboard &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;group&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;by&lt;/span&gt; app &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;order&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;by&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;desc&lt;/span&gt;;
app            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-------------  ----------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;Brave Browser  &lt;span style=&#34;color:#666&#34;&gt;4080&lt;/span&gt;
Visual Studio  &lt;span style=&#34;color:#666&#34;&gt;2996&lt;/span&gt;
iTerm          &lt;span style=&#34;color:#666&#34;&gt;1473&lt;/span&gt;
Emacs          &lt;span style=&#34;color:#666&#34;&gt;152&lt;/span&gt;
Telegram       &lt;span style=&#34;color:#666&#34;&gt;105&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;or even how many times I&amp;#8217;ve copied a link from my blog to send to someone :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;sqlite&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; clipboard &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; item &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIKE&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;%rmoff.net%&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;99&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
This is not intended as a user-servicable file! Don&amp;#8217;t blame me if opening it in SQLite knackers it, and definitely don&amp;#8217;t try running `UPDATE`s against it…
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building a Telegram bot with Apache Kafka and ksqlDB</title>
      <link>https://rmoff.net/2020/05/18/building-a-telegram-bot-with-apache-kafka-and-ksqldb/</link>
      <pubDate>2020-05-18</pubDate>
      
      <guid>https://rmoff.net/2020/05/18/building-a-telegram-bot-with-apache-kafka-and-ksqldb/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/05/IMG_4312.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Imagine you’ve got a stream of data; it’s not “big data,” but it’s certainly a lot. Within the data, you’ve got some bits you’re interested in, and of those bits, you’d like to be able to query information about them at any point. Sounds fun, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/telegram_arch02.png&#34; alt=&#34;Architecture high-level view&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What if you didn’t need any datastore other than Apache Kafka itself to be able to do this? What if you could ingest, filter, enrich, aggregate, and query data with just Kafka? With ksqlDB we can do just this, and I want to show you exactly how, using a Telegram bot as the application looking up state from the inbound stream of events:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/telegram_bot5.gif&#34; alt=&#34;Animation of Telegram bot looking up statistics about Twitter users&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To find out more you can: -&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;📜 Read &lt;a href=&#34;https://cnfl.io/telegram-bot-powered-by-kafka-and-ksqldb&#34;&gt;this full-length article&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🎥 Watch &lt;a href=&#34;https://rmoff.dev/telegram-bot-video&#34;&gt;this tutorial&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;a class=&#34;image&#34; href=&#34;https://rmoff.dev/telegram-bot-video&#34;&gt;&lt;img src=&#34;https://rmoff.net/images/2020/05/ksqldb-telegram-bot_screencap.jpg&#34; alt=&#34;ksqldb telegram bot screencap&#34;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;👾 Try the &lt;a href=&#34;https://github.com/confluentinc/demo-scene/tree/master/ksqldb-twitter/telegram_ksqldb_bots&#34;&gt;code&lt;/a&gt; yourself&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Add Markers list from Screenflow to Youtube Table of Contents</title>
      <link>https://rmoff.net/2020/05/04/add-markers-list-from-screenflow-to-youtube-table-of-contents/</link>
      <pubDate>2020-05-04</pubDate>
      
      <guid>https://rmoff.net/2020/05/04/add-markers-list-from-screenflow-to-youtube-table-of-contents/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/05/IMG_4138.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Screenflow has a useful Markers feature for adding notes to the timeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/subler01.png&#34; alt=&#34;subler01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can use these to helpfully add a table of contents to your Youtube video, but unfortunately Screenflow doesn&amp;#8217;t have the option to export them directly. Instead, use the free &lt;a href=&#34;https://bitbucket.org/galad87/subler/wiki/Home&#34;&gt;Subler&lt;/a&gt; program as an intermediary (download it from &lt;a href=&#34;https://bitbucket.org/galad87/subler/downloads/&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Export from Screenflow with a chapters track&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/subler02.png&#34; alt=&#34;subler02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the file in Subler and export to text file&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/subler03.png&#34; alt=&#34;subler03&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;From there, tidy up the text file from the source&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#19177c&#34;&gt;CHAPTER03&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:07:17.565
&lt;span style=&#34;color:#19177c&#34;&gt;CHAPTER03NAME&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;Updating documents in Elasticsearch
&lt;span style=&#34;color:#19177c&#34;&gt;CHAPTER05&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:11:38.664
&lt;span style=&#34;color:#19177c&#34;&gt;CHAPTER05NAME&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;Deleting documents in Elasticsearch with the sink connector
&lt;span style=&#34;color:#19177c&#34;&gt;CHAPTER07&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:16:14.897
&lt;span style=&#34;color:#19177c&#34;&gt;CHAPTER07NAME&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;Schemas and Elasticsearch Document Mappings
&lt;span style=&#34;color:#19177c&#34;&gt;CHAPTER08&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:25:57.397&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;into a time / label list for Youtube:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can do this manually, or with a bit of RegEx in something like VSCode&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/vscode01.png&#34; alt=&#34;vscode01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;^CHAPTER\d*=(.*)\.\d\d\d$\n.*=(.*)$&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$1&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:07:17 Updating documents in Elasticsearch
&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:11:38 Deleting documents in Elasticsearch with the sink connector
&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:16:14 Schemas and Elasticsearch Document Mappings&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now paste this list of times into your Youtube video description&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/youtube01.png&#34; alt=&#34;youtube01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When someone views your video they can then click on these times directly&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/youtube02.png&#34; alt=&#34;youtube02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Oh…and don&amp;#8217;t forget to subscribe to &lt;a href=&#34;https://rmoff.dev/youtube&#34;&gt;my Youtube channel&lt;/a&gt; :)&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Using Confluent Cloud when there is no Cloud (or internet)</title>
      <link>https://rmoff.net/2020/04/20/using-confluent-cloud-when-there-is-no-cloud-or-internet/</link>
      <pubDate>2020-04-20</pubDate>
      
      <guid>https://rmoff.net/2020/04/20/using-confluent-cloud-when-there-is-no-cloud-or-internet/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/04/IMG_3917.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://confluent.cloud/signup&#34;&gt;☁️Confluent Cloud&lt;/a&gt; is a great solution for a hosted and managed Apache Kafka service, with the additional benefits of Confluent Platform such as ksqlDB and managed Kafka Connect connectors. But as a developer, you won&amp;#8217;t always have a reliable internet connection. Train, planes, and automobiles—not to mention crappy hotel or conference Wi-Fi. Wouldn&amp;#8217;t it be useful if you could have a replica of your Cloud data on your local machine? That just pulled down new data automagically, without needing to be restarted each time you got back on the network?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let me show you here how you can go about doing this, to replicate one (or more) topics from Confluent Cloud onto your local machine. It&amp;#8217;s also a really useful thing if you want to develop something locally without perhaps being ready to deploy it against your cloud environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how&#34;&gt;How?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Confluent Replicator is a Kafka Connect plugin, acting as a consumer from one Kafka cluster (Confluent Cloud) and producer to another (your local Kafka cluster). I use Docker Compose to run Kafka locally, almost exclusively. It&amp;#8217;s a piece of cake to provision, spin up - and tear down new environments, in isolation from others.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_setup&#34;&gt;Setup&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Create a &lt;code&gt;.env&lt;/code&gt; file with your Confluent Cloud broker details and credentials in it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_BROKER_HOST&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;foo.bar.bork.bork.bork.us-central1.gcp.confluent.cloud:9092
&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_API_KEY&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;yyy
&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_API_SECRET&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;xxx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use these environment variables in your local shell (we&amp;#8217;ll use them with Docker later, hence writing them to a file for re-use)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;source&lt;/span&gt; .env&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_create_some_test_data_on_confluent_cloud&#34;&gt;Create some test data on Confluent Cloud&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Chuck some dummy data into a Confluent Cloud topic:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;date&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt; | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    kafkacat -b &lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_BROKER_HOST&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -X security.protocol&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;SASL_SSL -X sasl.mechanisms&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;PLAIN &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -X sasl.username&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_API_KEY&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; -X sasl.password&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_API_SECRET&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -X api.version.request&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -t test_topic -P&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Verify that it&amp;#8217;s there:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ kafkacat -b &lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_BROKER_HOST&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;              -X security.protocol&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;SASL_SSL -X sasl.mechanisms&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;PLAIN &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;              -X sasl.username&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_API_KEY&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; -X sasl.password&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_API_SECRET&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;              -X api.version.request&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;              -t test_topic -C -e
Fri &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt; Apr &lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt;:03:17 BST&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_create_local_kafka_cluster&#34;&gt;Create local Kafka cluster&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now spin up yourself a local Kafka cluster using &lt;a href=&#34;https://github.com/confluentinc/demo-scene/blob/master/ccloud-replicator/docker-compose.yml&#34;&gt;this Docker Compose&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ docker-compose up -d
➜ docker-compose ps
   Name               Command            State                      Ports
---------------------------------------------------------------------------------------------
kafka-1      /etc/confluent/docker/run   Up      &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:9092-&amp;gt;9092/tcp
kafka-2      /etc/confluent/docker/run   Up      &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:19092-&amp;gt;19092/tcp, &lt;span style=&#34;color:#666&#34;&gt;9092&lt;/span&gt;/tcp
kafka-3      /etc/confluent/docker/run   Up      &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:29092-&amp;gt;29092/tcp, &lt;span style=&#34;color:#666&#34;&gt;9092&lt;/span&gt;/tcp
replicator   /etc/confluent/docker/run   Up      &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:58083-&amp;gt;58083/tcp, &lt;span style=&#34;color:#666&#34;&gt;8083&lt;/span&gt;/tcp, &lt;span style=&#34;color:#666&#34;&gt;9092&lt;/span&gt;/tcp
zookeeper    /etc/confluent/docker/run   Up      &lt;span style=&#34;color:#666&#34;&gt;2181&lt;/span&gt;/tcp, &lt;span style=&#34;color:#666&#34;&gt;2888&lt;/span&gt;/tcp, &lt;span style=&#34;color:#666&#34;&gt;3888&lt;/span&gt;/tcp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_set_up_replicator&#34;&gt;Set up Replicator&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First, we&amp;#8217;ll check that the Replicator container has started and is ready. Replicator runs as a plugin to Kafka Connect, so we use its API for interacting with Replicator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
I&amp;#8217;m running a Kafka Connect worker that&amp;#8217;s listening on &lt;code&gt;58083&lt;/code&gt; - modify the code examples below if you&amp;#8217;re using a different one (e.g. the default 8083).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Waiting for Kafka Connect to start listening on localhost:58083 ⏳&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;while&lt;/span&gt; : ; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#19177c&#34;&gt;curl_status&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;curl -s -o /dev/null -w %&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;http_code&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt; http://localhost:58083/connectors&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; -e &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;date&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34; Kafka Connect listener HTTP state: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$curl_status&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34; (waiting for 200)&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$curl_status&lt;/span&gt; -eq &lt;span style=&#34;color:#666&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;then&lt;/span&gt;
    &lt;span style=&#34;color:#008000&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;fi&lt;/span&gt;
    sleep &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Should show:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Mon &lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt; Apr &lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;:32:37 BST  Kafka Connect listener HTTP state:  &lt;span style=&#34;color:#666&#34;&gt;200&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;waiting &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;200&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can also verify that the Replicator plugin has been loaded correctly:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -s localhost:58083/connector-plugins|jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.[].class&amp;#39;&lt;/span&gt;|grep -q io.confluent.connect.replicator.ReplicatorSourceConnector
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$?&lt;/span&gt; -eq &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;then&lt;/span&gt; 
   &lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Replicator plugin is correctly loaded ✅&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt;
   &lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;😢 Replicator plugin is not loaded. Please check the Kafka Connect worker logs and installation steps&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Should show:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Replicator plugin is correctly loaded ✅&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now send the config to the Kafka Connect worker&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;&#34;&gt;.env&lt;/span&gt;

&lt;span style=&#34;&#34;&gt;epoch=$(date&lt;/span&gt; &lt;span style=&#34;&#34;&gt;+%s)&lt;/span&gt;

&lt;span style=&#34;&#34;&gt;curl&lt;/span&gt; &lt;span style=&#34;&#34;&gt;-s&lt;/span&gt; &lt;span style=&#34;&#34;&gt;-X&lt;/span&gt; &lt;span style=&#34;&#34;&gt;PUT&lt;/span&gt; &lt;span style=&#34;&#34;&gt;-H&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Accept:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;&#34;&gt;-H&lt;/span&gt;  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;http://localhost:58083/connectors/replicator-source&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;$epoch&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/config&amp;#34;&lt;/span&gt; &lt;span style=&#34;&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;&#34;&gt;-d&lt;/span&gt; &lt;span style=&#34;&#34;&gt;&amp;#39;&lt;/span&gt;
        {
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;connector.class&amp;#34;&lt;/span&gt;             : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.connect.replicator.ReplicatorSourceConnector&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;key.converter&amp;#34;&lt;/span&gt;               : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.connect.replicator.util.ByteArrayConverter&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;value.converter&amp;#34;&lt;/span&gt;             : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.connect.replicator.util.ByteArrayConverter&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;header.converter&amp;#34;&lt;/span&gt;            : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.connect.replicator.util.ByteArrayConverter&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;src.kafka.bootstrap.servers&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#39;$CCLOUD_BROKER_HOST&amp;#39;:9092&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;src.kafka.security.protocol&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;SASL_SSL&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;src.kafka.sasl.mechanism&amp;#34;&lt;/span&gt;    : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;PLAIN&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;src.kafka.sasl.jaas.config&amp;#34;&lt;/span&gt;  : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;org.apache.kafka.common.security.plain.PlainLoginModule required username=\&amp;#34;&amp;#39;$CCLOUD_API_KEY&amp;#39;\&amp;#34; password=\&amp;#34;&amp;#39;$CCLOUD_API_SECRET&amp;#39;\&amp;#34;;&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;src.consumer.group.id&amp;#34;&lt;/span&gt;       : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;replicator-&amp;#39;$epoch&amp;#39;&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;dest.kafka.bootstrap.servers&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;kafka-1:39092,kafka-2:49092,kafka-3:59092&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;topic.whitelist&amp;#34;&lt;/span&gt;             : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;test_topic&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;topic.rename.format&amp;#34;&lt;/span&gt;         :&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;${topic}&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;confluent.license&amp;#34;&lt;/span&gt;           :&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;confluent.topic.bootstrap.servers&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;kafka-1:39092,kafka-2:49092,kafka-3:59092&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;confluent.topic.replication.factor&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;offset.start&amp;#34;&lt;/span&gt;                :&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;consumer&amp;#34;&lt;/span&gt;
        }&lt;span style=&#34;&#34;&gt;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check that it&amp;#8217;s running:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ curl -s &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;http://localhost:58083/connectors?expand=info&amp;amp;expand=status&amp;#34;&lt;/span&gt; | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;       jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;. | to_entries[] | [ .value.info.type, .key, .value.status.connector.state,.value.status.tasks[].state,.value.info.config.&amp;#34;connector.class&amp;#34;]|join(&amp;#34;:|:&amp;#34;)&amp;#39;&lt;/span&gt; | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;       column -s : -t| sed &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;s/\&amp;#34;//g&amp;#39;&lt;/span&gt;| sort
&lt;span style=&#34;color:#008000&#34;&gt;source&lt;/span&gt;  |  replicator-source1587382706  |  RUNNING  |  RUNNING  |  io.confluent.connect.replicator.ReplicatorSourceConnector&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check that we&amp;#8217;ve got data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ kafkacat -b localhost:29092 -t test_topic -C -e
Fri &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt; Apr &lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt;:03:17 BST&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So now when data gets sent to Confluent Cloud, we get it also pushed to our local Kafka cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;script id=&#34;asciicast-fKlgOPK2gsIW42MIEg7y9FpXz&#34; src=&#34;https://asciinema.org/a/fKlgOPK2gsIW42MIEg7y9FpXz.js&#34; async&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_restarting_and_dealing_with_network_glitches&#34;&gt;Restarting and dealing with network glitches&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The cool thing about Kafka, and Kafka Connect, is that it keeps track of where a particular consumer has read up to in a topic. Replicator therefore will read from a topic whilst it&amp;#8217;s running, and if you stop and restart it, it&amp;#8217;ll just catch up from where it got to before it stopped.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The same principle applies to if your local machine goes off the network, or perhaps just goes through some patchy connectivity. If it can connect to the source cluster (Confluent Cloud), it will do so. If it can&amp;#8217;t, it&amp;#8217;ll just keep trying and carry on again once it can do.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_ingesting_a_fresh_copy_of_the_data&#34;&gt;Ingesting a fresh copy of the data&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So there&amp;#8217;s restarting, and then there&amp;#8217;s &lt;strong&gt;restarting&lt;/strong&gt;. What if instead of wanting to restart the connector (we rebooted the machine, made a config change, whatever) we want to actually &lt;em&gt;start afresh&lt;/em&gt; and start a &lt;em&gt;new replication&lt;/em&gt; of the topic from Confluent Cloud?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Because of the clever way Kafka Connect uses the Kafka consumer group protocol to track offsets, if you were to delete the replicator configuration and create it afresh, it would still carry on from where it got to before! You can see the consumer group name (and consumption progress) in Confluent Cloud UI:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/04/replicator01.png&#34; alt=&#34;replicator01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For this reason you may have noticed in the config that we ran above the use of &lt;code&gt;epoch&lt;/code&gt; in the configuration name and, most importantly, &lt;a href=&#34;https://docs.confluent.io/current/connect/kafka-connect-replicator/configuration_options.html#cluster-id-and-group-id&#34;&gt;&lt;code&gt;src.consumer.group.id&lt;/code&gt;&lt;/a&gt;. This is just one way of ensuring a unique group name tied to this particular instance of the replicator. We can then choose to provision a new one if we want to start afresh, or restart an existing one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Whilst you&amp;#8217;re there in the Confluent Cloud UI you can check out the detailed view of the progress of a particular consumer group&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/04/replicator02.png&#34; alt=&#34;replicator02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_changing_the_target_topic&#34;&gt;Changing the target topic&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There&amp;#8217;s a bunch of parameters that you can set with Replicator. One particularly useful one is to modify the name of the target topic that Replicator writes to. Here&amp;#8217;s an example of routing a source topic to a target one that includes the identifier (&lt;code&gt;epoch&lt;/code&gt;) of the Replicator that wrote it&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;topic.rename.format&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;topic&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;-ccloud-&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$epoch&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The resulting topic name goes from &lt;code&gt;test_topic&lt;/code&gt; on the source (Confluent Cloud) to &lt;code&gt;test_topic-ccloud-1587388241&lt;/code&gt; on our target local cluster&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ kafkacat -b localhost:29092 -t test_topic-ccloud-1587388241 -C -q -u -o end
Here&lt;span style=&#34;&#34;&gt;&amp;#39;&lt;/span&gt;s a &lt;span style=&#34;color:#008000&#34;&gt;test&lt;/span&gt; message, sent at Mon &lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt; Apr &lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;:14:09 BST&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_storing_credentials_safely&#34;&gt;Storing credentials safely&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the example above we passed the credentials for Confluent Cloud just as environment variables to Kafka Connect, which is not great from a security point of view. Instead we could use &lt;a href=&#34;https://rmoff.net/2019/05/24/putting-kafka-connect-passwords-in-a-separate-file-/-externalising-secrets/&#34;&gt;external secrets&lt;/a&gt;. Note that the Replicator docker container has the necessary &lt;code&gt;config.providers&lt;/code&gt; settings to enable this, and that we&amp;#8217;ve mounted out local &lt;code&gt;.env&lt;/code&gt; file into the container.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;…&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;CONNECT_CONFIG_PROVIDERS:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;CONNECT_CONFIG_PROVIDERS_FILE_CLASS:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;org.apache.kafka.common.config.provider.FileConfigProvider&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;volumes:&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;./.env:/opt/config&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now when we create the replicator we can reference the file and attributes within it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#19177c&#34;&gt;epoch&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;date +%s&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt;
curl -s -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Accept:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;http://localhost:58083/connectors/replicator-source&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$epoch&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/config&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        {
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connector.class&amp;#34;: &amp;#34;io.confluent.connect.replicator.ReplicatorSourceConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;key.converter&amp;#34;: &amp;#34;io.confluent.connect.replicator.util.ByteArrayConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;value.converter&amp;#34;: &amp;#34;io.confluent.connect.replicator.util.ByteArrayConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;header.converter&amp;#34;: &amp;#34;io.confluent.connect.replicator.util.ByteArrayConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;src.kafka.bootstrap.servers&amp;#34;: &amp;#34;${file:/opt/config:CCLOUD_BROKER_HOST}&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;src.kafka.security.protocol&amp;#34;: &amp;#34;SASL_SSL&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;src.kafka.sasl.mechanism&amp;#34;: &amp;#34;PLAIN&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;src.kafka.sasl.jaas.config&amp;#34;: &amp;#34;org.apache.kafka.common.security.plain.PlainLoginModule required username=\&amp;#34;${file:/opt/config:CCLOUD_API_KEY}\&amp;#34; password=\&amp;#34;${file:/opt/config:CCLOUD_API_SECRET}\&amp;#34;;&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;src.consumer.group.id&amp;#34;: &amp;#34;replicator-&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$epoch&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;dest.kafka.bootstrap.servers&amp;#34;: &amp;#34;kafka-1:39092,kafka-2:49092,kafka-3:59092&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;topic.whitelist&amp;#34;: &amp;#34;test_topic&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;topic.rename.format&amp;#34;:&amp;#34;${topic}&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;confluent.license&amp;#34;:&amp;#34;&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;confluent.topic.bootstrap.servers&amp;#34;:&amp;#34;kafka-1:39092,kafka-2:49092,kafka-3:59092&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;confluent.topic.replication.factor&amp;#34;:1,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;offset.start&amp;#34;:&amp;#34;consumer&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        }&amp;#39;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_its_not_just_for_cloud&#34;&gt;It&amp;#8217;s not just for Cloud&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can use Replicator between any two Apache Kafka clusters, and Confluent Control Center to give you the same consumer group monitoring view that I showed above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Try it out by &lt;a href=&#34;https://www.confluent.io/download/&#34;&gt;downloading Confluent Platform&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_further_reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.confluent.io/current/multi-dc-deployments/replicator/index.html&#34;&gt;Replicator documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.confluent.io/current/installation/docker/installation/replicator.html&#34;&gt;Replicator tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.confluent.io/current/connect/kafka-connect-replicator/configuration_options.html&#34;&gt;Replicator configuration options&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>How to install kafkacat on Fedora</title>
      <link>https://rmoff.net/2020/04/20/how-to-install-kafkacat-on-fedora/</link>
      <pubDate>2020-04-20</pubDate>
      
      <guid>https://rmoff.net/2020/04/20/how-to-install-kafkacat-on-fedora/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/04/IMG_3969.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/edenhill/kafkacat&#34;&gt;kafkacat&lt;/a&gt; is one of my go-to tools when working with Kafka. It&amp;#8217;s a producer and consumer, but also a swiss-army knife of debugging and troubleshooting capabilities. So when I built a new Fedora server recently, I needed to get it installed. Unfortunately there&amp;#8217;s no pre-packed install available on &lt;code&gt;yum&lt;/code&gt;, so here&amp;#8217;s how to do it manually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_pre_requisite_installs&#34;&gt;Pre-requisite installs&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We&amp;#8217;ll need some packages from the Confluent repo so set this up for &lt;code&gt;yum&lt;/code&gt; first by creating &lt;code&gt;/etc/yum.repos.d/confluent.repo&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;Confluent.dist&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;Confluent repository &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;dist&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;baseurl&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://packages.confluent.io/rpm/5.4/7
&lt;span style=&#34;color:#19177c&#34;&gt;gpgcheck&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;gpgkey&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://packages.confluent.io/rpm/5.4/archive.key
&lt;span style=&#34;color:#19177c&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;Confluent&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;Confluent repository
&lt;span style=&#34;color:#19177c&#34;&gt;baseurl&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://packages.confluent.io/rpm/5.4
&lt;span style=&#34;color:#19177c&#34;&gt;gpgcheck&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;gpgkey&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://packages.confluent.io/rpm/5.4/archive.key
&lt;span style=&#34;color:#19177c&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now install the dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Update yum&lt;/span&gt;
sudo yum update -y

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Install build tools&lt;/span&gt; 
sudo yum group install &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Development Tools&amp;#34;&lt;/span&gt; -y

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Install librdkafka and other deps&lt;/span&gt;
sudo yum install -y librdkafka-devel yajl-devel avro-c-devel&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_build_kafkacat&#34;&gt;Build kafkacat&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pull down the kafkacat repo:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone https://github.com/edenhill/kafkacat.git
&lt;span style=&#34;color:#008000&#34;&gt;cd&lt;/span&gt; kafkacat&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Prepare the install - make sure that this step does not result in an error!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./configure&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you get errors here, it&amp;#8217;s off to Google you go to try and figure them out, because there&amp;#8217;s no point continuing if you can&amp;#8217;t. You might find some &lt;code&gt;failed&lt;/code&gt; steps that don&amp;#8217;t result in an actual error - this is a &#34;soft fail&#34; and means that certain functionality won&amp;#8217;t be available in the kafkacat that you install (in this case, Avro/Schema Registry). Here&amp;#8217;s an example of one:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;checking &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; serdes &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;by pkg-config&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;... failed
checking &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; serdes &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;by compile&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;... failed &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;disable&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_install&#34;&gt;Install!&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;make
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check that it works:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ kafkacat -V
kafkacat - Apache Kafka producer and consumer tool
https://github.com/edenhill/kafkacat
Copyright &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;c&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2014&lt;/span&gt;-2019, Magnus Edenhill
Version &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;.5.0-5-ge98256 &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;JSON, librdkafka &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;.3.0 builtin.features&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;gzip,snappy,ssl,sasl,regex,lz4,sasl_gssapi,sasl_plain,sasl_scram,plugins,zstd,sasl_oauthbearer&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Test it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ kafkacat -b localhost:29092 -L
Metadata &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; all topics &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;from broker &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;: localhost:29092/3&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;:
 &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; brokers:
  broker &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; at localhost:19092
  broker &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; at localhost:29092 &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;controller&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  broker &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; at localhost:9092&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_this_all_seems_like_too_much_hassle&#34;&gt;This all seems like too much hassle?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Yeah, that&amp;#8217;s why Docker was invented ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you want to run kafkacat but can&amp;#8217;t get it installed, do not fear! You can run it anyway:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run --rm edenhill/kafkacat:1.5.0 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    kafkacat -V&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You just need to make sure you wrap your head around Docker networking if you do this, because &lt;code&gt;localhost&lt;/code&gt; to a Docker container is not the same (by default) as &lt;code&gt;localhost&lt;/code&gt; on your host machine:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ docker run --rm edenhill/kafkacat:1.5.0 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    kafkacat -b localhost:29092 -L
% ERROR: Failed to acquire metadata: Local: Broker transport failure&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you add &lt;code&gt;--network=host&lt;/code&gt; then it will use the network as if executing locally:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ docker run --rm --network&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;host edenhill/kafkacat:1.5.0 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    kafkacat -b localhost:29092 -L

Metadata &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; all topics &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;from broker &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;: localhost:29092/3&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;:
 &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; brokers:
  broker &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; at localhost:19092
  broker &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; at localhost:29092 &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;controller&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  broker &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; at localhost:9092&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Converting from AsciiDoc to Google Docs and MS Word</title>
      <link>https://rmoff.net/2020/04/16/converting-from-asciidoc-to-google-docs-and-ms-word/</link>
      <pubDate>2020-04-16</pubDate>
      
      <guid>https://rmoff.net/2020/04/16/converting-from-asciidoc-to-google-docs-and-ms-word/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/01/IMG_2259.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Updated 16 April 2020 to cover formatting tricks &amp;amp; add import to Google Docs info&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Short and sweet this one. I’ve written in the past how
&lt;a href=&#34;https://rmoff.net/2017/09/12/what-is-markdown-and-why-is-it-awesome/&#34;&gt;I
love Markdown&lt;/a&gt; but I’ve actually moved on from that and now firmly throw
my hat in the &lt;a href=&#34;http://www.methods.co.nz/asciidoc/&#34;&gt;AsciiDoc&lt;/a&gt; ring. I’ll
write another post another time explaining why in more detail, but in
short it’s just more powerful whilst still simple and readable without
compilation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So anyway, I use AsciiDoc (adoc) for all my technical (and often
non-technical) writing now, and from there usually dump it out to HTML
which I can share with people as needed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;asciidoctor --backend html5 -a data-uri my_input_file.adoc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;(&lt;code&gt;-a data-uri&lt;/code&gt; embeds any images as part of the HTML file, for easier
sharing)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But today I needed to generate a MS Word (docx) file, and found a neat
combination of tools to do this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#19177c&#34;&gt;INPUT_ADOC&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my_input_file.adoc
asciidoctor --backend docbook --out-file - &lt;span style=&#34;color:#19177c&#34;&gt;$INPUT_ADOC&lt;/span&gt;| &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;pandoc --from docbook --to docx --output &lt;span style=&#34;color:#19177c&#34;&gt;$INPUT_ADOC&lt;/span&gt;.docx

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# On the Mac, this will open the generated file in MS Word&lt;/span&gt;
open &lt;span style=&#34;color:#19177c&#34;&gt;$INPUT_ADOC&lt;/span&gt;.docx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_customising_code_block_highlighting&#34;&gt;Customising code block highlighting&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can customise the syntax highlighting used for code sections by
setting &lt;code&gt;--highlight-style&lt;/code&gt; when calling &lt;code&gt;pandoc&lt;/code&gt;, e.g.:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;asciidoctor --backend docbook --out-file - &lt;span style=&#34;color:#19177c&#34;&gt;$INPUT_ADOC&lt;/span&gt;| &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;pandoc --from docbook --to docx --output &lt;span style=&#34;color:#19177c&#34;&gt;$INPUT_ADOC&lt;/span&gt;.docx &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;       --highlight-style espresso&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://rmoff.net/images/2020/04/docx.png&#34; alt=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use &lt;code&gt;pandoc --list-highlight-styles&lt;/code&gt; to get a list of available
styles. You can also customise a theme by writing it to a file
(&lt;code&gt;pandoc --print-highlight-style pygments &amp;gt; my.theme&lt;/code&gt;), editing the
file (&lt;code&gt;my.theme&lt;/code&gt;) and then passing it as the argument to
&lt;code&gt;--highlight-style&lt;/code&gt; e.g. &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;asciidoctor --backend docbook --out-file - &lt;span style=&#34;color:#19177c&#34;&gt;$INPUT_ADOC&lt;/span&gt;| &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;pandoc --from docbook --to docx --output &lt;span style=&#34;color:#19177c&#34;&gt;$INPUT_ADOC&lt;/span&gt;.docx &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;       --highlight-style my.theme&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_customising_other_styles_e_g_inline_code_literal&#34;&gt;Customising other styles (e.g. inline code / literal)&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The above &lt;code&gt;--highlight-style&lt;/code&gt; works great for code blocks, but what
about other styles that you want to customise? Perhaps you want to
change the formatting used for code that’s inline in a paragraph too,
not just blocks. To do this with &lt;code&gt;.docx&lt;/code&gt; output from pandoc you use
the &lt;code&gt;--reference-doc&lt;/code&gt; parameter, and pass in a &lt;code&gt;.docx&lt;/code&gt; file with the
styles set up as you want.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To create a &lt;code&gt;.docx&lt;/code&gt; file with all the styles that pandoc may use in
translating your source asciidoc, run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;pandoc -o my-custom-styles.docx &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;       --print-default-data-file reference.docx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Open &lt;code&gt;my-custom-styles.docx&lt;/code&gt; in Word and modify the style definitions
as required&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://rmoff.net/images/2020/04/docx1.png&#34; alt=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now add this argument to pandoc when you invoke it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;asciidoctor --backend docbook --out-file - &lt;span style=&#34;color:#19177c&#34;&gt;$INPUT_ADOC&lt;/span&gt;| &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;pandoc --from docbook --to docx &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;       --output &lt;span style=&#34;color:#19177c&#34;&gt;$INPUT_ADOC&lt;/span&gt;.docx &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;       --highlight-style my.theme &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;       --reference-doc&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;my-custom-styles.docx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://rmoff.net/images/2020/04/docx2.png&#34; alt=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_converting_asciidoc_to_google_docs_format&#34;&gt;Converting Asciidoc to Google Docs format&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Using the above process is the best way I’ve found to write content in
asciidoc and then import it, with embedded images, into Google Docs.
It’s not an ideal workflow (it’s solely one-way only), but it does mean
that if Google Docs is your preferred collaboration &amp;amp; review tool you
can still prepare your content in asciidoc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Once you’ve got your asciidoc ready, you export it to docx (via the
above asciidoctor &amp;amp; pandoc route), and then upload the &lt;code&gt;.docx&lt;/code&gt; to
Google Drive, from where you can ``Open in Google Docs&#39;&#39;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://rmoff.net/images/2020/04/adoc_to_google_docs.png&#34; alt=&#34;image&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://asciidoctor.org/&#34;&gt;Asciidoctor&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On the mac: &lt;code&gt;brew install asciidoctor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://pandoc.org/&#34;&gt;Pandoc&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On the mac: &lt;code&gt;brew install pandoc&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=joaompinto.asciidoctor-vscode&#34;&gt;AsciiDoc
extension for VS Code&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;VSCode is my new favourite editor (but I still ❤️ emacs for org-mode)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>A quick and dirty way to monitor data arriving on Kafka</title>
      <link>https://rmoff.net/2020/04/16/a-quick-and-dirty-way-to-monitor-data-arriving-on-kafka/</link>
      <pubDate>2020-04-16</pubDate>
      
      <guid>https://rmoff.net/2020/04/16/a-quick-and-dirty-way-to-monitor-data-arriving-on-kafka/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/04/IMG_3756.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;ve been poking around recently with &lt;a href=&#34;https://rmoff.net/2020/03/11/streaming-wi-fi-trace-data-from-raspberry-pi-to-apache-kafka-with-confluent-cloud/&#34;&gt;capturing Wi-Fi packet data&lt;/a&gt; and streaming it into Apache Kafka, from where I&amp;#8217;m processing and analysing it. Kafka itself is rock-solid - because I&amp;#8217;m using &lt;a href=&#34;https://confluent.cloud/signup&#34;&gt;☁️Confluent Cloud&lt;/a&gt; and someone else worries about provisioning it, scaling it, and keeping it running for me. But whilst Kafka works just great, my side of the setup—&lt;code&gt;tshark&lt;/code&gt; running on a Raspberry Pi—is less than stable. For whatever reason it sometimes stalls and I have to restart the Raspberry Pi and restart the capture process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m sure there&amp;#8217;s a reason and I&amp;#8217;m sure if I spent long enough looking and debugging I&amp;#8217;d find it - but for now the time invested in this is better spent just knowing when I need to go and bounce it. I don&amp;#8217;t mind losing a few minutes of data, or even a few hours, but this kind of gap of a week makes me sad:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/04/kib01.png&#34; alt=&#34;kib01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So what I want is a very simple way to look at the most recent timestamp on a Kafka message, and send me an alert if it&amp;#8217;s outside a threshold.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/04/alert01.png&#34; alt=&#34;alert01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Herewith a very dirty hacky way to do just this…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_parts_list&#34;&gt;Parts List&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;kafkacat&lt;/code&gt; polls the most recent message on the topic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jq&lt;/code&gt; extracts the timestamp&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bash&lt;/code&gt; compares the timestamp to our given threshold and also handles errors in calling &lt;code&gt;kafkacat&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;curl&lt;/code&gt; makes a REST call to Telegram to send the status message&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_setting_up_telegram&#34;&gt;Setting up Telegram&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Create a new Telegram bot per &lt;a href=&#34;https://core.telegram.org/bots#creating-a-new-bot&#34;&gt;the instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/04/telegram01.png&#34; alt=&#34;telegram01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Make a note of the access token because you&amp;#8217;ll need this later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What do all hack projects need? A geeky avatar of course. It may be a dirty hack, but it&amp;#8217;s going to be a well-presented one ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/04/telegram02.png&#34; alt=&#34;telegram02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To get our bot to work we need to start it first, so click on its link from Botfather (or just start a Telegram chat with it directly). This will send it the &lt;code&gt;/start&lt;/code&gt; command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/04/telegram04.png&#34; alt=&#34;telegram04&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_getting_the_recipients_chat_id&#34;&gt;Getting the recipient&amp;#8217;s Chat ID&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We need to get the id of the recipient of messages that our bot is going to send. This can either be a direct message to you, or you can set up a group (which other real people can be members of an see the same message from the bot). If you want to use a group then make sure you start the bot (&lt;code&gt;/start&lt;/code&gt; per above) and then invite it to the group. Using a group is also more convenient because you could create multiple alert routes with a single bot, instead of having to create a new bot for each purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/04/telegram03.png&#34; alt=&#34;telegram03&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Having started the bot, and optionally added it to a group and sent a message to the group, now invoke the &lt;a href=&#34;https://core.telegram.org/bots/api#getupdates&#34;&gt;&lt;code&gt;getUpdates&lt;/code&gt;&lt;/a&gt; API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -s https://api.telegram.org/bot&amp;lt;bot access token&amp;gt;/getUpdates&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Replace &lt;code&gt;&amp;lt;bot access token&amp;gt;&lt;/code&gt; with (you guessed it!) the bot access token that the Botfather gave you above. The API is a bit funky here - note that the &lt;code&gt;bot&lt;/code&gt; is hardcoded part of the URL and should not be changed - you &lt;strong&gt;append&lt;/strong&gt; your bot access token to this. So if Botfather gave you an access token of &lt;code&gt;99999:XXXXX&lt;/code&gt; you would invoke:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -s https://api.telegram.org/bot99999:XXXXX/getUpdates&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;From this you&amp;#8217;ll get one, or more, messages that the bot has received. This might just be the single &lt;code&gt;/start&lt;/code&gt; that you invoked, or it could also be group messages if you&amp;#8217;ve added it to one. Regardless, identify the message instance corresponding to the recipient that you want for the bot and make a note of the &lt;code&gt;chat.id&lt;/code&gt; value. Here it&amp;#8217;s &lt;code&gt;-468250841&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;message_id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;from&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;218419044&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;is_bot&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;first_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Robin&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Moffatt&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rmoff&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;language_code&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;chat&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;468250841&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pcap ingest monitoring&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;all_members_are_administrators&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt;
  },
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1586894082&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;group_chat_created&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can use &lt;code&gt;jq&lt;/code&gt; to return just the chat ID and associated recipient information too. Here it shows the group chat message quoted above, plus the DM that I sent the bot previously (&lt;code&gt;/start&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ curl -s https://api.telegram.org/bot99999:XXXXX/getUpdates | jq  -c &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.result[].message.chat | [.id , .title, .username]&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;218419044&lt;/span&gt;,null,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rmoff&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;-468250841,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pcap ingest monitoring&amp;#34;&lt;/span&gt;,null&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;However you do it, you should now have:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bot access token (e.g. &lt;code&gt;99999:XXXXX&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chat ID (e.g. &lt;code&gt;-468250841&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_sending_a_test_message&#34;&gt;Sending a test message&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s send a test message! We&amp;#8217;ll use the &lt;a href=&#34;https://core.telegram.org/bots/api#sendmessage&#34;&gt;&lt;code&gt;sendMessage&lt;/code&gt;&lt;/a&gt; API to do this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -s -X POST https://api.telegram.org/bot&amp;lt;BOT ACCESS TOKEN&amp;gt;/sendMessage &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#19177c&#34;&gt;chat_id&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;CHAT ID&amp;gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#19177c&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Did you ever play tic-tac-toe?&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and as if by magic…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/04/telegram05.png&#34; alt=&#34;It works!&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_getting_the_latest_message_from_kafka&#34;&gt;Getting the latest message from Kafka&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As long-time readers of my blog will know, one of my favourite tools in my Kafka toolbox is &lt;code&gt;kafkacat&lt;/code&gt;. Here we&amp;#8217;ll not assume that it&amp;#8217;s installed, and instead run it using Docker. We&amp;#8217;re also going to connect to Confluent Cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
You can of course use this same technique against a self-managed Kafka cluster (and indeed, with kafkacat running locally, not Docker)
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run --rm edenhill/kafkacat:1.5.0 kafkacat &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  -b &lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_BROKER_HOST&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  -X security.protocol&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;SASL_SSL -X sasl.mechanisms&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;PLAIN &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\\&lt;/span&gt;
  -X sasl.username&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_API_KEY&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; -X sasl.password&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_API_SECRET&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  -X api.version.request&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  -C -c1 -o -1 -u -f %T -t pcap &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Aside from the broker details (&lt;code&gt;-b&lt;/code&gt;) and various authentication and security settings (all the &lt;code&gt;-X&lt;/code&gt; parameters), what we&amp;#8217;re doing here is :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-C&lt;/code&gt; run as a consumer, and consume one message (&lt;code&gt;-c1&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read from the penultimate offset &lt;code&gt;-o 1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-u&lt;/code&gt; don&amp;#8217;t buffer output&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; read from the &lt;code&gt;pcap&lt;/code&gt; topic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-f %T&lt;/code&gt; tells kafkacat just to return the timestamp from the Kafka message&amp;#8217;s metadata&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We&amp;#8217;re going to compare this timestamp to our threshold, which is ten minutes ago, from &lt;code&gt;date&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;docker run --rm ubuntu date --date &#39;-10 min&#39; &#34;+%s&#34;
1586992072&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;WHY&lt;/strong&gt; would you invoke &lt;code&gt;date&lt;/code&gt; using docker? Because &lt;code&gt;date&lt;/code&gt; is one of those delightful *nix commands which has a different implementation across Linux, MacOS etc and is completely incompatible in options - so this way at least it works. I told you this was a dirty hack…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Note that the timestamp that&amp;#8217;s returned from kafkacat is the unix epoch in &lt;strong&gt;milliseconds&lt;/strong&gt;, whilst &lt;code&gt;date&lt;/code&gt; is in &lt;strong&gt;seconds&lt;/strong&gt;. No problem. Let&amp;#8217;s continue this dirty hack by just truncating the last three digits!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ &lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1586993170473&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;1586993170473&lt;/span&gt;

➜ &lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1586993170473&lt;/span&gt;|sed &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;s/[0-9][0-9][0-9]$//g&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;1586993170&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So we can get the timestamp of the latest Kafka message, and the local timestamp (minus a threshold) - now to compare them. That&amp;#8217;s easy enough with a bit of shell scripting. First we store the Kafka timestamp in a variable:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#19177c&#34;&gt;latest_ts&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;docker run --rm edenhill/kafkacat:1.5.0 kafkacat -b &lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_BROKER_HOST&lt;/span&gt; -X security.protocol&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;SASL_SSL -X sasl.mechanisms&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;PLAIN -X sasl.username&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_API_KEY&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; -X sasl.password&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_API_SECRET&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; -X api.version.request&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;true&lt;/span&gt; -C -c1 -o -1 -t pcap -u -f %T| sed &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;s/[0-9][0-9][0-9]$//g&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Then we store the timestamp against which we want to compare it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#19177c&#34;&gt;ten_minutes_ago&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;docker run --rm ubuntu date --date &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;-10 min&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;+%s&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Finally we compare the two:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$latest_ts&lt;/span&gt; -lt &lt;span style=&#34;color:#19177c&#34;&gt;$ten_minutes_ago&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;then&lt;/span&gt; 
		&lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Last Kafka message was received over ten minutes ago&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_putting_it_all_together&#34;&gt;Putting it all together&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we take the logic from above to determine if Kafka ingest has stalled, and combine it with the Telegram REST API that we explored above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/04/telegram06.png&#34; alt=&#34;telegram06&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#bc7a00&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#bc7a00&#34;&gt;&lt;/span&gt;#
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# @rmoff 16 April 2020&lt;/span&gt;
#
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# -------------&lt;/span&gt;

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# .env should look like:&lt;/span&gt; 
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# CCLOUD_BROKER_HOST=xxxxxx&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# CCLOUD_API_KEY=xxxxxx&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# CCLOUD_API_SECRET=xxxxxx&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# TELEGRAM_BOT_TOKEN=xxxx&lt;/span&gt;

&lt;span style=&#34;color:#008000&#34;&gt;source&lt;/span&gt; .env
&lt;span style=&#34;color:#19177c&#34;&gt;CHAT_ID&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;-468250841

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#---------&lt;/span&gt;

&lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Now              : &amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;docker run --rm ubuntu date&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;ten_minutes_ago&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;docker run --rm ubuntu date --date &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;-10 min&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;+%s&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Ten minutes ago  : &amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;docker run --rm ubuntu date -d @&lt;span style=&#34;color:#19177c&#34;&gt;$ten_minutes_ago&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#19177c&#34;&gt;latest_ts&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;docker run --rm edenhill/kafkacat:1.5.0 kafkacat -b &lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_BROKER_HOST&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -X security.protocol&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;SASL_SSL -X sasl.mechanisms&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;PLAIN &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -X sasl.username&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_API_KEY&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; -X sasl.password&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_API_SECRET&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -X api.version.request&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -C -c1 -o -1 -t my_kafka_topic -u -f %T| sed &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;s/[0-9][0-9][0-9]$//g&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#19177c&#34;&gt;$latest_ts&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;then&lt;/span&gt;
	&lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;TS is empty&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;chat_id&amp;#34;: &amp;#34;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$CHAT_ID&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;❌my_kafka_topic ingest check failed. Latest ingest time is empty&amp;#34;, &amp;#34;disable_notification&amp;#34;: false}&amp;#34;&amp;#39;&lt;/span&gt; |&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	curl -s -X POST &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	     -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	     -d @- &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;	     https://api.telegram.org/bot&lt;span style=&#34;color:#19177c&#34;&gt;$TELEGRAM_BOT_TOKEN&lt;/span&gt;/sendMessage | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt;
	&lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Latest timestamp : &amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;docker run --rm ubuntu date -d @&lt;span style=&#34;color:#19177c&#34;&gt;$latest_ts&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$latest_ts&lt;/span&gt; -lt &lt;span style=&#34;color:#19177c&#34;&gt;$ten_minutes_ago&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;then&lt;/span&gt; 
		&lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Ingest has stalled&amp;#34;&lt;/span&gt;
		&lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;chat_id&amp;#34;: &amp;#34;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$CHAT_ID&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;❌my_kafka_topic ingest has stalled. Latest ingest time is &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;docker run --rm ubuntu date -d @&lt;span style=&#34;color:#19177c&#34;&gt;$latest_ts&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#34;, &amp;#34;disable_notification&amp;#34;: false}&amp;#34;&amp;#39;&lt;/span&gt; |&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;		curl -s -X POST &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;		     -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;		     -d @- &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;		     https://api.telegram.org/bot&lt;span style=&#34;color:#19177c&#34;&gt;$TELEGRAM_BOT_TOKEN&lt;/span&gt;/sendMessage | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt;
		&lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;chat_id&amp;#34;: &amp;#34;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$CHAT_ID&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;✅my_kafka_topic ingest looks good. Latest ingest time is &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;docker run --rm ubuntu date -d @&lt;span style=&#34;color:#19177c&#34;&gt;$latest_ts&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#34;, &amp;#34;disable_notification&amp;#34;: true}&amp;#34;&amp;#39;&lt;/span&gt; |&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;		curl -s -X POST &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;		     -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;		     -d @- &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;		     https://api.telegram.org/bot&lt;span style=&#34;color:#19177c&#34;&gt;$TELEGRAM_BOT_TOKEN&lt;/span&gt;/sendMessage | jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_complaints&#34;&gt;Complaints?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Please send all complaints to &lt;code&gt;/dev/null&lt;/code&gt; ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Are Tech Conferences Dead?</title>
      <link>https://rmoff.net/2020/03/13/are-tech-conferences-dead/</link>
      <pubDate>2020-03-13</pubDate>
      
      <guid>https://rmoff.net/2020/03/13/are-tech-conferences-dead/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/03/IMG_3402.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;🦠COVID-19 has well and truly hit the tech scene this week. As well as being full of &#34;WFH tips&#34; for all the tech workers suddenly banished from their offices, my particular Twitter bubble is full of DevRel folk musing and debating about what this interruption means to our profession. For sure, in the short term, the Spring conference season is screwed— &lt;a href=&#34;https://airtable.com/shrETNURgXNrGWbd8/tblc49hMMykARebo8?blocks=hide&#34;&gt;&lt;strong&gt;all&lt;/strong&gt; the conferences&lt;/a&gt; are cancelled (or postponed).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But what about the future? No-one would ever &lt;em&gt;want&lt;/em&gt; to take such a forced hiatus but what an excellent opportunity it is to take a step back and consider why we&amp;#8217;re doing what we&amp;#8217;re doing - and if we should go back to business as usual once things calm down.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_tech_conferences_the_good_the_bad_and_the_damn_ugly&#34;&gt;Tech conferences: the good, the bad, and the damn ugly&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s get our definitions and context sorted first, because sometimes one person&amp;#8217;s &lt;em&gt;good&lt;/em&gt; is another&amp;#8217;s &lt;em&gt;bad&lt;/em&gt;. Here I&amp;#8217;m talking from the point of view of the conference participant - the developer, the architect, the engineer. Things that make an excellent conference, in my experience, include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;great content&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ring-fenced time to consume and discuss said content&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;opportunity to interact with the speakers and with other like-minded developers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;safe &amp;amp; inclusive environment&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are lots of conferences that tick all these boxes, including (but not exclusively; sorry if I&amp;#8217;ve left your favourite one out here) Devoxx, code.talks, JavaZone, QCon, Øredev, NDC, and Kafka Summit. The unifying factor across all these is that they are curated and designed for the benefit and edification of their audience. It&amp;#8217;s not a coincidence that many are led by local user groups.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;But&lt;/em&gt;…there are other conferences that have become—or maybe always were—a commercial enterprise based around vendor sponsorship and ticket sales, with the content and audience experience playing second fiddle to whatever the sponsors want to hawk. Many &#34;pay-to-play&#34; talks are not always as useful as those accepted on merit alone, nor are they always as well delivered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;That&amp;#8217;s not to say that it&amp;#8217;s impossible for a conference to be commercially successful (from the point of view of the sponsors, marketing lead-gen, etc) whilst also providing a great experience for the audience. But, there is a significant tension that does not always play out to the benefit of those attending.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_do_we_even_still_need_conferences_irl&#34;&gt;Do we even still need conferences IRL?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;(IRL=In Real Life)&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There&amp;#8217;s a lot of justifiable excitement right now about the potential for what can be done online to replace the 🦠-forced cancellation of so many conferences. Why go to the hassle, and create such a huge carbon footprint, of flying half-way around the globe if you can do it from the comfort of your study?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I would love to see more conference-like experiences available online. There are some significant reasons for doing this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reduced travel costs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduced environmental impact of travel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By definition, the material can be recorded and so consumed asynchronously at the viewer&amp;#8217;s leisure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More accessible to those who might be intimidated by the idea of attending an event in-person&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More convenient to those who can&amp;#8217;t commit the contiguous block of time necessary to attend a conference&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But…there&amp;#8217;s always a but…&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_whats_so_good_about_conferences_anyway&#34;&gt;What&amp;#8217;s so good about conferences, anyway?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;People.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Interacting with people is why I travel for eight hours to speak to 100 people and then travel eight hours home again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There&amp;#8217;s a really good reason that the &lt;em&gt;hallway track&lt;/em&gt; gets talked about so much. The hallway track is what people refer to when they&amp;#8217;re talking about conversations they have in the hallway (hence the name) at a conference, between sessions, on the way to lunch, after the conference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It more broadly covers just generally hanging out at a conference, grabbing a drink, heading to get some food, with people who are interested in the same technologies and ideas as you are—and now you&amp;#8217;re in a place with no calls on your time &lt;em&gt;other than to talk about this stuff and build relationships with other people&lt;/em&gt;. It&amp;#8217;s where fun ideas are had, friendships are built, where an increased meaning to the eight hours a day we spend staring at a screen is given.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_other_challenges_for_online_events&#34;&gt;Other challenges for online events&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These are &lt;em&gt;not&lt;/em&gt; insurmountable, but they cannot be ignored.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How do you replicate &lt;em&gt;the hallway track&lt;/em&gt;? How do you replicate the camaraderie and community of an in-person event with the shared experiences of the same crap conference food, inspiring keynote talks, fun parties, etc?&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I grew up in the BBS era and subsequent IRC days of the internet, and there were chat-rooms and Usenet groups where you really got to know people, and communities genuinely formed. I know that communities &lt;strong&gt;can&lt;/strong&gt; and do form online, but you have to find a way to cultivate and nurture them in a way that goes beyond sticking a chat window onto a webinar.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a speaker being there in person with your audience makes it MUCH easier to read the room. Are people nodding and smiling and following along, or are they glued to their phones desperately waiting for the session to end? Are they looking perplexed and puzzled, or excited and engaged? This is infinitely easier to gauge in-person than it is in a virtual setting.&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;h/t to &lt;a href=&#34;https://twitter.com/KentGraziano/status/1238554520281587712&#34;&gt;Kent Graziano&lt;/a&gt; for articulating this.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A conference that you physically attend is dedicated, ring fenced time. Perhaps it’s just me and poor discipline, but I always &lt;em&gt;intend&lt;/em&gt; to watch the videos from a conference I didn’t make it to&amp;#8230;&amp;#8203;but I rarely do. At a conference, you’re there to learn and listen and talk, and everything else is relegated to waiting. Back at work, the risk is that consuming conference content becomes secondary and a “luxury” to do in between “real work”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you&amp;#8217;re physically present at a conference, you&amp;#8217;re on the same timezone, with far fewer demands on your time. The talks start at 07:30? Unconference is going on until 22:00? No problem. For a virtual event you&amp;#8217;re at home/in the office, quite possibly in a different timezone, with the usual commute / school run / family interactions to attend to.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_are_tech_conferences_dead_no_but_they_might_benefit_from_a_bit_of_pruning&#34;&gt;Are Tech Conferences Dead? No. But they might benefit from a bit of pruning.&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;In-Person and Online are not mutually exclusive. This is not a battle to be won and lost.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There is a frenzied and important discussion going on right now in the DevRel world and beyond about if and how you can replicate the meetup and conference experience online. My hope is that more events are enabled this way (for the reasons above). But these are simply &lt;em&gt;another&lt;/em&gt; medium through which developers can participate and engage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In-person conferences will always be a thing because &lt;em&gt;most people&lt;/em&gt; value the face-to-face interactions. Maybe less frequently, maybe VendorConf will end up virtual, and that&amp;#8217;s fine - but my view (and hope) is that when the dust has settled, there will be a &#39;correction&#39; in the conference &#39;market&#39;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;At the heart of in-person conferences are the social interactions and the passionate programmes curated to enable people to immerse themselves over the course of a day or more in the technology, the culture, the people. These conferences are the ones that happen by the sheer will-power and dedication of the organisers, and they happened before and will happen again 🤞&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Want to comment? Head over to &lt;a href=&#34;https://dev.to/rmoff/are-tech-conferences-dead-7kj&#34;&gt;the cross-post here&lt;/a&gt; and join the conversation.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>