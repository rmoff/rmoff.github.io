<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rmoff&#39;s random ramblings</title>
    <link>https://rmoff.net/</link>
    <description>Recent content on rmoff&#39;s random ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>2020-06-19</lastBuildDate>
    
        <atom:link href="https://rmoff.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to install connector plugins in Kafka Connect</title>
      <link>https://rmoff.net/2020/06/19/how-to-install-connector-plugins-in-kafka-connect/</link>
      <pubDate>2020-06-19</pubDate>
      
      <guid>https://rmoff.net/2020/06/19/how-to-install-connector-plugins-in-kafka-connect/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5119.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Kafka Connect (which is part of Apache Kafka) supports pluggable connectors, enabling you to stream data between Kafka and numerous types of system, including to mention just a few:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Databases&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Message Queues&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flat files&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object stores&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The appropriate plugin for the technology which you want to integrate can be found on &lt;a href=&#34;https://www.confluent.io/hub/&#34;&gt;Confluent Hub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/18gDPSOH3wU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You need to install the plugin on each Kafka Connect worker in the Kafka Connect cluster. After installing the plugin, you must restart the Kafka Connect worker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
Plugins are JAR files that you will usually download directly from Confluent Hub, but in some cases may get from other places such as GitHub and need to build yourself.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;See also &lt;a href=&#34;https://docs.confluent.io/current/connect/userguide.html#installing-kconnect-plugins&#34;&gt;Installing Connect Plugins&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_automagic_installation_using_confluent_hub&#34;&gt;Automagic installation using &lt;code&gt;confluent-hub&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you&amp;#8217;re running Confluent Platform you already have Confluent Hub client. If not, then you can download it from &lt;a href=&#34;https://docs.confluent.io/current/connect/managing/confluent-hub/client.html#c-hub-client&#34;&gt;the instructions here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Run the client on your Kafka Connect worker(s), and it does all the hard work for you. You just need the name of the connector and its version, which you can get from the plugin&amp;#8217;s page on &lt;a href=&#34;https://www.confluent.io/hub/&#34;&gt;Confluent Hub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ confluent-hub install --no-prompt jcustenborder/kafka-connect-spooldir:2.0.43
Running in a &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;--no-prompt&amp;#34;&lt;/span&gt; mode
Implicit acceptance of the license below:
Apache License &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;.0
https:/github.com/jcustenborder/kafka-connect-spooldir/LICENSE
Implicit confirmation of the question: You are about to install &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;kafka-connect-spooldir&amp;#39;&lt;/span&gt; from Jeremy Custenborder, as published on Confluent Hub.
Downloading component Kafka Connect Spooldir &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;.0.43, provided by Jeremy Custenborder from Confluent Hub and installing into /Users/rmoff/confluent-platform/share/confluent-hub-components
Adding installation directory to plugin path in the following files:
  /Users/rmoff/confluent-platform/etc/kafka/connect-distributed.properties
  /Users/rmoff/confluent-platform/etc/kafka/connect-standalone.properties
  /Users/rmoff/confluent-platform/etc/schema-registry/connect-avro-distributed.properties
  /Users/rmoff/confluent-platform/etc/schema-registry/connect-avro-standalone.properties

Completed&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_manual_installation&#34;&gt;Manual installation&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Download the JAR file (usually from &lt;a href=&#34;https://www.confluent.io/hub/&#34;&gt;Confluent Hub&lt;/a&gt; but perhaps built manually yourself from elsewhere), and place it in a folder on your Kafka Connect worker. For this example, we&amp;#8217;ll put it in &lt;code&gt;/opt/connectors&lt;/code&gt;. The folder tree will look something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;/opt/connectors
└── jcustenborder-kafka-connect-spooldir
    ├── doc
    │   ├── LICENSE
    │   └── README.md
    ├── etc
        …
    ├── lib
        …
    │   ├── javassist-3.21.0-GA.jar
    │   ├── jsr305-3.0.2.jar
    │   ├── kafka-connect-spooldir-2.0.43.jar
    │   ├── listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar
        …
    └── manifest.json

&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; directories, &lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt; files&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Locate your Kafka Connect worker&amp;#8217;s configuration (&lt;code&gt;.properties&lt;/code&gt;) file, and open it in an editor. Search for &lt;code&gt;plugin.path&lt;/code&gt; setting, and amend or create it to include the folder(s) in which you connectors reside&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;plugin.path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;/opt/connectors&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Restart your Kafka Connect worker.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_docker&#34;&gt;Docker&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With Docker it can be a bit more tricky because you need to install the plugin &lt;strong&gt;before&lt;/strong&gt; the worker starts. If you try to install it in the Docker container and then restart the worker, the container restarts and you lose the JAR that you installed. There are three approaches to use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_docker_volume_mapping&#34;&gt;Docker (volume mapping)&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Download your plugin JARs to a local folder on the Docker host (e.g. &lt;code&gt;/path/on/docker/host/to/connector/folder&lt;/code&gt;), and map these in to the container (e.g. to &lt;code&gt;/data/containers&lt;/code&gt;), ensuring that they are included in the container&amp;#8217;s &lt;code&gt;plugin.path&lt;/code&gt; environment variable. A Docker Compose would look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;…&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;environment:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;…&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;CONNECT_PLUGIN_PATH:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;/usr/share/java,/data/connectors/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;volumes:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/path/on/docker/host/to/connector/folder:/data&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_docker_runtime_installation&#34;&gt;Docker (runtime installation)&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When a Docker container is run, it uses the &lt;code&gt;Cmd&lt;/code&gt; or &lt;code&gt;EntryPoint&lt;/code&gt; that was defined when the image was built. &lt;a href=&#34;https://hub.docker.com/r/confluentinc/cp-kafka-connect-base&#34;&gt;Confluent&amp;#8217;s Kafka Connect image&lt;/a&gt; will—as you would expect—launch the Kafka Connect worker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ docker inspect --format&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{{.Config.Cmd}}&amp;#39;&lt;/span&gt; confluentinc/cp-kafka-connect-base:5.5.0
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;/etc/confluent/docker/run&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can override that at runtime to install the plugins first. In Docker Compose this looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;…&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;environment:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;…&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;CONNECT_PLUGIN_PATH:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;/usr/share/java,/usr/share/confluent-hub-components/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;command:&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bash&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-c&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121;font-style:italic&#34;&gt;|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121;font-style:italic&#34;&gt;        # Install connector plugins&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# This will by default install into /usr/share/confluent-hub-components/ so make&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#  sure that this path is added to the plugin.path in the environment variables &lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;confluent-hub&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;install&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;--no-prompt&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;jcustenborder/kafka-connect-spooldir:&lt;span style=&#34;color:#666&#34;&gt;2.0.43&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Launch the Kafka Connect worker&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;/etc/confluent/docker/run&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;amp;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Don&amp;#39;t exit&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;sleep&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;infinity&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_docker_bake_a_custom_image&#34;&gt;Docker (bake a custom image)&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For any non-trivial Docker deployment you&amp;#8217;re going to want to build and curate your own Docker image with the connector plugin(s) that you require for your environment. To do this create a Dockerfile:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt; confluentinc/cp-kafka-connect-base:5.5.0&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ENV&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;CONNECT_PLUGIN_PATH&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/usr/share/java,/usr/share/confluent-hub-components&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;RUN&lt;/span&gt; confluent-hub install --no-prompt jcustenborder/kafka-connect-spooldir:2.0.43&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and then build it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker build -t kafka-connect-spooldir .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_video_tutorial&#34;&gt;Video Tutorial&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/18gDPSOH3wU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Loading CSV data into Kafka</title>
      <link>https://rmoff.net/2020/06/17/loading-csv-data-into-kafka/</link>
      <pubDate>2020-06-17</pubDate>
      
      <guid>https://rmoff.net/2020/06/17/loading-csv-data-into-kafka/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5001.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For whatever reason, CSV still exists as a ubiquitous data interchange format. It doesn&amp;#8217;t get much simpler: chuck some plaintext with fields separated by commas into a file and stick &lt;code&gt;.csv&lt;/code&gt; on the end. If you&amp;#8217;re feeling helpful you can include a header row with field names in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csv&#34; data-lang=&#34;csv&#34;&gt;order_id,customer_id,order_total_usd,make,model,delivery_city,delivery_company,delivery_address
1,535,190899.73,Dodge,Ram Wagon B350,Sheffield,DuBuque LLC,2810 Northland Avenue
2,671,33245.53,Volkswagen,Cabriolet,Edinburgh,Bechtelar-VonRueden,1 Macpherson Crossing&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this article we&amp;#8217;ll see how to load this CSV data into Kafka, without even needing to write any code&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Importantly, we&amp;#8217;re not going to reinvent the wheel by trying to write some code to do it ourselves - &lt;a href=&#34;https://docs.confluent.io/current/connect/index.html&#34;&gt;Kafka Connect&lt;/a&gt; (which is part of Apache Kafka) already exists &lt;a href=&#34;https://rmoff.dev/ljc-kafka-02&#34;&gt;to do all of this for us&lt;/a&gt;; we just need the appropriate connector.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/N1pseW9waNI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_schemas&#34;&gt;Schemas?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Yeah, schemas. CSV files might not care about them much, but the users of your data in Kafka will. &lt;strong&gt;Ideally&lt;/strong&gt; we want a way to define the schema of the data that we ingest so that it can be stored and read by anyone who wants to use the data. To understand why this is such a big deal check out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.infoq.com/presentations/contracts-streaming-microservices/&#34;&gt;Streaming Microservices: Contracts &amp;amp; Compatibility&lt;/a&gt; (InfoQ talk)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.confluent.io/blog/schema-registry-kafka-stream-processing-yes-virginia-you-really-need-one&#34;&gt;Yes, Virginia, You Really Do Need a Schema Registry&lt;/a&gt; (blog)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.confluent.io/blog/schemas-contracts-compatibility&#34;&gt;Schemas, Contracts, and Compatibility&lt;/a&gt; (blog)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.confluent.io/blog/confluent-platform-now-supports-protobuf-json-schema-custom-formats/&#34;&gt;Confluent Platform Now Supports Protobuf, JSON Schema, and Custom Formats&lt;/a&gt; (blog)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are going to define a schema at ingest (and I hope you do), use Avro, Protobuf, or JSON Schema, as described &lt;a href=&#34;https://www.confluent.io/blog/kafka-connect-deep-dive-converters-serialization-explained&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
You don&amp;#8217;t &lt;strong&gt;have&lt;/strong&gt; to use a schema. You can just ingest the CSV data as-is, and I cover this below too.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_kafka_connect_spooldir_connector&#34;&gt;Kafka Connect SpoolDir connector&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Kafka Connect SpoolDir connector supports various flatfile formats, including CSV. Get it from &lt;a href=&#34;https://www.confluent.io/hub/jcustenborder/kafka-connect-spooldir&#34;&gt;Confluent Hub&lt;/a&gt;, and check out the &lt;a href=&#34;https://docs.confluent.io/current/connect/kafka-connect-spooldir/&#34;&gt;docs here&lt;/a&gt;. Once you&amp;#8217;ve installed it in your Kafka Connect worker make sure you restart the worker for it to pick it up. You can check by running:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ curl -s localhost:8083/connector-plugins|jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.[].class&amp;#39;&lt;/span&gt;|egrep &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;SpoolDir&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;com.github.jcustenborder.kafka.connect.spooldir.SpoolDirCsvSourceConnector&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;com.github.jcustenborder.kafka.connect.spooldir.SpoolDirJsonSourceConnector&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;com.github.jcustenborder.kafka.connect.spooldir.SpoolDirLineDelimitedSourceConnector&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;com.github.jcustenborder.kafka.connect.spooldir.SpoolDirSchemaLessJsonSourceConnector&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;com.github.jcustenborder.kafka.connect.spooldir.elf.SpoolDirELFSourceConnector&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_loading_data_from_csv_into_kafka_and_applying_a_schema&#34;&gt;Loading data from CSV into Kafka and applying a schema&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you have a header row with field names you can take advantage of these to define the schema at ingestion time (which is a &lt;strong&gt;good&lt;/strong&gt; idea).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Create the connector:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -i -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Accept:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http://localhost:8083/connectors/source-csv-spooldir-00/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connector.class&amp;#34;: &amp;#34;com.github.jcustenborder.kafka.connect.spooldir.SpoolDirCsvSourceConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;topic&amp;#34;: &amp;#34;orders_spooldir_00&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;input.path&amp;#34;: &amp;#34;/data/unprocessed&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;finished.path&amp;#34;: &amp;#34;/data/processed&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;error.path&amp;#34;: &amp;#34;/data/error&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;input.file.pattern&amp;#34;: &amp;#34;.*\\.csv&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;schema.generation.enabled&amp;#34;:&amp;#34;true&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;csv.first.row.as.header&amp;#34;:&amp;#34;true&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
when you create the connector with this configuration you need to run this with &lt;code&gt;&#34;csv.first.row.as.header&#34;:&#34;true&#34;&lt;/code&gt; and a file with headers already in place pending to be read.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now head over to a Kafka consumer and observe our data. Here I&amp;#8217;m using kafkacat cos it&amp;#8217;s great :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker &lt;span style=&#34;color:#008000&#34;&gt;exec&lt;/span&gt; kafkacat &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    kafkacat -b kafka:29092 -t orders_spooldir_00 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -C -o-1 -J &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -s &lt;span style=&#34;color:#19177c&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;s -s &lt;span style=&#34;color:#19177c&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;avro -r http://schema-registry:8081 | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.payload&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;500&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;customer_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;424&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_total_usd&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;160312.42&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;make&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Chevrolet&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Suburban 1500&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_city&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;London&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_company&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Predovic LLC&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_address&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2 Sundown Drive&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What&amp;#8217;s more, in the header of the Kafka message is the metadata from the file itself:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker &lt;span style=&#34;color:#008000&#34;&gt;exec&lt;/span&gt; kafkacat &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    kafkacat -b kafka:29092 -t orders_spooldir_00 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -C -o-1 -J &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -s &lt;span style=&#34;color:#19177c&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;s -s &lt;span style=&#34;color:#19177c&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;avro -r http://schema-registry:8081 | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.headers&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;file.name&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;orders.csv&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;file.path&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/data/unprocessed/orders.csv&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;file.length&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;39102&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;file.offset&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;501&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;file.last.modified&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2020-06-17T13:33:50.000Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_setting_the_message_key&#34;&gt;Setting the message key&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Assuming you have header row to provide field names, you can set &lt;code&gt;schema.generation.key.fields&lt;/code&gt; to the name of the field(s) you&amp;#8217;d like to use for the Kafka message key. If you&amp;#8217;re running this after the first example above remember that the connector relocates your file so you need to move it back to the &lt;code&gt;input.path&lt;/code&gt; location for it to be processed again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
The connector name (here it&amp;#8217;s &lt;code&gt;source-csv-spooldir-01&lt;/code&gt;) is used in tracking which files have been processed and the offset within them, so a connector of the same name won&amp;#8217;t reprocess a file of the same name and lower offset than already processed. If you want to force it to reprocess a file, give the connector a new name.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -i -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Accept:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http://localhost:8083/connectors/source-csv-spooldir-01/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connector.class&amp;#34;: &amp;#34;com.github.jcustenborder.kafka.connect.spooldir.SpoolDirCsvSourceConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;topic&amp;#34;: &amp;#34;orders_spooldir_01&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;input.path&amp;#34;: &amp;#34;/data/unprocessed&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;finished.path&amp;#34;: &amp;#34;/data/processed&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;error.path&amp;#34;: &amp;#34;/data/error&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;input.file.pattern&amp;#34;: &amp;#34;.*\\.csv&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;schema.generation.enabled&amp;#34;:&amp;#34;true&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;schema.generation.key.fields&amp;#34;:&amp;#34;order_id&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;csv.first.row.as.header&amp;#34;:&amp;#34;true&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The resulting Kafka message has the &lt;code&gt;order_id&lt;/code&gt; set as the message key:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker &lt;span style=&#34;color:#008000&#34;&gt;exec&lt;/span&gt; kafkacat &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    kafkacat -b kafka:29092 -t orders_spooldir_01 -o-1 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -C -J &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -s &lt;span style=&#34;color:#19177c&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;s -s &lt;span style=&#34;color:#19177c&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;avro -r http://schema-registry:8081 | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;key&amp;#34;:.key,&amp;#34;payload&amp;#34;: .payload}&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Struct{order_id=3}&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;payload&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;customer_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;695&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_total_usd&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;155664.90&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;make&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Toyota&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Avalon&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_city&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Brighton&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_company&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Jacobs, Ebert and Dooley&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_address&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;4 Loomis Crossing&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_changing_the_schema_field_types&#34;&gt;Changing the schema field types&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The connector does a fair job at setting the schema, but maybe you want to override it. You can declare the whole thing upfront using the &lt;code&gt;value.schema&lt;/code&gt; configuration, but perhaps you are happy with it inferring the whole schema except for a couple of fields. Here you can use &lt;a href=&#34;https://docs.confluent.io/current/connect/transforms/index.html&#34;&gt;Single Message Transform&lt;/a&gt; to munge it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -i -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Accept:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http://localhost:8083/connectors/source-csv-spooldir-02/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connector.class&amp;#34;: &amp;#34;com.github.jcustenborder.kafka.connect.spooldir.SpoolDirCsvSourceConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;topic&amp;#34;: &amp;#34;orders_spooldir_02&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;input.path&amp;#34;: &amp;#34;/data/unprocessed&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;finished.path&amp;#34;: &amp;#34;/data/processed&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;error.path&amp;#34;: &amp;#34;/data/error&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;input.file.pattern&amp;#34;: &amp;#34;.*\\.csv&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;schema.generation.enabled&amp;#34;:&amp;#34;true&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;schema.generation.key.fields&amp;#34;:&amp;#34;order_id&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;csv.first.row.as.header&amp;#34;:&amp;#34;true&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;transforms&amp;#34;:&amp;#34;castTypes&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;transforms.castTypes.type&amp;#34;:&amp;#34;org.apache.kafka.connect.transforms.Cast$Value&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;transforms.castTypes.spec&amp;#34;:&amp;#34;order_id:int32,customer_id:int32,order_total_usd:float32&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you go and look at the schema that&amp;#8217;s been created and stored in the Schema Registry you can see the field data types have been set as specified:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;➜ curl --silent --location --request GET &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;http://localhost:8081/subjects/orders_spooldir_02-value/versions/latest&amp;#39;&lt;/span&gt; |jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.schema|fromjson&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;record&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Value&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;com.github.jcustenborder.kafka.connect.model&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_id&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: null &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;customer_id&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: null &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_total_usd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;float&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: null &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;make&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: null &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: null &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_city&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: null &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_company&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: null &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_address&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: null &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;connect.name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;com.github.jcustenborder.kafka.connect.model.Value&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_just_gimme_the_plain_text&#34;&gt;Just gimme the plain text! 😢&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All of this schemas seems like a bunch of fuss really, doesn&amp;#8217;t it? Well not really. But, if you absolutely must just have CSV in your Kafka topic then here&amp;#8217;s how. Note that we&amp;#8217;re using a &lt;a href=&#34;https://docs.confluent.io/current/connect/kafka-connect-spooldir/connectors/line_delimited_source_connector.html&#34;&gt;different connector class&lt;/a&gt; and we&amp;#8217;re using &lt;code&gt;org.apache.kafka.connect.storage.StringConverter&lt;/code&gt; to write the values. If you want to learn more about serialisers and converters &lt;a href=&#34;https://www.confluent.io/blog/kafka-connect-deep-dive-converters-serialization-explained&#34;&gt;see here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -i -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Accept:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http://localhost:8083/connectors/source-csv-spooldir-03/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connector.class&amp;#34;: &amp;#34;com.github.jcustenborder.kafka.connect.spooldir.SpoolDirLineDelimitedSourceConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;value.converter&amp;#34;:&amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;topic&amp;#34;: &amp;#34;orders_spooldir_03&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;input.path&amp;#34;: &amp;#34;/data/unprocessed&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;finished.path&amp;#34;: &amp;#34;/data/processed&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;error.path&amp;#34;: &amp;#34;/data/error&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;input.file.pattern&amp;#34;: &amp;#34;.*\\.csv&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The result? Just CSV.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ docker &lt;span style=&#34;color:#008000&#34;&gt;exec&lt;/span&gt; kafkacat &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    kafkacat -b kafka:29092 -t orders_spooldir_03 -o-5 -C -u -q
&lt;span style=&#34;color:#666&#34;&gt;496&lt;/span&gt;,456,80466.80,Volkswagen,Touareg,Leeds,Hilpert-Williamson,96 Stang Junction
&lt;span style=&#34;color:#666&#34;&gt;497&lt;/span&gt;,210,57743.67,Dodge,Neon,London,Christiansen Group,7442 Algoma Hill
&lt;span style=&#34;color:#666&#34;&gt;498&lt;/span&gt;,88,211171.02,Nissan,370Z,York,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;King, Yundt and Skiles&amp;#34;&lt;/span&gt;,3 1st Plaza
&lt;span style=&#34;color:#666&#34;&gt;499&lt;/span&gt;,343,126072.73,Chevrolet,Camaro,Sheffield,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Schiller, Ankunding and Schumm&amp;#34;&lt;/span&gt;,8920 Hoffman Place
&lt;span style=&#34;color:#666&#34;&gt;500&lt;/span&gt;,424,160312.42,Chevrolet,Suburban &lt;span style=&#34;color:#666&#34;&gt;1500&lt;/span&gt;,London,Predovic LLC,2 Sundown Drive&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_side_bar_schemas_in_action&#34;&gt;Side-bar: Schemas in action&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So we&amp;#8217;ve read some CSV data into Kafka. That&amp;#8217;s not the end of its journey. It&amp;#8217;s going to be used for something! Let&amp;#8217;s do that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s &lt;a href=&#34;https://ksqldb.io/quickstart.html&#34;&gt;ksqlDB&lt;/a&gt;, in which we declare the orders topic we wrote to with a schema as a stream:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM ORDERS_02 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;orders_spooldir_02&amp;#39;&lt;/span&gt;,VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;AVRO&amp;#39;&lt;/span&gt;);

 Message
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; Stream created
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Having done that—and because there&amp;#8217;s a schema that was created at ingestion time—we can see all of the fields available to us:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DESCRIBE&lt;/span&gt; ORDERS_02;

Name                 : ORDERS_02
 Field            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Type&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; ROWKEY           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)  (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;key&lt;/span&gt;)
 ORDER_ID         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;INTEGER&lt;/span&gt;
 CUSTOMER_ID      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;INTEGER&lt;/span&gt;
 ORDER_TOTAL_USD  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; DOUBLE
 MAKE             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 MODEL            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 DELIVERY_CITY    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 DELIVERY_COMPANY &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 DELIVERY_ADDRESS &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;For&lt;/span&gt; runtime &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;statistics&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;and&lt;/span&gt; query details run: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DESCRIBE&lt;/span&gt; EXTENDED &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;Stream,&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Table&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;;
ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and run queries against the data that&amp;#8217;s in Kafka:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; DELIVERY_CITY, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; ORDER_COUNT, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;MAX&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CAST&lt;/span&gt;(ORDER_TOTAL_USD &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;DECIMAL&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;))) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; BIGGEST_ORDER_USD &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; ORDERS_02 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;BY&lt;/span&gt; DELIVERY_CITY EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------+-------------+---------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;DELIVERY_CITY  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ORDER_COUNT  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;BIGGEST_ORDER_USD    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------+-------------+---------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Bradford       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;189924&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;47&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Edinburgh      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;199502&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;66&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Bristol        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;213830&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Sheffield      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;74&lt;/span&gt;           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;216233&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;98&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;London         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;160&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;219736&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;06&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What about our data that we just ingested into a different topic as straight-up CSV? Because, like, schemas aren&amp;#8217;t important?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM ORDERS_03 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;orders_spooldir_03&amp;#39;&lt;/span&gt;,VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;DELIMITED&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;No&lt;/span&gt; columns supplied.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Yeah, no columns supplied. No schema, no bueno. If you want to work with the data, whether to query in SQL, stream to a data lake, or do anything else with—at some point you&amp;#8217;re going to have to declare that schema. Hence why CSV, as a schemaless-serialisation method, is a bad way to exchange data between systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you really want to use your CSV data in ksqlDB, you can, you just need to enter the schema—which is error prone and tedious. You enter it each time to use the data, every other consumer of the data enters it each time too. Declaring it once at ingest and it being available for all to use makes a lot more sense.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_regex_and_json&#34;&gt;Regex and JSON&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you&amp;#8217;re using the REST API to submit configuration you might hit up against errors sending regex values within the JSON. For example, if you want to set &lt;code&gt;input.file.pattern&lt;/code&gt; to &lt;code&gt;.*\.csv&lt;/code&gt; and you put that in your JSON literally:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;input.file.pattern&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;.*\.csv&amp;#34;&lt;/span&gt;,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You&amp;#8217;ll get this error back if you submit it as inline data with &lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;com.fasterxml.jackson.core.JsonParseException: Unrecognized character escape &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;code &lt;span style=&#34;color:#666&#34;&gt;46&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;                                                    at &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;Source: &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;org.glassfish.jersey.message.internal.ReaderInterceptorExecutor&lt;span style=&#34;color:#19177c&#34;&gt;$UnCloseableInputStream&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;; line: &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;, column: &lt;span style=&#34;color:#666&#34;&gt;36&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;THe solution is to escape the escape character (the backslash):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;input.file.pattern&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;.*\\.csv&amp;#34;&lt;/span&gt;,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_streaming_csv_data_from_kafka_to_a_database_or_anywhere_else&#34;&gt;Streaming CSV data from Kafka to a database (or anywhere else…)&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Since you&amp;#8217;ve got a schema to the data, you can easily sink it to a database, such as Postgres:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -X PUT http://localhost:8083/connectors/sink-postgres-orders-00/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connector.class&amp;#34;: &amp;#34;io.confluent.connect.jdbc.JdbcSinkConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connection.url&amp;#34;: &amp;#34;jdbc:postgresql://postgres:5432/&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connection.user&amp;#34;: &amp;#34;postgres&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connection.password&amp;#34;: &amp;#34;postgres&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;tasks.max&amp;#34;: &amp;#34;1&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;topics&amp;#34;: &amp;#34;orders_spooldir_02&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;auto.create&amp;#34;: &amp;#34;true&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;auto.evolve&amp;#34;:&amp;#34;true&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;pk.mode&amp;#34;:&amp;#34;record_value&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;pk.fields&amp;#34;:&amp;#34;order_id&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;insert.mode&amp;#34;: &amp;#34;upsert&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;table.name.format&amp;#34;:&amp;#34;orders&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
This &lt;strong&gt;only&lt;/strong&gt; works if you have a schema in your data. See &lt;a href=&#34;https://rmoff.dev/jdbc-sink-schemas&#34;&gt;here&lt;/a&gt; to understand why and how to work with this requirement.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#19177c&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# \dt&lt;/span&gt;
         List of relations
 Schema |  Name  | Type  |  Owner
--------+--------+-------+----------
 public | orders | table | postgres
&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; row&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#19177c&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# \d orders;&lt;/span&gt;
                    Table &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;public.orders&amp;#34;&lt;/span&gt;
      Column      |  Type   | Collation | Nullable | Default
------------------+---------+-----------+----------+---------
 order_id         | integer |           | not null |
 customer_id      | integer |           |          |
 order_total_usd  | real    |           |          |
 make             | text    |           |          |
 model            | text    |           |          |
 delivery_city    | text    |           |          |
 delivery_company | text    |           |          |
 delivery_address | text    |           |          |
Indexes:
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;orders_pkey&amp;#34;&lt;/span&gt; PRIMARY KEY, btree &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;order_id&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#19177c&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# SELECT * FROM orders FETCH FIRST 10 ROWS ONLY;&lt;/span&gt;
 order_id | customer_id | order_total_usd |    make    |     model      | delivery_city |     delivery_company     |     delivery_address
----------+-------------+-----------------+------------+----------------+---------------+--------------------------+--------------------------
        &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;535&lt;/span&gt; |       &lt;span style=&#34;color:#666&#34;&gt;190899&lt;/span&gt;.73 | Dodge      | Ram Wagon B350 | Sheffield     | DuBuque LLC              | &lt;span style=&#34;color:#666&#34;&gt;2810&lt;/span&gt; Northland Avenue
        &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;671&lt;/span&gt; |        &lt;span style=&#34;color:#666&#34;&gt;33245&lt;/span&gt;.53 | Volkswagen | Cabriolet      | Edinburgh     | Bechtelar-VonRueden      | &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; Macpherson Crossing
        &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;695&lt;/span&gt; |        &lt;span style=&#34;color:#666&#34;&gt;155664&lt;/span&gt;.9 | Toyota     | Avalon         | Brighton      | Jacobs, Ebert and Dooley | &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; Loomis Crossing
        &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;366&lt;/span&gt; |        &lt;span style=&#34;color:#666&#34;&gt;149012&lt;/span&gt;.9 | Hyundai    | Santa Fe       | Leeds         | Kiehn Group              | &lt;span style=&#34;color:#666&#34;&gt;538&lt;/span&gt; Burning Wood Alley
        &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;175&lt;/span&gt; |        &lt;span style=&#34;color:#666&#34;&gt;63274&lt;/span&gt;.18 | Kia        | Sportage       | Leeds         | Miller-Hudson            | &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; Kennedy Court
        &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; |          &lt;span style=&#34;color:#666&#34;&gt;37&lt;/span&gt; |        &lt;span style=&#34;color:#666&#34;&gt;97790&lt;/span&gt;.04 | BMW        | &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; Series       | Bristol       | Price Group              | &lt;span style=&#34;color:#666&#34;&gt;21611&lt;/span&gt; Morning Trail
        &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;644&lt;/span&gt; |        &lt;span style=&#34;color:#666&#34;&gt;76240&lt;/span&gt;.84 | Mazda      | MPV            | Leeds         | Kihn and Sons            | &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; Susan Street
        &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;973&lt;/span&gt; |       &lt;span style=&#34;color:#666&#34;&gt;216233&lt;/span&gt;.98 | Hyundai    | Elantra        | Sheffield     | Feeney, Howe and Koss    | &lt;span style=&#34;color:#666&#34;&gt;07671&lt;/span&gt; Hazelcrest Terrace
        &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;463&lt;/span&gt; |        &lt;span style=&#34;color:#666&#34;&gt;162589&lt;/span&gt;.1 | Chrysler   | Grand Voyager  | York          | Fay, Murazik and Schumm  | &lt;span style=&#34;color:#666&#34;&gt;42080&lt;/span&gt; Pawling Circle
       &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;863&lt;/span&gt; |       &lt;span style=&#34;color:#666&#34;&gt;111208&lt;/span&gt;.24 | Ford       | Laser          | Leeds         | Boehm, Mohr and Doyle    | &lt;span style=&#34;color:#666&#34;&gt;0919&lt;/span&gt; International Trail
&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; rows&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To learn more about writing data from Kafka to a database see &lt;a href=&#34;https://rmoff.dev/kafka-jdbc-video&#34;&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/b-3qN_tlYR4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For more tutorials on Kafka Connect see &lt;a href=&#34;https://www.youtube.com/playlist?list=PL5T99fPsK7ppB_AbZhBhTyKHtHWZLWIJ8&#34;&gt;🎥 this playlist&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_try_it_out&#34;&gt;Try it out!&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All &lt;a href=&#34;https://github.com/confluentinc/demo-scene/tree/master/csv-to-kafka&#34;&gt;the code for this article is on GitHub&lt;/a&gt;, and you just need Docker and Docker Compose to spin it up and give it a try. The commandline examples quoted below are based on the Docker environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To spin it up, clone the repository, change to the correct folder, and launch the stack:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone https://github.com/confluentinc/demo-scene.git
&lt;span style=&#34;color:#008000&#34;&gt;cd&lt;/span&gt; csv-to-kafka
docker-compose up -d&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Wait for Kafka Connect to launch and then off you go!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;bash -c &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;echo -e &amp;#34;\n\n=============\nWaiting for Kafka Connect to start listening on localhost ⏳\n=============\n&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;while [ $(curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors) -ne 200 ] ; do
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;  echo -e &amp;#34;\t&amp;#34; $(date) &amp;#34; Kafka Connect listener HTTP state: &amp;#34; $(curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors) &amp;#34; (waiting for 200)&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;  sleep 5
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;done
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;echo -e $(date) &amp;#34;\n\n--------------\n\o/ Kafka Connect is ready! Listener HTTP state: &amp;#34; $(curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors) &amp;#34;\n--------------\n&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The examples in this article are based on the &lt;code&gt;data&lt;/code&gt; folder mapped to &lt;code&gt;/data&lt;/code&gt; on the Kafka Connect worker.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_video_tutorial&#34;&gt;Video Tutorial&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/N1pseW9waNI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>How to list and create Kafka topics using the REST Proxy API</title>
      <link>https://rmoff.net/2020/06/05/how-to-list-and-create-kafka-topics-using-the-rest-proxy-api/</link>
      <pubDate>2020-06-05</pubDate>
      
      <guid>https://rmoff.net/2020/06/05/how-to-list-and-create-kafka-topics-using-the-rest-proxy-api/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_4737.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In v5.5 of Confluent Platform the REST Proxy added new Admin API capabilities, including functionality to list, and create, topics on your cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check out the &lt;a href=&#34;https://docs.confluent.io/current/kafka-rest/api.html#crest-api-v3&#34;&gt;docs here&lt;/a&gt; and &lt;a href=&#34;https://www.confluent.io/download/#confluent-platform&#34;&gt;download Confluent Platform&lt;/a&gt; here. The REST proxy is &lt;a href=&#34;https://www.confluent.io/confluent-community-license-faq/&#34;&gt;Confluent Community Licenced&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To start with, you need the cluster ID:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;&#34;&gt;➜&lt;/span&gt; curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X GET &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;localhost:8082/v3/clusters&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.data[0].attributes.cluster_id&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rgfnzs2RS3O65A7VSpNatg&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can get this along with the direct URL for the topics endpoint like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;&#34;&gt;➜&lt;/span&gt; curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X GET &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;localhost:8082/v3/clusters&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.data[0].relationships.topics.links.related&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;http://localhost:8082/v3/clusters/rgfnzs2RS3O65A7VSpNatg/topics&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Using that topics endpoint URL you can list topics:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;&#34;&gt;➜&lt;/span&gt; curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X GET &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;http://localhost:8082/v3/clusters/rgfnzs2RS3O65A7VSpNatg/topics&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.data[].attributes.topic_name&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;__confluent.support.metrics&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;_confluent-ksql-confluent_rmoff_01_command_topic&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;_kafka-connect-01-configs&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;_kafka-connect-01-offsets&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;_kafka-connect-01-status&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;_schemas&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;confluent_rmoff_01ksql_processing_log&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And you can create topics too:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;&#34;&gt;➜&lt;/span&gt; curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X POST &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;http://localhost:8082/v3/clusters/rgfnzs2RS3O65A7VSpNatg/topics&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;header &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Content-Type: application/vnd.api+json&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;data&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;raw &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;  &amp;#34;data&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;attributes&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;      &amp;#34;topic_name&amp;#34;: &amp;#34;rmoff_topic03&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;      &amp;#34;partitions_count&amp;#34;: 12,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;      &amp;#34;replication_factor&amp;#34;: 1
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    }
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;  }
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Working with JSON nested arrays in ksqlDB - example</title>
      <link>https://rmoff.net/2020/05/26/working-with-json-nested-arrays-in-ksqldb-example/</link>
      <pubDate>2020-05-26</pubDate>
      
      <guid>https://rmoff.net/2020/05/26/working-with-json-nested-arrays-in-ksqldb-example/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/img/default-header-img.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Question from the Confluent Community Slack group:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How can I access the data in object in an array like below using ksqlDB stream&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&#34;Total&#34;: [
        {
          &#34;TotalType&#34;: &#34;Standard&#34;,
          &#34;TotalAmount&#34;: 15.99
        },
{
          &#34;TotalType&#34;: &#34;Old Standard&#34;,
          &#34;TotalAmount&#34;: 16,
&#34; STID&#34;:56
        }
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s take a look at this using using ksqlDB 0.9 (latest version as of May 2020). First, spin up a ksqlDB environment using &lt;a href=&#34;https://github.com/confluentinc/demo-scene/tree/master/introduction-to-ksqldb&#34;&gt;this Docker Compose&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Send the sample message to a Kafka topic, first wrapping it in curly braces to make it valid JSON&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker &lt;span style=&#34;color:#008000&#34;&gt;exec&lt;/span&gt; -i kafkacat kafkacat &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;        -b kafka:29092 -P &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;        -t my_topic &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;{ &amp;#34;Total&amp;#34;: [ { &amp;#34;TotalType&amp;#34;: &amp;#34;Standard&amp;#34;, &amp;#34;TotalAmount&amp;#34;: 15.99 }, { &amp;#34;TotalType&amp;#34;: &amp;#34;Old Standard&amp;#34;, &amp;#34;TotalAmount&amp;#34;: 16, &amp;#34;STID&amp;#34;: 56 } ] }
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Fire up ksqlDB CLI&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;&#34;&gt;$&lt;/span&gt; ksql htp:&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt;ksqldb:&lt;span style=&#34;color:#666&#34;&gt;8088&lt;/span&gt;

                  &lt;span style=&#34;color:#666&#34;&gt;===========================================&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;       _              _ ____  ____       &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; _____  __ _&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;  _ &lt;span style=&#34;&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; __ )      &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|/&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; __&lt;span style=&#34;color:#666&#34;&gt;|/&lt;/span&gt; _&lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;  _ &lt;span style=&#34;&#34;&gt;\&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;\&lt;/span&gt;__ &lt;span style=&#34;&#34;&gt;\&lt;/span&gt; (_&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;_&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;_) &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;     &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;_&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;&#34;&gt;\&lt;/span&gt;_&lt;span style=&#34;&#34;&gt;\&lt;/span&gt;___&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;&#34;&gt;\&lt;/span&gt;__, &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;_&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;____&lt;span style=&#34;color:#666&#34;&gt;/|&lt;/span&gt;____&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;      &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;                   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;_&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;                   &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;  Event Streaming &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Database&lt;/span&gt; purpose&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;built &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; stream processing apps       &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;
                  &lt;span style=&#34;color:#666&#34;&gt;===========================================&lt;/span&gt;

Copyright &lt;span style=&#34;color:#666&#34;&gt;2017&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt; Confluent Inc.

CLI v0.&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, Server v0.&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; located &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;at&lt;/span&gt; http:&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt;ksqldb:&lt;span style=&#34;color:#666&#34;&gt;8088&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Having&lt;/span&gt; trouble&lt;span style=&#34;color:#666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Type&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;help&amp;#39;&lt;/span&gt; (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;insensitive&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; a rundown &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;of&lt;/span&gt; how things &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;work&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;

ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Set the offset to the earliest so that we&amp;#8217;re querying all the data in the topic&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;auto.offset.reset&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;earliest&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;
Successfully changed &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;local&lt;/span&gt; property &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;auto.offset.reset&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;earliest&amp;#39;&lt;/span&gt;. Use the UNSET command &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;to&lt;/span&gt; revert your change.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Model the input data as a ksqlDB stream:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM my_stream (TOTAL &lt;span style=&#34;color:#008000&#34;&gt;ARRAY&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;STRUCT&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;TotalType   &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;, 
                                                  TotalAmount &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;, 
                                                  STID        &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;) 
                         &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;my_topic&amp;#39;&lt;/span&gt;, 
                               VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;JSON&amp;#39;&lt;/span&gt;);

 Message
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; Stream created
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Play with the data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Select specific array entry&lt;/p&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
ksqlDB arrays are 1-based
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TOTAL[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; my_stream EMIT CHANGES &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-------------------------------------------------------------------------------------------------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;KSQL_COL_0                                                                                                                                 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-------------------------------------------------------------------------------------------------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;&#34;&gt;{&lt;/span&gt;TOTALTYPE&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;Standard, TOTALAMOUNT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;99&lt;/span&gt;, STID&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;                                                                                         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select nested array element&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; TOTAL[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;TotalType, TOTAL[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;totalamount &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; my_stream EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------------------------------------------------------+--------------------------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;TOTALTYPE                                                           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;TOTALAMOUNT                                                         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;--------------------------------------------------------------------+--------------------------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Standard                                                            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;99&lt;/span&gt;                                                               &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explode the array&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; EXPLODE(TOTAL) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; my_stream EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-------------------------------------------------------------------------------------------------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;KSQL_COL_0                                                                                                                                 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-------------------------------------------------------------------------------------------------------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;&#34;&gt;{&lt;/span&gt;TOTALTYPE&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;Standard, TOTALAMOUNT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;99&lt;/span&gt;, STID&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;                                                                                         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;&#34;&gt;{&lt;/span&gt;TOTALTYPE&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Old&lt;/span&gt; Standard, TOTALAMOUNT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;, STID&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;                                                                                          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explode, un-nest, and change the field names of the resulting fields&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; EXPLODE(TOTAL)&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;TOTALTYPE &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; TOTAL_TYPE, 
             EXPLODE(TOTAL)&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;TOTALAMOUNT &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; TOTALAMOUNT, 
             EXPLODE(TOTAL)&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;STID &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; STID 
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; my_stream EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------------------------------+---------------------------------------------+---------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;TOTAL_TYPE                                   &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;TOTALAMOUNT                                  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;STID                                         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------------------------------------+---------------------------------------------+---------------------------------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Standard                                     &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;99&lt;/span&gt;                                        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;                                         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Old&lt;/span&gt; Standard                                 &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;                                           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;56&lt;/span&gt;                                           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Persist this to a new stream (backed by a Kafka topic):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM new_stream &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt;
         &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; EXPLODE(TOTAL)&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;TOTALTYPE &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; TOTAL_TYPE, 
                EXPLODE(TOTAL)&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;TOTALAMOUNT &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; TOTALAMOUNT, 
                EXPLODE(TOTAL)&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;STID &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; STID 
            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; my_stream EMIT CHANGES;
 Message
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; Created query &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;with&lt;/span&gt; ID CSAS_NEW_STREAM_0
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SHOW&lt;/span&gt; TOPICS;

 Kafka Topic &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; Partitions &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; Partition Replicas
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; NEW_STREAM  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
 my_topic    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; PRINT NEW_STREAM &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; BEGINNING;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Key&lt;/span&gt; format: &lt;span style=&#34;&#34;&gt;¯\&lt;/span&gt;_(&lt;span style=&#34;&#34;&gt;ツ&lt;/span&gt;)_&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;&#34;&gt;¯&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;no&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;data&lt;/span&gt; processed
Value format: JSON &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;or&lt;/span&gt; KAFKA_STRING
rowtime: &lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;05&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;08&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;58&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;691&lt;/span&gt; Z, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;, value: &lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;TOTAL_TYPE&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Standard&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;TOTALAMOUNT&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;15.99&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;STID&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;
rowtime: &lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;05&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;08&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;58&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;35&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;691&lt;/span&gt; Z, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;, value: &lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;TOTAL_TYPE&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Old Standard&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;TOTALAMOUNT&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;16&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;STID&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;56&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Viewing Kafka messages bytes as hex</title>
      <link>https://rmoff.net/2020/05/22/viewing-kafka-messages-bytes-as-hex/</link>
      <pubDate>2020-05-22</pubDate>
      
      <guid>https://rmoff.net/2020/05/22/viewing-kafka-messages-bytes-as-hex/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/05/IMG_4466.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;ve been playing around with the new SerDes (serialisers/deserialisers) that shipped with Confluent Platform 5.5 - &lt;a href=&#34;https://docs.confluent.io/current/schema-registry/serdes-develop/index.html&#34;&gt;Protobuf, and JSON Schema&lt;/a&gt; (these were added to the existing support for Avro). The serialisers (and associated &lt;a href=&#34;https://docs.confluent.io/current/schema-registry/connect.html&#34;&gt;Kafka Connect converters&lt;/a&gt;) take a payload and serialise it into bytes for sending to Kafka, and I was interested in what those bytes look like. For that I used my favourite Kafka swiss-army knife: kafkacat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s a message serialised to JSON Schema:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kafkacat -b kafka:29092 -t pageviews-js -C -c1

&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;viewtime&amp;#34;&lt;/span&gt;:1,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;userid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;User_9&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pageid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Page_57&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Looks just like a message from another topic serialised as regular JSON, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kafkacat -b kafka:29092 -t pageviews-j -C -c1

&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;viewtime&amp;#34;&lt;/span&gt;:1,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;userid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;User_3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pageid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Page_77&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Except it&amp;#8217;s not! We can confirm this by looking at the raw bytes on the message itself by piping the output from kafkacat into hexdump.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check out these magical, pesky, bytes on the front of the JSON Schema-encoded message, and note that they&amp;#8217;re not there on the JSON message:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kafkacat -b kafka:29092 -t pageviews-js -C -c1 | hexdump -C

&lt;span style=&#34;color:#666&#34;&gt;00000000&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt; 7b &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;76&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; 6d &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;  |.....&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;viewtime&amp;#34;&lt;/span&gt;|
&lt;span style=&#34;color:#666&#34;&gt;00000010&lt;/span&gt;  3a &lt;span style=&#34;color:#666&#34;&gt;31&lt;/span&gt; 2c &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;75&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;72&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; 3a &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt;  |:1,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;userid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Use|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;00000020  72 5f 39 22 2c 22 70 61  67 65 69 64 22 3a 22 50  |r_9&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pageid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;P|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;00000030  61 67 65 5f 35 37 22 7d  0a                       |age_57&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;.|
&lt;span style=&#34;color:#666&#34;&gt;00000039&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kafkacat -b kafka:29092 -t pageviews-j -C -c1 | hexdump -C

&lt;span style=&#34;color:#666&#34;&gt;00000000&lt;/span&gt;  7b &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt;  6d &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; 3a &lt;span style=&#34;color:#666&#34;&gt;31&lt;/span&gt; 2c &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;75&lt;/span&gt;  |&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;viewtime&amp;#34;&lt;/span&gt;:1,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;u|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;00000010  73 65 72 69 64 22 3a 22  55 73 65 72 5f 33 22 2c  |serid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;User_3&amp;#34;&lt;/span&gt;,|
&lt;span style=&#34;color:#666&#34;&gt;00000020&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;  3a &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; 5f &lt;span style=&#34;color:#666&#34;&gt;37&lt;/span&gt;  |&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pageid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Page_7|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;00000030  37 22 7d 0a                                       |7&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;.|
&lt;span style=&#34;color:#666&#34;&gt;00000034&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The five extra bytes (&lt;code&gt;00 00 00 00 02&lt;/code&gt;) are defined in the &lt;a href=&#34;https://docs.confluent.io/current/schema-registry/serdes-develop/index.html#wire-format&#34;&gt;wire format&lt;/a&gt; used by the Schema Registry serdes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Byte 0&lt;/strong&gt;: Magic Byte - Confluent serialization format version number; currently always 0.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bytes 1-4&lt;/strong&gt;: 4-byte schema ID as returned by Schema Registry.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Searching Alfred&#39;s Clipboard history programatically</title>
      <link>https://rmoff.net/2020/05/18/searching-alfreds-clipboard-history-programatically/</link>
      <pubDate>2020-05-18</pubDate>
      
      <guid>https://rmoff.net/2020/05/18/searching-alfreds-clipboard-history-programatically/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/05/IMG_4456.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.alfredapp.com/&#34;&gt;Alfred&lt;/a&gt; is one of my favourite productivity apps for the Mac. It&amp;#8217;s a file indexer, a clipboard manager, a snippet expander - and that&amp;#8217;s just scratching the surface really. I recently got a new machine without it installed and realised &lt;em&gt;just how much&lt;/em&gt; I rely on Alfred, particularly its clipboard manager.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With the clipboard manager Alfred keeps a history of the text (and images, cool huh!) that I put on my clipboard, and I can recall any of them using a simple shortcut&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/alfred01.png&#34; alt=&#34;alfred01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The clipboard itself is stored in a file by Alfred, and is just a SQLite database. Since it&amp;#8217;s that, you can query it using SQL!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To find your clipboard history file go to Alfred&amp;#8217;s preferences pane and Advanced. Click the &lt;code&gt;Reveal in Finder&lt;/code&gt; in the bottom right of the window, and in the resulting folder there should be a &lt;code&gt;Databases&lt;/code&gt; sub-folder and within that a &lt;code&gt;clipboard.alfdb&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
This is not intended as a user-servicable file! Don&amp;#8217;t blame me if opening it in SQLite knackers it, and definitely don&amp;#8217;t try running `UPDATE`s against it…
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With the file located, you can query it by opening it up with SQLite:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sqlite3 clipboard.alfdb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s the clipboard history table&amp;#8217;s schema:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;schema&lt;/span&gt; clipboard

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; clipboard(item, ts &lt;span style=&#34;color:#008000&#34;&gt;decimal&lt;/span&gt;, app, apppath, dataType &lt;span style=&#34;color:#008000&#34;&gt;integer&lt;/span&gt;, dataHash);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INDEX&lt;/span&gt; clipboard_items &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; clipboard (item);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INDEX&lt;/span&gt; clipboard_ts &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; clipboard (ts);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INDEX&lt;/span&gt; clipboard_app &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; clipboard (app);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INDEX&lt;/span&gt; clipboard_datatype &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; clipboard (dataType);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;INDEX&lt;/span&gt; clipboard_datahash &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ON&lt;/span&gt; clipboard (dataHash);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can query individual rows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;sqlite&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; .header &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;on&lt;/span&gt;
sqlite&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; .&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;mode&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;column&lt;/span&gt;
sqlite&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; clipboard &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;

item                                                                                 ts          app            apppath                          dataType    dataHash
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-----------------------------------------------------------------------------------  ----------  -------------  -------------------------------  ----------  ----------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;https:&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;get&lt;/span&gt;.slack.help&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;hc&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;en&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;us&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;articles&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;202288908&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;Format&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;your&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;messages&lt;span style=&#34;color:#666&#34;&gt;#&lt;/span&gt;code&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;blocks  &lt;span style=&#34;color:#666&#34;&gt;610489734&lt;/span&gt;   Google Chrome  &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;Applications&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;Google Chrome.app  &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and you can run aggregations on it, here showing which application I most frequently copy content from:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;sqlite&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;select&lt;/span&gt; app,&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;from&lt;/span&gt; clipboard &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;group&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;by&lt;/span&gt; app &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;order&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;by&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;desc&lt;/span&gt;;
app            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-------------  ----------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;Brave Browser  &lt;span style=&#34;color:#666&#34;&gt;4080&lt;/span&gt;
Visual Studio  &lt;span style=&#34;color:#666&#34;&gt;2996&lt;/span&gt;
iTerm          &lt;span style=&#34;color:#666&#34;&gt;1473&lt;/span&gt;
Emacs          &lt;span style=&#34;color:#666&#34;&gt;152&lt;/span&gt;
Telegram       &lt;span style=&#34;color:#666&#34;&gt;105&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;or even how many times I&amp;#8217;ve copied a link from my blog to send to someone :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;sqlite&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; clipboard &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; item &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;LIKE&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;%rmoff.net%&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;99&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
This is not intended as a user-servicable file! Don&amp;#8217;t blame me if opening it in SQLite knackers it, and definitely don&amp;#8217;t try running `UPDATE`s against it…
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building a Telegram bot with Apache Kafka and ksqlDB</title>
      <link>https://rmoff.net/2020/05/18/building-a-telegram-bot-with-apache-kafka-and-ksqldb/</link>
      <pubDate>2020-05-18</pubDate>
      
      <guid>https://rmoff.net/2020/05/18/building-a-telegram-bot-with-apache-kafka-and-ksqldb/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/05/IMG_4312.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Imagine you’ve got a stream of data; it’s not “big data,” but it’s certainly a lot. Within the data, you’ve got some bits you’re interested in, and of those bits, you’d like to be able to query information about them at any point. Sounds fun, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/telegram_arch02.png&#34; alt=&#34;Architecture high-level view&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What if you didn’t need any datastore other than Apache Kafka itself to be able to do this? What if you could ingest, filter, enrich, aggregate, and query data with just Kafka? With ksqlDB we can do just this, and I want to show you exactly how, using a Telegram bot as the application looking up state from the inbound stream of events:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/telegram_bot5.gif&#34; alt=&#34;Animation of Telegram bot looking up statistics about Twitter users&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To find out more you can: -&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;📜 Read &lt;a href=&#34;https://cnfl.io/telegram-bot-powered-by-kafka-and-ksqldb&#34;&gt;this full-length article&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🎥 Watch &lt;a href=&#34;https://rmoff.dev/telegram-bot-video&#34;&gt;this tutorial&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;a class=&#34;image&#34; href=&#34;https://rmoff.dev/telegram-bot-video&#34;&gt;&lt;img src=&#34;https://rmoff.net/images/2020/05/ksqldb-telegram-bot_screencap.jpg&#34; alt=&#34;ksqldb telegram bot screencap&#34;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;👾 Try the &lt;a href=&#34;https://github.com/confluentinc/demo-scene/tree/master/ksqldb-twitter/telegram_ksqldb_bots&#34;&gt;code&lt;/a&gt; yourself&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Add Markers list from Screenflow to Youtube Table of Contents</title>
      <link>https://rmoff.net/2020/05/04/add-markers-list-from-screenflow-to-youtube-table-of-contents/</link>
      <pubDate>2020-05-04</pubDate>
      
      <guid>https://rmoff.net/2020/05/04/add-markers-list-from-screenflow-to-youtube-table-of-contents/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/05/IMG_4138.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Screenflow has a useful Markers feature for adding notes to the timeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/subler01.png&#34; alt=&#34;subler01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can use these to helpfully add a table of contents to your Youtube video, but unfortunately Screenflow doesn&amp;#8217;t have the option to export them directly. Instead, use the free &lt;a href=&#34;https://bitbucket.org/galad87/subler/wiki/Home&#34;&gt;Subler&lt;/a&gt; program as an intermediary (download it from &lt;a href=&#34;https://bitbucket.org/galad87/subler/downloads/&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Export from Screenflow with a chapters track&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/subler02.png&#34; alt=&#34;subler02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the file in Subler and export to text file&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/subler03.png&#34; alt=&#34;subler03&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;From there, tidy up the text file from the source&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#19177c&#34;&gt;CHAPTER03&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:07:17.565
&lt;span style=&#34;color:#19177c&#34;&gt;CHAPTER03NAME&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;Updating documents in Elasticsearch
&lt;span style=&#34;color:#19177c&#34;&gt;CHAPTER05&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:11:38.664
&lt;span style=&#34;color:#19177c&#34;&gt;CHAPTER05NAME&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;Deleting documents in Elasticsearch with the sink connector
&lt;span style=&#34;color:#19177c&#34;&gt;CHAPTER07&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:16:14.897
&lt;span style=&#34;color:#19177c&#34;&gt;CHAPTER07NAME&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;Schemas and Elasticsearch Document Mappings
&lt;span style=&#34;color:#19177c&#34;&gt;CHAPTER08&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:25:57.397&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;into a time / label list for Youtube:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can do this manually, or with a bit of RegEx in something like VSCode&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/vscode01.png&#34; alt=&#34;vscode01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;^CHAPTER\d*=(.*)\.\d\d\d$\n.*=(.*)$&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$1&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:07:17 Updating documents in Elasticsearch
&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:11:38 Deleting documents in Elasticsearch with the sink connector
&lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt;:16:14 Schemas and Elasticsearch Document Mappings&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now paste this list of times into your Youtube video description&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/youtube01.png&#34; alt=&#34;youtube01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When someone views your video they can then click on these times directly&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/05/youtube02.png&#34; alt=&#34;youtube02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Oh…and don&amp;#8217;t forget to subscribe to &lt;a href=&#34;https://rmoff.dev/youtube&#34;&gt;my Youtube channel&lt;/a&gt; :)&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Using Confluent Cloud when there is no Cloud (or internet)</title>
      <link>https://rmoff.net/2020/04/20/using-confluent-cloud-when-there-is-no-cloud-or-internet/</link>
      <pubDate>2020-04-20</pubDate>
      
      <guid>https://rmoff.net/2020/04/20/using-confluent-cloud-when-there-is-no-cloud-or-internet/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/04/IMG_3917.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://confluent.cloud/signup&#34;&gt;☁️Confluent Cloud&lt;/a&gt; is a great solution for a hosted and managed Apache Kafka service, with the additional benefits of Confluent Platform such as ksqlDB and managed Kafka Connect connectors. But as a developer, you won&amp;#8217;t always have a reliable internet connection. Train, planes, and automobiles—not to mention crappy hotel or conference Wi-Fi. Wouldn&amp;#8217;t it be useful if you could have a replica of your Cloud data on your local machine? That just pulled down new data automagically, without needing to be restarted each time you got back on the network?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let me show you here how you can go about doing this, to replicate one (or more) topics from Confluent Cloud onto your local machine. It&amp;#8217;s also a really useful thing if you want to develop something locally without perhaps being ready to deploy it against your cloud environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_how&#34;&gt;How?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Confluent Replicator is a Kafka Connect plugin, acting as a consumer from one Kafka cluster (Confluent Cloud) and producer to another (your local Kafka cluster). I use Docker Compose to run Kafka locally, almost exclusively. It&amp;#8217;s a piece of cake to provision, spin up - and tear down new environments, in isolation from others.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_setup&#34;&gt;Setup&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Create a &lt;code&gt;.env&lt;/code&gt; file with your Confluent Cloud broker details and credentials in it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_BROKER_HOST&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;foo.bar.bork.bork.bork.us-central1.gcp.confluent.cloud:9092
&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_API_KEY&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;yyy
&lt;span style=&#34;color:#19177c&#34;&gt;CCLOUD_API_SECRET&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;xxx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use these environment variables in your local shell (we&amp;#8217;ll use them with Docker later, hence writing them to a file for re-use)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;source&lt;/span&gt; .env&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_create_some_test_data_on_confluent_cloud&#34;&gt;Create some test data on Confluent Cloud&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Chuck some dummy data into a Confluent Cloud topic:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;date&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt; | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    kafkacat -b &lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_BROKER_HOST&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -X security.protocol&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;SASL_SSL -X sasl.mechanisms&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;PLAIN &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -X sasl.username&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_API_KEY&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; -X sasl.password&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_API_SECRET&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -X api.version.request&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -t test_topic -P&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Verify that it&amp;#8217;s there:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ kafkacat -b &lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_BROKER_HOST&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;              -X security.protocol&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;SASL_SSL -X sasl.mechanisms&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;PLAIN &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;              -X sasl.username&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_API_KEY&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; -X sasl.password&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$CCLOUD_API_SECRET&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;              -X api.version.request&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;              -t test_topic -C -e
Fri &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt; Apr &lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt;:03:17 BST&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_create_local_kafka_cluster&#34;&gt;Create local Kafka cluster&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now spin up yourself a local Kafka cluster using &lt;a href=&#34;https://github.com/confluentinc/demo-scene/blob/master/ccloud-replicator/docker-compose.yml&#34;&gt;this Docker Compose&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ docker-compose up -d
➜ docker-compose ps
   Name               Command            State                      Ports
---------------------------------------------------------------------------------------------
kafka-1      /etc/confluent/docker/run   Up      &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:9092-&amp;gt;9092/tcp
kafka-2      /etc/confluent/docker/run   Up      &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:19092-&amp;gt;19092/tcp, &lt;span style=&#34;color:#666&#34;&gt;9092&lt;/span&gt;/tcp
kafka-3      /etc/confluent/docker/run   Up      &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:29092-&amp;gt;29092/tcp, &lt;span style=&#34;color:#666&#34;&gt;9092&lt;/span&gt;/tcp
replicator   /etc/confluent/docker/run   Up      &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;.0.0.0:58083-&amp;gt;58083/tcp, &lt;span style=&#34;color:#666&#34;&gt;8083&lt;/span&gt;/tcp, &lt;span style=&#34;color:#666&#34;&gt;9092&lt;/span&gt;/tcp
zookeeper    /etc/confluent/docker/run   Up      &lt;span style=&#34;color:#666&#34;&gt;2181&lt;/span&gt;/tcp, &lt;span style=&#34;color:#666&#34;&gt;2888&lt;/span&gt;/tcp, &lt;span style=&#34;color:#666&#34;&gt;3888&lt;/span&gt;/tcp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_set_up_replicator&#34;&gt;Set up Replicator&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First, we&amp;#8217;ll check that the Replicator container has started and is ready. Replicator runs as a plugin to Kafka Connect, so we use its API for interacting with Replicator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
I&amp;#8217;m running a Kafka Connect worker that&amp;#8217;s listening on &lt;code&gt;58083&lt;/code&gt; - modify the code examples below if you&amp;#8217;re using a different one (e.g. the default 8083).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Waiting for Kafka Connect to start listening on localhost:58083 ⏳&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;while&lt;/span&gt; : ; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#19177c&#34;&gt;curl_status&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;curl -s -o /dev/null -w %&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;http_code&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt; http://localhost:58083/connectors&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; -e &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;date&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34; Kafka Connect listener HTTP state: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$curl_status&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34; (waiting for 200)&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$curl_status&lt;/span&gt; -eq &lt;span style=&#34;color:#666&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;then&lt;/span&gt;
    &lt;span style=&#34;color:#008000&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;fi&lt;/span&gt;
    sleep &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Should show:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Mon &lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt; Apr &lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;:32:37 BST  Kafka Connect listener HTTP state:  &lt;span style=&#34;color:#666&#34;&gt;200&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;waiting &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;200&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can also verify that the Replicator plugin has been loaded correctly:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -s localhost:58083/connector-plugins|jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.[].class&amp;#39;&lt;/span&gt;|grep -q io.confluent.connect.replicator.ReplicatorSourceConnector
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;$?&lt;/span&gt; -eq &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;then&lt;/span&gt; 
   &lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Replicator plugin is correctly loaded ✅&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt;
   &lt;span style=&#34;color:#008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;😢 Replicator plugin is not loaded. Please check the Kafka Connect worker logs and installation steps&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Should show:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Replicator plugin is correctly loaded ✅&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now send the config to the Kafka Connect worker&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;&#34;&gt;.env&lt;/span&gt;

&lt;span style=&#34;&#34;&gt;epoch=$(date&lt;/span&gt; &lt;span style=&#34;&#34;&gt;+%s)&lt;/span&gt;

&lt;span style=&#34;&#34;&gt;curl&lt;/span&gt; &lt;span style=&#34;&#34;&gt;-s&lt;/span&gt; &lt;span style=&#34;&#34;&gt;-X&lt;/span&gt; &lt;span style=&#34;&#34;&gt;PUT&lt;/span&gt; &lt;span style=&#34;&#34;&gt;-H&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Accept:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;&#34;&gt;-H&lt;/span&gt;  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;http://localhost:58083/connectors/replicator-source&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;$epoch&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/config&amp;#34;&lt;/span&gt; &lt;span style=&#34;&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;&#34;&gt;-d&lt;/span&gt; &lt;span style=&#34;&#34;&gt;&amp;#39;&lt;/span&gt;
        {
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;connector.class&amp;#34;&lt;/span&gt;             : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.connect.replicator.ReplicatorSourceConnector&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;key.converter&amp;#34;&lt;/span&gt;               : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.connect.replicator.util.ByteArrayConverter&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;value.converter&amp;#34;&lt;/span&gt;             : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.connect.replicator.util.ByteArrayConverter&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;header.converter&amp;#34;&lt;/span&gt;            : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io.confluent.connect.replicator.util.ByteArrayConverter&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;src.kafka.bootstrap.servers&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#39;$CCLOUD_BROKER_HOST&amp;#39;:9092&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;src.kafka.security.protocol&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;SASL_SSL&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;src.kafka.sasl.mechanism&amp;#34;&lt;/span&gt;    : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;PLAIN&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;src.kafka.sasl.jaas.config&amp;#34;&lt;/span&gt;  : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;org.apache.kafka.common.security.plain.PlainLoginModule required username=\&amp;#34;&amp;#39;$CCLOUD_API_KEY&amp;#39;\&amp;#34; password=\&amp;#34;&amp;#39;$CCLOUD_API_SECRET&amp;#39;\&amp;#34;;&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;src.consumer.group.id&amp;#34;&lt;/span&gt;       : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;replicator-&amp;#39;$epoch&amp;#39;&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;dest.kafka.bootstrap.servers&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;kafka-1:39092,kafka-2:49092,kafka-3:59092&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;topic.whitelist&amp;#34;&lt;/span&gt;             : &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;test_topic&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;topic.rename.format&amp;#34;&lt;/span&gt;         :&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;${topic}&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;confluent.license&amp;#34;&lt;/span&gt;           :&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;confluent.topic.bootstrap.servers&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;kafka-1:39092,kafka-2:49092,kafka-3:59092&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;confluent.topic.replication.factor&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;#34;offset.start&amp;#34;&lt;/span&gt;                :&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;consumer&amp;#34;&lt;/span&gt;
        }&lt;span style=&#34;&#34;&gt;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check that it&amp;#8217;s running:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ curl -s &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;http://localhost:58083/connectors?expand=info&amp;amp;expand=status&amp;#34;&lt;/span&gt; | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;       jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;. | to_entries[] | [ .value.info.type, .key, .value.status.connector.state,.value.status.tasks[].state,.value.info.config.&amp;#34;connector.class&amp;#34;]|join(&amp;#34;:|:&amp;#34;)&amp;#39;&lt;/span&gt; | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;       column -s : -t| sed &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;s/\&amp;#34;//g&amp;#39;&lt;/span&gt;| sort
&lt;span style=&#34;color:#008000&#34;&gt;source&lt;/span&gt;  |  replicator-source1587382706  |  RUNNING  |  RUNNING  |  io.confluent.connect.replicator.ReplicatorSourceConnector&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check that we&amp;#8217;ve got data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ kafkacat -b localhost:29092 -t test_topic -C -e
Fri &lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt; Apr &lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt;:03:17 BST&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So now when data gets sent to Confluent Cloud, we get it also pushed to our local Kafka cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;script id=&#34;asciicast-fKlgOPK2gsIW42MIEg7y9FpXz&#34; src=&#34;https://asciinema.org/a/fKlgOPK2gsIW42MIEg7y9FpXz.js&#34; async&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_restarting_and_dealing_with_network_glitches&#34;&gt;Restarting and dealing with network glitches&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The cool thing about Kafka, and Kafka Connect, is that it keeps track of where a particular consumer has read up to in a topic. Replicator therefore will read from a topic whilst it&amp;#8217;s running, and if you stop and restart it, it&amp;#8217;ll just catch up from where it got to before it stopped.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The same principle applies to if your local machine goes off the network, or perhaps just goes through some patchy connectivity. If it can connect to the source cluster (Confluent Cloud), it will do so. If it can&amp;#8217;t, it&amp;#8217;ll just keep trying and carry on again once it can do.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_ingesting_a_fresh_copy_of_the_data&#34;&gt;Ingesting a fresh copy of the data&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So there&amp;#8217;s restarting, and then there&amp;#8217;s &lt;strong&gt;restarting&lt;/strong&gt;. What if instead of wanting to restart the connector (we rebooted the machine, made a config change, whatever) we want to actually &lt;em&gt;start afresh&lt;/em&gt; and start a &lt;em&gt;new replication&lt;/em&gt; of the topic from Confluent Cloud?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Because of the clever way Kafka Connect uses the Kafka consumer group protocol to track offsets, if you were to delete the replicator configuration and create it afresh, it would still carry on from where it got to before! You can see the consumer group name (and consumption progress) in Confluent Cloud UI:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/04/replicator01.png&#34; alt=&#34;replicator01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For this reason you may have noticed in the config that we ran above the use of &lt;code&gt;epoch&lt;/code&gt; in the configuration name and, most importantly, &lt;a href=&#34;https://docs.confluent.io/current/connect/kafka-connect-replicator/configuration_options.html#cluster-id-and-group-id&#34;&gt;&lt;code&gt;src.consumer.group.id&lt;/code&gt;&lt;/a&gt;. This is just one way of ensuring a unique group name tied to this particular instance of the replicator. We can then choose to provision a new one if we want to start afresh, or restart an existing one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Whilst you&amp;#8217;re there in the Confluent Cloud UI you can check out the detailed view of the progress of a particular consumer group&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/04/replicator02.png&#34; alt=&#34;replicator02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_changing_the_target_topic&#34;&gt;Changing the target topic&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There&amp;#8217;s a bunch of parameters that you can set with Replicator. One particularly useful one is to modify the name of the target topic that Replicator writes to. Here&amp;#8217;s an example of routing a source topic to a target one that includes the identifier (&lt;code&gt;epoch&lt;/code&gt;) of the Replicator that wrote it&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;topic.rename.format&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;topic&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;-ccloud-&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$epoch&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The resulting topic name goes from &lt;code&gt;test_topic&lt;/code&gt; on the source (Confluent Cloud) to &lt;code&gt;test_topic-ccloud-1587388241&lt;/code&gt; on our target local cluster&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ kafkacat -b localhost:29092 -t test_topic-ccloud-1587388241 -C -q -u -o end
Here&lt;span style=&#34;&#34;&gt;&amp;#39;&lt;/span&gt;s a &lt;span style=&#34;color:#008000&#34;&gt;test&lt;/span&gt; message, sent at Mon &lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt; Apr &lt;span style=&#34;color:#666&#34;&gt;2020&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt;:14:09 BST&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_storing_credentials_safely&#34;&gt;Storing credentials safely&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the example above we passed the credentials for Confluent Cloud just as environment variables to Kafka Connect, which is not great from a security point of view. Instead we could use &lt;a href=&#34;https://rmoff.net/2019/05/24/putting-kafka-connect-passwords-in-a-separate-file-/-externalising-secrets/&#34;&gt;external secrets&lt;/a&gt;. Note that the Replicator docker container has the necessary &lt;code&gt;config.providers&lt;/code&gt; settings to enable this, and that we&amp;#8217;ve mounted out local &lt;code&gt;.env&lt;/code&gt; file into the container.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;…&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;CONNECT_CONFIG_PROVIDERS:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;CONNECT_CONFIG_PROVIDERS_FILE_CLASS:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;org.apache.kafka.common.config.provider.FileConfigProvider&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;volumes:&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;./.env:/opt/config&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now when we create the replicator we can reference the file and attributes within it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#19177c&#34;&gt;epoch&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;$(&lt;/span&gt;date +%s&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;)&lt;/span&gt;
curl -s -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Accept:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;http://localhost:58083/connectors/replicator-source&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$epoch&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/config&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        {
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connector.class&amp;#34;: &amp;#34;io.confluent.connect.replicator.ReplicatorSourceConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;key.converter&amp;#34;: &amp;#34;io.confluent.connect.replicator.util.ByteArrayConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;value.converter&amp;#34;: &amp;#34;io.confluent.connect.replicator.util.ByteArrayConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;header.converter&amp;#34;: &amp;#34;io.confluent.connect.replicator.util.ByteArrayConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;src.kafka.bootstrap.servers&amp;#34;: &amp;#34;${file:/opt/config:CCLOUD_BROKER_HOST}&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;src.kafka.security.protocol&amp;#34;: &amp;#34;SASL_SSL&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;src.kafka.sasl.mechanism&amp;#34;: &amp;#34;PLAIN&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;src.kafka.sasl.jaas.config&amp;#34;: &amp;#34;org.apache.kafka.common.security.plain.PlainLoginModule required username=\&amp;#34;${file:/opt/config:CCLOUD_API_KEY}\&amp;#34; password=\&amp;#34;${file:/opt/config:CCLOUD_API_SECRET}\&amp;#34;;&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;src.consumer.group.id&amp;#34;: &amp;#34;replicator-&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$epoch&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;dest.kafka.bootstrap.servers&amp;#34;: &amp;#34;kafka-1:39092,kafka-2:49092,kafka-3:59092&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;topic.whitelist&amp;#34;: &amp;#34;test_topic&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;topic.rename.format&amp;#34;:&amp;#34;${topic}&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;confluent.license&amp;#34;:&amp;#34;&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;confluent.topic.bootstrap.servers&amp;#34;:&amp;#34;kafka-1:39092,kafka-2:49092,kafka-3:59092&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;confluent.topic.replication.factor&amp;#34;:1,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;offset.start&amp;#34;:&amp;#34;consumer&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        }&amp;#39;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_its_not_just_for_cloud&#34;&gt;It&amp;#8217;s not just for Cloud&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can use Replicator between any two Apache Kafka clusters, and Confluent Control Center to give you the same consumer group monitoring view that I showed above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Try it out by &lt;a href=&#34;https://www.confluent.io/download/&#34;&gt;downloading Confluent Platform&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_further_reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.confluent.io/current/multi-dc-deployments/replicator/index.html&#34;&gt;Replicator documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.confluent.io/current/installation/docker/installation/replicator.html&#34;&gt;Replicator tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.confluent.io/current/connect/kafka-connect-replicator/configuration_options.html&#34;&gt;Replicator configuration options&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>How to install kafkacat on Fedora</title>
      <link>https://rmoff.net/2020/04/20/how-to-install-kafkacat-on-fedora/</link>
      <pubDate>2020-04-20</pubDate>
      
      <guid>https://rmoff.net/2020/04/20/how-to-install-kafkacat-on-fedora/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/04/IMG_3969.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/edenhill/kafkacat&#34;&gt;kafkacat&lt;/a&gt; is one of my go-to tools when working with Kafka. It&amp;#8217;s a producer and consumer, but also a swiss-army knife of debugging and troubleshooting capabilities. So when I built a new Fedora server recently, I needed to get it installed. Unfortunately there&amp;#8217;s no pre-packed install available on &lt;code&gt;yum&lt;/code&gt;, so here&amp;#8217;s how to do it manually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_pre_requisite_installs&#34;&gt;Pre-requisite installs&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We&amp;#8217;ll need some packages from the Confluent repo so set this up for &lt;code&gt;yum&lt;/code&gt; first by creating &lt;code&gt;/etc/yum.repos.d/confluent.repo&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;Confluent.dist&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;Confluent repository &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;dist&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;baseurl&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://packages.confluent.io/rpm/5.4/7
&lt;span style=&#34;color:#19177c&#34;&gt;gpgcheck&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;gpgkey&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://packages.confluent.io/rpm/5.4/archive.key
&lt;span style=&#34;color:#19177c&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;Confluent&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;Confluent repository
&lt;span style=&#34;color:#19177c&#34;&gt;baseurl&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://packages.confluent.io/rpm/5.4
&lt;span style=&#34;color:#19177c&#34;&gt;gpgcheck&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;gpgkey&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;https://packages.confluent.io/rpm/5.4/archive.key
&lt;span style=&#34;color:#19177c&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now install the dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Update yum&lt;/span&gt;
sudo yum update -y

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Install build tools&lt;/span&gt; 
sudo yum group install &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Development Tools&amp;#34;&lt;/span&gt; -y

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Install librdkafka and other deps&lt;/span&gt;
sudo yum install -y librdkafka-devel yajl-devel avro-c-devel&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_build_kafkacat&#34;&gt;Build kafkacat&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pull down the kafkacat repo:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone https://github.com/edenhill/kafkacat.git
&lt;span style=&#34;color:#008000&#34;&gt;cd&lt;/span&gt; kafkacat&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Prepare the install - make sure that this step does not result in an error!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./configure&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you get errors here, it&amp;#8217;s off to Google you go to try and figure them out, because there&amp;#8217;s no point continuing if you can&amp;#8217;t. You might find some &lt;code&gt;failed&lt;/code&gt; steps that don&amp;#8217;t result in an actual error - this is a &#34;soft fail&#34; and means that certain functionality won&amp;#8217;t be available in the kafkacat that you install (in this case, Avro/Schema Registry). Here&amp;#8217;s an example of one:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;checking &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; serdes &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;by pkg-config&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;... failed
checking &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; serdes &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;by compile&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;... failed &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;disable&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_install&#34;&gt;Install!&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;make
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check that it works:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ kafkacat -V
kafkacat - Apache Kafka producer and consumer tool
https://github.com/edenhill/kafkacat
Copyright &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;c&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2014&lt;/span&gt;-2019, Magnus Edenhill
Version &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;.5.0-5-ge98256 &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;JSON, librdkafka &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;.3.0 builtin.features&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;gzip,snappy,ssl,sasl,regex,lz4,sasl_gssapi,sasl_plain,sasl_scram,plugins,zstd,sasl_oauthbearer&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Test it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ kafkacat -b localhost:29092 -L
Metadata &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; all topics &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;from broker &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;: localhost:29092/3&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;:
 &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; brokers:
  broker &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; at localhost:19092
  broker &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; at localhost:29092 &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;controller&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  broker &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; at localhost:9092&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_this_all_seems_like_too_much_hassle&#34;&gt;This all seems like too much hassle?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Yeah, that&amp;#8217;s why Docker was invented ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you want to run kafkacat but can&amp;#8217;t get it installed, do not fear! You can run it anyway:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run --rm edenhill/kafkacat:1.5.0 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    kafkacat -V&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You just need to make sure you wrap your head around Docker networking if you do this, because &lt;code&gt;localhost&lt;/code&gt; to a Docker container is not the same (by default) as &lt;code&gt;localhost&lt;/code&gt; on your host machine:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ docker run --rm edenhill/kafkacat:1.5.0 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    kafkacat -b localhost:29092 -L
% ERROR: Failed to acquire metadata: Local: Broker transport failure&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you add &lt;code&gt;--network=host&lt;/code&gt; then it will use the network as if executing locally:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ docker run --rm --network&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;host edenhill/kafkacat:1.5.0 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    kafkacat -b localhost:29092 -L

Metadata &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; all topics &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;from broker &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;: localhost:29092/3&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;:
 &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; brokers:
  broker &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; at localhost:19092
  broker &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; at localhost:29092 &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;controller&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
  broker &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; at localhost:9092&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>