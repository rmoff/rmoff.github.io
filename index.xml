<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rmoff&#39;s random ramblings</title>
    <link>https://rmoff.net/</link>
    <description>Recent content on rmoff&#39;s random ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>2020-07-01</lastBuildDate>
    
        <atom:link href="https://rmoff.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning Golang (some rough notes) - S01E06 - Errors</title>
      <link>https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/</link>
      <pubDate>2020-07-01</pubDate>
      
      <guid>https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/methods/20&#34;&gt;A Tour of Go : Exercise: Errors&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Like Interfaces, the Tour didn&amp;#8217;t really do it for me on Errors either. Too absract, and not enough explanation of the code examples for my liking. It also doesn&amp;#8217;t cover the &lt;a href=&#34;https://golang.org/pkg/errors/&#34;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; package which other tutorial do. I&amp;#8217;m not clear if that&amp;#8217;s because the errors package isn&amp;#8217;t used much, or the Tour focusses only on teaching the raw basics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m quickly learning to head to &lt;code&gt;gobyexample.com&lt;/code&gt; each time for more reference on things that aren&amp;#8217;t making sense (along with &lt;a href=&#34;https://www.calhoun.io/&#34; class=&#34;bare&#34;&gt;https://www.calhoun.io/&lt;/a&gt; too). The &lt;a href=&#34;https://gobyexample.com/errors&#34;&gt;errors&lt;/a&gt; page on GoByExample is a good one, and I like how it links through to the Go Playground with each example. The Go Blog&amp;#8217;s &lt;a href=&#34;https://blog.golang.org/error-handling-and-go&#34;&gt;Error handling and Go&lt;/a&gt; is also a good reference, and &lt;a href=&#34;https://blog.golang.org/go1.13-errors&#34;&gt;this blog&lt;/a&gt; has some recent updates for Go 1.13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Once I&amp;#8217;d gone through the additional links the errors exercise was OK to figure out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; ErrNegativeSqrt &lt;span style=&#34;color:#b00040&#34;&gt;float64&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (e ErrNegativeSqrt) &lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cannot Sqrt negative number: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;float64&lt;/span&gt;(e))
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Sqrt&lt;/span&gt;(x &lt;span style=&#34;color:#b00040&#34;&gt;float64&lt;/span&gt;) (&lt;span style=&#34;color:#b00040&#34;&gt;float64&lt;/span&gt;, &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\n--\nSqrt called with value: %v\n&amp;#34;&lt;/span&gt;, x)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; x &amp;lt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; {
		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\t%v is less than zero. Returning with error.\n&amp;#34;&lt;/span&gt;, x)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;ErrNegativeSqrt&lt;/span&gt;(x)
	}
	guess &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1.0&lt;/span&gt;
	limit &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &amp;lt; limit; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
		adj &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; (guess&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;guess &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x) &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; guess)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; result &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; guess &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; guess; result &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; x {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\t✅Guess %d is correct:\t%g\n&amp;#34;&lt;/span&gt;, i, guess)
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; guess, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;
		} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; result &amp;gt; x {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\t🔺Guess %d is too high:\t%g\n&amp;#34;&lt;/span&gt;, i, guess)
			guess &lt;span style=&#34;color:#666&#34;&gt;-=&lt;/span&gt; adj
		} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\t🔻Guess %d is too low:\t%g\n&amp;#34;&lt;/span&gt;, i, guess)
			guess &lt;span style=&#34;color:#666&#34;&gt;-=&lt;/span&gt; adj
		}
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; guess, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;

}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; []&lt;span style=&#34;color:#b00040&#34;&gt;float64&lt;/span&gt;{&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;} {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; result, ok &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Sqrt&lt;/span&gt;(x); ok &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;-&amp;gt; result: %v\n&amp;#34;&lt;/span&gt;, result)
		} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;** ERROR %v&amp;#34;&lt;/span&gt;,ok.&lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;())
		}
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Sqrt called with value: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; is less than zero. Returning with &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;.
&lt;span style=&#34;color:#666&#34;&gt;**&lt;/span&gt; ERROR cannot Sqrt negative number: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Sqrt called with value: &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔻&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; is too low:	&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔺&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; is too high:	&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔺&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; is too high:	&lt;span style=&#34;color:#666&#34;&gt;3.4&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔺&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; is too high:	&lt;span style=&#34;color:#666&#34;&gt;3.023529411764706&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔺&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; is too high:	&lt;span style=&#34;color:#666&#34;&gt;3.00009155413138&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔺&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; is too high:	&lt;span style=&#34;color:#666&#34;&gt;3.000000001396984&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;✅&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; is correct:	&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&amp;gt; result: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Try it out: &lt;a href=&#34;https://play.golang.org/p/mLa5RqwYckb&#34; class=&#34;bare&#34;&gt;https://play.golang.org/p/mLa5RqwYckb&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This bit had me puzzled:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Note: A call to fmt.Sprint(e) inside the Error method will send the program into an infinite loop. You can avoid this by converting e first: fmt.Sprint(float64(e)). Why?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If I changed it to&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (e ErrNegativeSqrt) &lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cannot Sqrt negative number: %v&amp;#34;&lt;/span&gt;,e)
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;then running it in the Tour window failed (as expected)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Sqrt called with value: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; is less than zero. Returning with &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;.

Program exited: status &lt;span style=&#34;color:#666&#34;&gt;2.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Running it in VSCode gave another error:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;runtime: goroutine stack exceeds &lt;span style=&#34;color:#666&#34;&gt;1000000000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; limit
fatal &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;: stack overflow&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and sticking a print debug into the function shows that it&amp;#8217;s recursively called:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (e ErrNegativeSqrt) &lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ErrNegativeSqrt.Error&amp;#34;&lt;/span&gt;)
&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cannot Sqrt negative number: %v&amp;#34;&lt;/span&gt;,e)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Sqrt called with value: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; is less than zero. Returning with &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;.
ErrNegativeSqrt.Error
ErrNegativeSqrt.Error
ErrNegativeSqrt.Error
ErrNegativeSqrt.Error
ErrNegativeSqrt.Error
ErrNegativeSqrt.Error
[&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But… I don&amp;#8217;t understand why. StackOverflow turns up &lt;a href=&#34;https://stackoverflow.com/questions/27474907/why-would-a-call-to-fmt-sprinte-inside-the-error-method-result-in-an-infinit&#34;&gt;this explanation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;fmt.Sprint(e)&lt;code&gt; will call `e.Error()&lt;/code&gt; to convert the value e to a string. If the &lt;code&gt;Error()&lt;/code&gt; method calls `fmt.Sprint(e&lt;/code&gt;),` then the program recurses until out of memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can break the recursion by converting the e to a value without a String or Error method.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Thus &lt;code&gt;e&lt;/code&gt; is converted to &lt;code&gt;float64&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (e ErrNegativeSqrt) &lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cannot Sqrt negative number: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;float64&lt;/span&gt;(e))
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/27474907/why-would-a-call-to-fmt-sprinte-inside-the-error-method-result-in-an-infinit#comment86089457_27475316&#34;&gt;This comment&lt;/a&gt; offers a neat alternative too:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Isn&amp;#8217;t it enough to convert e to a type which may have a String/Error method that doesn&amp;#8217;t recurse infinitely?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And hence specifying a different &lt;a href=&#34;https://golang.org/pkg/fmt/&#34;&gt;verb&lt;/a&gt; works:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (e ErrNegativeSqrt) &lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cannot Sqrt negative number: %f&amp;#34;&lt;/span&gt;,e)
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Sqrt called with value: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; is less than zero. Returning with &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;.
&lt;span style=&#34;color:#666&#34;&gt;**&lt;/span&gt; ERROR cannot Sqrt negative number: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9.000000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E05 - Interfaces</title>
      <link>https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/</link>
      <pubDate>2020-06-30</pubDate>
      
      <guid>https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/methods/9&#34;&gt;A Tour of Go : Interfaces&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This page really threw me, for several reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The text notes that there&amp;#8217;s an error (&lt;em&gt;so why don&amp;#8217;t they fix it?&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The provided code doesn&amp;#8217;t run (presumably because of the above error)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s not clear if this is a deliberate error to illustrate a point, or just a snafu&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;Learning Go : Background&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In addition, there&amp;#8217;s no indication as to the purpose of the code, so it&amp;#8217;s really hard to follow what it&amp;#8217;s supposed to be illustrating. Is the &lt;code&gt;type&lt;/code&gt; interface declaration at the top deliberately before &lt;code&gt;main&lt;/code&gt; and all the subsequent &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;func&lt;/code&gt; declarations? What&amp;#8217;s the significance of this? Is there a significance of this?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A general confusion I&amp;#8217;ve had with many of the Tour tutorials is the use of maths functions to illustrate concepts. I mean, I probably &lt;strong&gt;should&lt;/strong&gt; know what this …&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (v &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;Vertex) &lt;span style=&#34;color:#00f&#34;&gt;Abs&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;float64&lt;/span&gt; {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; math.&lt;span style=&#34;color:#00f&#34;&gt;Sqrt&lt;/span&gt;(v.X&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;v.X &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; v.Y&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;v.Y)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;…should return, but it&amp;#8217;s an added mental overhead to grokking what&amp;#8217;s going on. Sometimes stuff has to be done with numbers but a lot of the illustrations around methods &amp;amp; functions could easily have been done with strings IMHO.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To get some kind of understanding of interfaces I found &lt;a href=&#34;https://www.calhoun.io/how-do-interfaces-work-in-go/&#34; class=&#34;bare&#34;&gt;https://www.calhoun.io/how-do-interfaces-work-in-go/&lt;/a&gt; and &lt;a href=&#34;https://gobyexample.com/interfaces&#34; class=&#34;bare&#34;&gt;https://gobyexample.com/interfaces&lt;/a&gt; very good, and the latter links to &lt;a href=&#34;https://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go&#34; class=&#34;bare&#34;&gt;https://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go&lt;/a&gt; which is also very useful and goes into a ton more detail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Golang Tour tutorials have been really clear up until this point, so I&amp;#8217;m hoping that this was just an aberration :)&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_exercise_stringers&#34;&gt;Exercise: Stringers&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉https://tour.golang.org/methods/18[A Tour of Go: Exercise: Stringers]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I quite enjoyed this one, even though I still had to Google for some help. I got that I needed a function to implement the &lt;code&gt;String()&lt;/code&gt; method for &lt;code&gt;IPAddr&lt;/code&gt; (which is there in the help text too but I didn&amp;#8217;t notice, which goes to show I should spend longer reading the questions)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {

}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Within this I needed to take the four parts of the IP address and concatenate them with a &lt;code&gt;.&lt;/code&gt; separator. Feeling rather proud of myself I came up with this which nicely handled each part of the IP address:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; v
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	}
&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;but failed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;.&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;prog.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;: invalid operation: a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;v&lt;/span&gt; (mismatched types &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; and &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So let&amp;#8217;s try casting the type:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
&lt;/span&gt;	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This executed successfully, but didn&amp;#8217;t work:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;loopback: &lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So let&amp;#8217;s add some debug:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Value: %v %v\n&amp;#34;&lt;/span&gt;, v, &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v))
&lt;/span&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This gives:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;Value: 
Value: &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
Value: &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
Value: &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
loopback: &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So the value is showing as empty, which is odd, because we know it&amp;#8217;s there. Let&amp;#8217;s try more debug:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value: %v \tstring(value): %v\n&amp;#34;&lt;/span&gt;, v,  &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v))
&lt;/span&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): 
value: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;OK, so the value we&amp;#8217;re getting isn&amp;#8217;t the IP address pieces… because we made a mistake in the &lt;code&gt;for&lt;/code&gt; statement and we&amp;#8217;re getting the &lt;em&gt;index&lt;/em&gt;, not the &lt;em&gt;value&lt;/em&gt;. We&amp;#8217;re also getting a blank for the string, but we&amp;#8217;ll worry about that in a moment. Let&amp;#8217;s fix the &lt;code&gt;for&lt;/code&gt; statement first. Using the underscore we can ignore the index and store the actual value in &lt;code&gt;v&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;/span&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value: %v \tstring(value): %v\n&amp;#34;&lt;/span&gt;, v,  &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v))
		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;value: &lt;span style=&#34;color:#666&#34;&gt;127&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): 
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): 
value: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): &lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We&amp;#8217;re getting somewhere.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What about this pesky blank string though when we try to cast the integer to a string? Courtesy of &lt;a href=&#34;https://www.calhoun.io/6-tips-for-using-strings-in-go/&#34;&gt;6 Tips for Using Strings in Go&lt;/a&gt; and specifically the &lt;em&gt;Convert ints (or any data type) into strings&lt;/em&gt; section I realised that &lt;code&gt;string()&lt;/code&gt; wasn&amp;#8217;t the way to do it. What &lt;code&gt;string()&lt;/code&gt; is doing is returning the ASCII character of the given value. Check out the output if I bump up the value in the &lt;code&gt;string&lt;/code&gt; value in the &lt;code&gt;Printf&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value: %v \tstring(value+64): %v\n&amp;#34;&lt;/span&gt;, v,  &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;))
&lt;/span&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;value: &lt;span style=&#34;color:#666&#34;&gt;127&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;): &lt;span style=&#34;&#34;&gt;¿&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;): &lt;span style=&#34;&#34;&gt;@&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;): &lt;span style=&#34;&#34;&gt;@&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;): A&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Maybe this was mentioned in the Tour and I missed it, but in doing the type conversion I&amp;#8217;d referred back to &lt;a href=&#34;https://tour.golang.org/basics/13&#34;&gt;Type conversions&lt;/a&gt; and it&amp;#8217;s not covered there.
So instead of &lt;code&gt;string()&lt;/code&gt; we can use &lt;a href=&#34;https://golang.org/pkg/strconv/&#34;&gt;strconv&lt;/a&gt; or &lt;a href=&#34;https://golang.org/pkg/fmt/#Sprintf&#34;&gt;&lt;code&gt;Sprintf&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value: %v \tfmt.Sprintf(value): %v\n&amp;#34;&lt;/span&gt;, v, fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,v))
&lt;/span&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;value: &lt;span style=&#34;color:#666&#34;&gt;127&lt;/span&gt; 	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(value): &lt;span style=&#34;color:#666&#34;&gt;127&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(value): &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(value): &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; 	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(value): &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we&amp;#8217;re getting somewhere! Let&amp;#8217;s use this &lt;code&gt;Sprintf&lt;/code&gt; in building the &lt;code&gt;a&lt;/code&gt; variable too, and add in a &lt;code&gt;.&lt;/code&gt; in the format string:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%d.&amp;#34;&lt;/span&gt;,v)
&lt;/span&gt;	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;loopback: &lt;span style=&#34;color:#666&#34;&gt;127.0.0.1&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Look at that! We&amp;#8217;re nearly there. Just the trailing &lt;code&gt;.&lt;/code&gt; to get rid of now, which a perusal of the &lt;a href=&#34;https://golang.org/pkg/strings/&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt; package turns up a function &lt;a href=&#34;https://golang.org/pkg/strings/#TrimRight&#34;&gt;&lt;code&gt;TrimRight&lt;/code&gt;&lt;/a&gt; that should do the trick:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%d.&amp;#34;&lt;/span&gt;,v)
&lt;/span&gt;	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;TrimRight&lt;/span&gt;(a,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So the final code looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; IPAddr [&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%d.&amp;#34;&lt;/span&gt;,v)
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;TrimRight&lt;/span&gt;(a,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)
}


&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	hosts &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]IPAddr{
		&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;loopback&amp;#34;&lt;/span&gt;:  {&lt;span style=&#34;color:#666&#34;&gt;127&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;},
		&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;googleDNS&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;},
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; name, ip &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; hosts {
		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%v: %v\n&amp;#34;&lt;/span&gt;, name, ip)
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And the output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;loopback: &lt;span style=&#34;color:#666&#34;&gt;127.0.0.1&lt;/span&gt;
googleDNS: &lt;span style=&#34;color:#666&#34;&gt;8.8.8.8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;😃&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E04 - Function Closures</title>
      <link>https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e04-function-closures/</link>
      <pubDate>2020-06-29</pubDate>
      
      <guid>https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e04-function-closures/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/moretypes/25&#34;&gt;A Tour of Go : Function Closures&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So far the Tour has been 🤔 and 🧐 and even 🤨 but function closures had me 🤯 …&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each of the words on the page made sense but strung together in a sentence didn&amp;#8217;t really make any sense to me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;Learning Go : Background&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Google resources threw up some nice explanations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://gobyexample.com/closures&#34; class=&#34;bare&#34;&gt;https://gobyexample.com/closures&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I like this site as it links all its examples to &lt;a href=&#34;https://play.golang.org/p/66Lgw9iIIch&#34;&gt;The Go Playground&lt;/a&gt; where you can try out each code block&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://tleyden.github.io/blog/2016/12/20/understanding-function-closures-in-go/&#34; class=&#34;bare&#34;&gt;http://tleyden.github.io/blog/2016/12/20/understanding-function-closures-in-go/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This comment was particularly useful&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Essentially you can think of them like &lt;strong&gt;stateful functions&lt;/strong&gt;, in the sense that they encapsulate state.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It made things click a bit for me, more than the abstract alphabet soup that other examples used :)&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This one gets into some more hands-on examples&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.calhoun.io/5-useful-ways-to-use-closures-in-go/&#34; class=&#34;bare&#34;&gt;https://www.calhoun.io/5-useful-ways-to-use-closures-in-go/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It also acted as a spoiler for the &lt;a href=&#34;https://tour.golang.org/moretypes/26&#34;&gt;function closure exercise&lt;/a&gt; since that was the first example it gives &lt;code&gt;:)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;fibonacci&lt;/span&gt;() &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; {
	f1 &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
	f2 &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; {
		f1,f2 = f2, (f1&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;f2)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; f1
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I tweaked the version that &lt;a href=&#34;https://www.calhoun.io/5-useful-ways-to-use-closures-in-go/&#34;&gt;I&amp;#8217;d seen&lt;/a&gt; so that the return values stated at zero&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;144&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;233&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;377&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;610&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;987&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1597&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2584&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4181&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E03 - Maps</title>
      <link>https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e03-maps/</link>
      <pubDate>2020-06-29</pubDate>
      
      <guid>https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e03-maps/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/moretypes/23&#34;&gt;A Tour of Go : Exercise - Maps&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Implement WordCount&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is probably bread-and-butter for any seasoned programmer, but I enjoyed the simple process and satisfaction of breaking the problem down into steps to solve using what the tutorial had just covered. Sketching out the logic in pseudo-code first, I figured that I wanted to do this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For each word in the phrase:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Check if the word exists in the map already&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create it if it doesn&amp;#8217;t&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add one to the map value&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;Learning Go : Background&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Using &lt;code&gt;Printf&lt;/code&gt; it was useful to check on how it was executing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;WordCount&lt;/span&gt;(s &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; {
	w &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)

	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;Fields&lt;/span&gt;(s) {
		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Index: %d value %v\n&amp;#34;&lt;/span&gt;,i, v)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; _, o &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; w[v]; o &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt; {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\tExisting map found for %v with value %d\n&amp;#34;&lt;/span&gt;,v,w[v])
			w[v] = w[v] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
		} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\tCreating new map for %v with value 1\n&amp;#34;&lt;/span&gt;,v)
			w[v] = &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
		}
	}

	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; w
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I liked that the tutorial uses tests to check what you&amp;#8217;ve done, and shows the expected output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PASS
 &lt;span style=&#34;color:#00f&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;I am learning Go!&amp;#34;&lt;/span&gt;) = 
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Go!&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;am&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;learning&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;}
PASS
 &lt;span style=&#34;color:#00f&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;The quick brown fox jumped over the lazy dog.&amp;#34;&lt;/span&gt;) = 
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;The&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;brown&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;dog.&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fox&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;jumped&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;lazy&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;over&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;quick&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;the&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;}
PASS
 &lt;span style=&#34;color:#00f&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;I ate a donut. Then I ate another donut.&amp;#34;&lt;/span&gt;) = 
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Then&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;another&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ate&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;donut.&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;}
PASS
 &lt;span style=&#34;color:#00f&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;A man a plan a canal panama.&amp;#34;&lt;/span&gt;) = 
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;canal&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;man&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;panama.&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;plan&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Looking at the pseudo-code and what Golang will handle for you automagically it can be reduced to this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For each word in the phrase:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;del&gt;Check if the word exists in the map already&lt;/del&gt;&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;del&gt;Create it if it doesn&amp;#8217;t&lt;/del&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add one to the map value (implicitly create the map entry if it doesn&amp;#8217;t already exist)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;WordCount&lt;/span&gt;(s &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; {
	w &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)

	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;Fields&lt;/span&gt;(s) {
		w[v] = w[v] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
	}

	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; w
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
the underscore character, representing a required variable that you&amp;#8217;re not going to use, is pretty useful.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E02 - Slices</title>
      <link>https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/</link>
      <pubDate>2020-06-25</pubDate>
      
      <guid>https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;Learning Go : Background&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/moretypes/7&#34;&gt;A Tour of Go : Slices&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Slices made sense, until I got to &lt;a href=&#34;https://tour.golang.org/moretypes/11&#34;&gt;&lt;em&gt;Slice length and capacity&lt;/em&gt;&lt;/a&gt;. Two bits puzzled me in this code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	s &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;}
	&lt;span style=&#34;color:#00f&#34;&gt;printSlice&lt;/span&gt;(s)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=6 cap=6 [2 3 5 7 11 13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// --
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Slice the slice to give it zero length.
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	s = s[:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
	&lt;span style=&#34;color:#00f&#34;&gt;printSlice&lt;/span&gt;(s)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=0 cap=6 []
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// --
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Extend its length.
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	s = s[:&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;]
	&lt;span style=&#34;color:#00f&#34;&gt;printSlice&lt;/span&gt;(s)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=4 cap=6 [2 3 5 7]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// --
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Drop its first two values.
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	s = s[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;:]
	&lt;span style=&#34;color:#00f&#34;&gt;printSlice&lt;/span&gt;(s)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=2 cap=4 [5 7]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;printSlice&lt;/span&gt;(s []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) {
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;len=%d cap=%d %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(s), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(s), s)
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First up, and again this is my non-coding background coming through, but if &lt;code&gt;s&lt;/code&gt; starts off as something&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;}
&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and then we change it to something else&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s = s[:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt; []&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;how can it revert to something based on its previous incarnation?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s = s[:&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;]
&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Which eventually made sense to me once it was explained that because &lt;code&gt;s&lt;/code&gt; is a slice, it is a pointer to the underlying array. This is explained &lt;a href=&#34;https://tour.golang.org/moretypes/9&#34;&gt;here&lt;/a&gt;, and so&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;is building an array &lt;strong&gt;and&lt;/strong&gt; declaring a slice on it in the same statement. It&amp;#8217;s a more concise way of doing something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;myArray &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;}
s &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; myArray[:]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When we appear to reassign &lt;code&gt;s&lt;/code&gt; to a new value&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s = s[:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It&amp;#8217;s actually declaring &lt;code&gt;s&lt;/code&gt; as a slice as a before, &lt;strong&gt;based on the pointer against the original array&lt;/strong&gt;. We can infer this from the fact that the &lt;em&gt;capacity&lt;/em&gt; of the slice remains as 6&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s = s[:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt; len=&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; cap=&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; []&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and thus when we extend it, it&amp;#8217;s still against the original array that we were pointing to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s = s[:&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;]
&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt; len=&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; cap=&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So &lt;code&gt;s&lt;/code&gt; is a slice on top of the same array each time, just with a different definition (thus the &lt;em&gt;length&lt;/em&gt; changes, not the &lt;em&gt;capacity&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The second bit that puzzled me was, given the above explanation of &lt;code&gt;s&lt;/code&gt; being a pointer to the same array, how can resizing it down and then up still retain the values and capacity…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s = s[:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=0 cap=6 []
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;s = s[:&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;]
&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt; len=&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; cap=&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;whilst also resizing it down and up &lt;em&gt;not&lt;/em&gt; retain the values and capacity…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s = s[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;:]
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=2 cap=4 [5 7]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;s = s[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;]
&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt; len=&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; cap=&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The answer is related to the first point above - pointers. When we declare the slice and increase the lower bound (&lt;code&gt;[2:]&lt;/code&gt;) we&amp;#8217;re actually &lt;strong&gt;moving the offset of the pointer against the underlying array&lt;/strong&gt;. Any subsequent references are now based on the pointer to this offset, and not the original one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s another example that I worked through to help figure it out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;(try it on &lt;a href=&#34;https://play.golang.org/p/hO5QJzy2q2n&#34;&gt;Go playground&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	myArray &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;}

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y is a slice on myArray
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// With no bounds specified it defaults to the lowest (zero) and 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  highest (five) of the array
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// There are six entries (len=6) and the array that it points to 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  has six entries (cap=6)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	y &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; myArray[:]
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;y       len %d\tcap %d\tvalue %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(y), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(y),y)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;myArray len %d\tcap %d\tvalue %v\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(myArray), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(myArray),myArray)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y       len 6	cap 6	value [2 3 5 7 11 13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// myArray len 6	cap 6	value [2 3 5 7 11 13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y is a slice against the same array that y *pointed to* previously
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// This time we take the first four entries (len=4). The slice is still
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  pointing to the same original array which has six entries (cap=6)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	y = y[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;]
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;y       len %d\tcap %d\tvalue %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(y), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(y),y)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;myArray len %d\tcap %d\tvalue %v\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(myArray), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(myArray),myArray)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y       len 4	cap 6	value [2 3 5 7]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// myArray len 6	cap 6	value [2 3 5 7 11 13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y is a slice against the same array that y *pointed to* previously
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// This time we take no entries (len=0). The slice is still
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  pointing to the same original array which has six entries (cap=6)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	y = y[:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;y       len %d\tcap %d\tvalue %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(y), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(y),y)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;myArray len %d\tcap %d\tvalue %v\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(myArray), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(myArray),myArray)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y       len 0	cap 6	value []
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// myArray len 6	cap 6	value [2 3 5 7 11 13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Now we do something different from the above pattern. We shift the 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  point to which y points, and now it starts from the fifth position
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  of the underlying array (it&amp;#39;s zero based so fifth position=4). 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// There are two entries (five and six) so len=2, and because we&amp;#39;re now 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  actually pointing to the array starting at the second entry the capacity
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  changes too (cap=2)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	y = y[&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;]
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;y       len %d\tcap %d\tvalue %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(y), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(y),y)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;myArray len %d\tcap %d\tvalue %v\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(myArray), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(myArray),myArray)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y       len 2	cap 2	value [11 13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// myArray len 6	cap 6	value [2 3 5 7 11 13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Now that we&amp;#39;ve shifted the pointer to a different offset in the source array
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  our bounds have different references. 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// This refers to the second position (zero based, so 1) in the array but starting
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  from the redefined start offset that we created in the above slice 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	y = y[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;]
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;y       len %d\tcap %d\tvalue %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(y), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(y),y)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;myArray len %d\tcap %d\tvalue %v\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(myArray), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(myArray),myArray)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y       len 1	cap 1	value [13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// myArray len 6	cap 6	value [2 3 5 7 11 13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Since the slice is just a pointer to the underlying array we can change the array and 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// the slice will reflect this
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	myArray[&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;]=&lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;y       len %d\tcap %d\tvalue %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(y), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(y),y)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;myArray len %d\tcap %d\tvalue %v\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(myArray), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(myArray),myArray)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y       len 1	cap 1	value [100]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// myArray len 6	cap 6	value [2 3 5 7 11 100]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Conversely, changing the slice value reflects in the array too
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	y[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]=&lt;span style=&#34;color:#666&#34;&gt;200&lt;/span&gt;
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;y       len %d\tcap %d\tvalue %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(y), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(y),y)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;myArray len %d\tcap %d\tvalue %v\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(myArray), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(myArray),myArray)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y       len 1	cap 1	value [200]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// myArray len 6	cap 6	value [2 3 5 7 11 200]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.golang.org/slices-intro&#34;&gt;This blog post&lt;/a&gt; goes into some lower-level stuff around Slices that was very useful. A concept it uses that I&amp;#8217;d not come across yet was the underscore, which is explained well in &lt;a href=&#34;https://stackoverflow.com/a/27764432/350613&#34;&gt;this StackOverflow answer&lt;/a&gt; (and then gets covered soon after in the Tour [&lt;a href=&#34;https://tour.golang.org/moretypes/17&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Other references that were useful:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.callicoder.com/golang-slices/&#34; class=&#34;bare&#34;&gt;https://www.callicoder.com/golang-slices/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/50713681/extend-the-length-and-keep-the-value&#34; class=&#34;bare&#34;&gt;https://stackoverflow.com/questions/50713681/extend-the-length-and-keep-the-value&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/43294449/decreasing-slice-capacity&#34; class=&#34;bare&#34;&gt;https://stackoverflow.com/questions/43294449/decreasing-slice-capacity&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/47256103/golang-slice-variable-assign-from-tutorial&#34; class=&#34;bare&#34;&gt;https://stackoverflow.com/questions/47256103/golang-slice-variable-assign-from-tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_appending_to_a_slice_why_doesnt_the_capacity_match_the_length&#34;&gt;Appending to a slice - why doesn&amp;#8217;t the capacity match the length?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/moretypes/15&#34;&gt;A Tour of Go : Appending to a slice&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This all made sense, except for when I noticed the &lt;code&gt;cap&lt;/code&gt; (6) wasn&amp;#8217;t in line with the &lt;code&gt;len&lt;/code&gt; (5) in the final example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; s []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=0 cap=0 []
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	
	s = &lt;span style=&#34;color:#008000&#34;&gt;append&lt;/span&gt;(s, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=1 cap=1 [0]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
	s = &lt;span style=&#34;color:#008000&#34;&gt;append&lt;/span&gt;(s, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=2 cap=2 [0 1]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
	s = &lt;span style=&#34;color:#008000&#34;&gt;append&lt;/span&gt;(s, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=5 cap=6 [0 1 2 3 4]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Poking around a bit more with this I saw that the capacity doubled each time it needed to be increased:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; s []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;
	
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i&lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt;; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
		s = &lt;span style=&#34;color:#008000&#34;&gt;append&lt;/span&gt;(s,i)
		&lt;span style=&#34;color:#00f&#34;&gt;printSlice&lt;/span&gt;(s)
	}
}


&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;printSlice&lt;/span&gt;(s []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) {
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;len=%d \tcap=%d \n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(s), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(s))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;len=&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;19&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is discussed in this &lt;a href=&#34;https://stackoverflow.com/a/23532202/350613&#34;&gt;StackOverflow answer&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_exercise_slices&#34;&gt;Exercise: Slices&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/moretypes/18&#34; class=&#34;bare&#34;&gt;https://tour.golang.org/moretypes/18&lt;/a&gt; [A Tour of Go : Exercise: Slices]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This dropped me in at the fairly deep end, and I only just kept my head above water ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I went back to previous examples, particularly &lt;a href=&#34;https://tour.golang.org/moretypes/13&#34;&gt;Creating a slice with make&lt;/a&gt; and &lt;a href=&#34;https://tour.golang.org/moretypes/14&#34;&gt;Slices of slices&lt;/a&gt;, but I couldn&amp;#8217;t figure out how to combine the two concepts. This kind of thing didn&amp;#8217;t work&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;p &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt;,dx),dy)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;d have liked to see a hints or work answer for the exercise, but with the power of Google it was easy enough to find a few :) These answers got me on the right tracks to first create the slice and then create within it iteratively the additional slice (which to be fair the exercise text does specify, with hindsight)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;golang.org/x/tour/pic&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Pic&lt;/span&gt;(dx, dy &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) [][]&lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt; {
	p &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([][]&lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt;,dy)
	
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p {
		p[i] = &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt;,dx)
	}

	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; p
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	pic.&lt;span style=&#34;color:#00f&#34;&gt;Show&lt;/span&gt;(Pic)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When you run this you get a nice blue square. Now to add some pattern to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Just to experiment with what was going on I tried something, anything … :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p[y] {
			p[y][x]=(&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(x)&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(y))
		}
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/06/slice01.png&#34; alt=&#34;slice01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Casting &lt;code&gt;uint8&lt;/code&gt; was necessary (and is mentioned as a hint in the exercise text) because otherwise it fails  with &lt;code&gt;./prog.go:14:11: cannot use x + y (type int) as type uint8 in assignment&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I thought that this would work, to declare the variable types first, but it didn&amp;#8217;t and threw the same error.&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; x,y &lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p[y] {
			p[y][x]=(x&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;y)
		}
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Other patterns:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p[y] {
			p[y][x]=(&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(x)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(y))
		}
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/06/slice02.png&#34; alt=&#34;slice02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E01 - Pointers</title>
      <link>https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/</link>
      <pubDate>2020-06-25</pubDate>
      
      <guid>https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5302.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;Learning Go : Background&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/moretypes/1&#34;&gt;A Tour of Go : Pointers&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;ve never used pointers before. Found plenty of good resources about &lt;strong&gt;what&lt;/strong&gt; they are, e.g.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.callicoder.com/golang-pointers/&#34; class=&#34;bare&#34;&gt;https://www.callicoder.com/golang-pointers/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dave.cheney.net/2017/04/26/understand-go-pointers-in-less-than-800-words-or-your-money-back&#34; class=&#34;bare&#34;&gt;https://dave.cheney.net/2017/04/26/understand-go-pointers-in-less-than-800-words-or-your-money-back&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But &lt;strong&gt;why&lt;/strong&gt;? It&amp;#8217;s like explaining patiently to someone that 2+2 = 4, without really explaining &lt;strong&gt;why&lt;/strong&gt; would we want to add two numbers together in the first place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;(side note: I bet a ton of devrel material could be made more accessible by addressing the huge number of assumptions that are made, explicit and implicit, in explanations given)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;My colleague Ricardo Ferreira gave me this great explanation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pointers in Go has to do with three main things:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Garbage Collection&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Go is a garbage collected language just like Java. However, it uses of some less sophisticated algorithms to reclaim memory space than Java that tries to figure out too much doing heap transverse and thus spending too much CPU on it. Go is meant to provide better performance and because of this it tries to share the responsibility with the developer about how to track references. And if a developer uses a pointer; it is the indication about which references need to be reclaimed given its scope. It uses something called reference counting to figure that out.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encapsulation (Information Hiding)&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pointers are particularly good for structs, which represents complex data structures. By returning structs rather than the actual value developers can ensure that only the function that created the struct can act upon it.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Immutability&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You better than anyone will understand this. Structs represents records and therefore their occurance needs to be immutable. You can&amp;#8217;t change what happened in the past and thus; you are not supposed to change structs&amp;#8201;&amp;#8212;&amp;#8201;unless the function that created the struct provides a write operation. So in Go, we use the concept of interface methods that are nothing more than function pointers to a struct.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I also got some useful feedback from people on Twitter:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Pointers in Go.&lt;br&gt;&lt;br&gt;I grok *what* they are and *how* to use them (&lt;a href=&#34;https://t.co/0nMV16r0Wz&#34;&gt;https://t.co/0nMV16r0Wz&lt;/a&gt; sorted me out there) - but can a kind soul point me to a good resource that explains *why* I would use them? Why don&amp;#39;t I just pass variables around instead?&lt;/p&gt;&amp;mdash; Robin Moffatt 🍻🏃🥓 (@rmoff) &lt;a href=&#34;https://twitter.com/rmoff/status/1275777088268709889?ref_src=twsrc%5Etfw&#34;&gt;June 24, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Pointers are just indirection. For size, think of loading GB of data. Without indirection, you&amp;#39;d have to copy all of it every time. Pointer lets you say &amp;quot;here&amp;#39;s where to find the data&amp;quot; rather than &amp;quot;here&amp;#39;s a copy of the data&amp;quot;.&lt;/p&gt;&amp;mdash; ewencp (@ewencp) &lt;a href=&#34;https://twitter.com/ewencp/status/1275842242972803072?ref_src=twsrc%5Etfw&#34;&gt;June 24, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The main reason is performance and memory management. Say you have a large complex object that you want to use as a parameter to a method. If you don&amp;#39;t use a pointer then the entire object is copied and the copy is fed into the method. This means allocating and configuring a ...&lt;/p&gt;&amp;mdash; Ray Skywalker (@RaySaltrelli) &lt;a href=&#34;https://twitter.com/RaySaltrelli/status/1275833679412068352?ref_src=twsrc%5Etfw&#34;&gt;June 24, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E00</title>
      <link>https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/</link>
      <pubDate>2020-06-25</pubDate>
      
      <guid>https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5126.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;My background is not a traditional CompSci one. I studied Music at university, and managed to wangle my way into IT through various means, ending up doing what I do now with no formal training in coding, and a grab-bag of hacky programming attempts on my CV. My weapons of choice have been BBC Basic, VBA, ASP, and more recently some very unpythonic-Python. It&amp;#8217;s got me by, but I figured recently I&amp;#8217;d like to learn something new, and several people pointed to Go as a good option.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I thought it would be interesting to write up some notes as I went, because blogging is how I remember things and have a record to refer to later :) There&amp;#8217;s also some things that puzzled me (given my background in coding so far) that I struggled to find an answer to on Google, so maybe it might even help others.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_learning_go_where_to_start&#34;&gt;Learning Go - where to start?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pretty simple - &lt;a href=&#34;https://tour.golang.org/&#34; class=&#34;bare&#34;&gt;https://tour.golang.org/&lt;/a&gt; is really good for working through and building on concepts. I&amp;#8217;m making myself do this since there&amp;#8217;s a bunch that I probably wouldn&amp;#8217;t understand if I tried to skip ahead and go and start looking at real code examples. I&amp;#8217;m glad I&amp;#8217;ve done this as it&amp;#8217;s forcing me to work through things that I really don&amp;#8217;t understand, like we&amp;#8217;re about to see…&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_other_materials&#34;&gt;Other materials&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;ve not tried it but &lt;a href=&#34;https://www.udemy.com/course/go-the-complete-developers-guide/&#34;&gt;this course&lt;/a&gt; was recommended to me on Twitter, as was &lt;a href=&#34;https://www.udemy.com/course/learn-go-the-complete-bootcamp-course-golang&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_episode_list&#34;&gt;Episode list&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/&#34;&gt;S01E01 - Pointers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/&#34;&gt;S01E02 - Slices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>How to install connector plugins in Kafka Connect</title>
      <link>https://rmoff.net/2020/06/19/how-to-install-connector-plugins-in-kafka-connect/</link>
      <pubDate>2020-06-19</pubDate>
      
      <guid>https://rmoff.net/2020/06/19/how-to-install-connector-plugins-in-kafka-connect/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5119.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Kafka Connect (which is part of Apache Kafka) supports pluggable connectors, enabling you to stream data between Kafka and numerous types of system, including to mention just a few:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Databases&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Message Queues&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flat files&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object stores&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The appropriate plugin for the technology which you want to integrate can be found on &lt;a href=&#34;https://www.confluent.io/hub/&#34;&gt;Confluent Hub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/18gDPSOH3wU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You need to install the plugin on each Kafka Connect worker in the Kafka Connect cluster. After installing the plugin, you must restart the Kafka Connect worker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
Plugins are JAR files that you will usually download directly from Confluent Hub, but in some cases may get from other places such as GitHub and need to build yourself.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;See also &lt;a href=&#34;https://docs.confluent.io/current/connect/userguide.html#installing-kconnect-plugins&#34;&gt;Installing Connect Plugins&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_automagic_installation_using_confluent_hub&#34;&gt;Automagic installation using &lt;code&gt;confluent-hub&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you&amp;#8217;re running Confluent Platform you already have Confluent Hub client. If not, then you can download it from &lt;a href=&#34;https://docs.confluent.io/current/connect/managing/confluent-hub/client.html#c-hub-client&#34;&gt;the instructions here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Run the client on your Kafka Connect worker(s), and it does all the hard work for you. You just need the name of the connector and its version, which you can get from the plugin&amp;#8217;s page on &lt;a href=&#34;https://www.confluent.io/hub/&#34;&gt;Confluent Hub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ confluent-hub install --no-prompt jcustenborder/kafka-connect-spooldir:2.0.43
Running in a &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;--no-prompt&amp;#34;&lt;/span&gt; mode
Implicit acceptance of the license below:
Apache License &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;.0
https:/github.com/jcustenborder/kafka-connect-spooldir/LICENSE
Implicit confirmation of the question: You are about to install &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;kafka-connect-spooldir&amp;#39;&lt;/span&gt; from Jeremy Custenborder, as published on Confluent Hub.
Downloading component Kafka Connect Spooldir &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;.0.43, provided by Jeremy Custenborder from Confluent Hub and installing into /Users/rmoff/confluent-platform/share/confluent-hub-components
Adding installation directory to plugin path in the following files:
  /Users/rmoff/confluent-platform/etc/kafka/connect-distributed.properties
  /Users/rmoff/confluent-platform/etc/kafka/connect-standalone.properties
  /Users/rmoff/confluent-platform/etc/schema-registry/connect-avro-distributed.properties
  /Users/rmoff/confluent-platform/etc/schema-registry/connect-avro-standalone.properties

Completed&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_manual_installation&#34;&gt;Manual installation&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Download the JAR file (usually from &lt;a href=&#34;https://www.confluent.io/hub/&#34;&gt;Confluent Hub&lt;/a&gt; but perhaps built manually yourself from elsewhere), and place it in a folder on your Kafka Connect worker. For this example, we&amp;#8217;ll put it in &lt;code&gt;/opt/connectors&lt;/code&gt;. The folder tree will look something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;/opt/connectors
└── jcustenborder-kafka-connect-spooldir
    ├── doc
    │   ├── LICENSE
    │   └── README.md
    ├── etc
        …
    ├── lib
        …
    │   ├── javassist-3.21.0-GA.jar
    │   ├── jsr305-3.0.2.jar
    │   ├── kafka-connect-spooldir-2.0.43.jar
    │   ├── listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar
        …
    └── manifest.json

&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; directories, &lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt; files&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Locate your Kafka Connect worker&amp;#8217;s configuration (&lt;code&gt;.properties&lt;/code&gt;) file, and open it in an editor. Search for &lt;code&gt;plugin.path&lt;/code&gt; setting, and amend or create it to include the folder(s) in which you connectors reside&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;plugin.path&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;/opt/connectors&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Restart your Kafka Connect worker.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_docker&#34;&gt;Docker&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With Docker it can be a bit more tricky because you need to install the plugin &lt;strong&gt;before&lt;/strong&gt; the worker starts. If you try to install it in the Docker container and then restart the worker, the container restarts and you lose the JAR that you installed. There are three approaches to use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_docker_volume_mapping&#34;&gt;Docker (volume mapping)&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Download your plugin JARs to a local folder on the Docker host (e.g. &lt;code&gt;/path/on/docker/host/to/connector/folder&lt;/code&gt;), and map these in to the container (e.g. to &lt;code&gt;/data/containers&lt;/code&gt;), ensuring that they are included in the container&amp;#8217;s &lt;code&gt;plugin.path&lt;/code&gt; environment variable. A Docker Compose would look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;…&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;environment:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;…&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;CONNECT_PLUGIN_PATH:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;/usr/share/java,/data/connectors/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;volumes:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/path/on/docker/host/to/connector/folder:/data&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_docker_runtime_installation&#34;&gt;Docker (runtime installation)&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When a Docker container is run, it uses the &lt;code&gt;Cmd&lt;/code&gt; or &lt;code&gt;EntryPoint&lt;/code&gt; that was defined when the image was built. &lt;a href=&#34;https://hub.docker.com/r/confluentinc/cp-kafka-connect-base&#34;&gt;Confluent&amp;#8217;s Kafka Connect image&lt;/a&gt; will—as you would expect—launch the Kafka Connect worker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ docker inspect --format&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{{.Config.Cmd}}&amp;#39;&lt;/span&gt; confluentinc/cp-kafka-connect-base:5.5.0
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;/etc/confluent/docker/run&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can override that at runtime to install the plugins first. In Docker Compose this looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;…&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;environment:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;…&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;CONNECT_PLUGIN_PATH:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;/usr/share/java,/usr/share/confluent-hub-components/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;command:&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bash&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-c&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ba2121;font-style:italic&#34;&gt;|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121;font-style:italic&#34;&gt;        # Install connector plugins&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# This will by default install into /usr/share/confluent-hub-components/ so make&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#  sure that this path is added to the plugin.path in the environment variables &lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;confluent-hub&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;install&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;--no-prompt&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;jcustenborder/kafka-connect-spooldir:&lt;span style=&#34;color:#666&#34;&gt;2.0.43&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Launch the Kafka Connect worker&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;/etc/confluent/docker/run&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&amp;amp;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# Don&amp;#39;t exit&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;sleep&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;infinity&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_docker_bake_a_custom_image&#34;&gt;Docker (bake a custom image)&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For any non-trivial Docker deployment you&amp;#8217;re going to want to build and curate your own Docker image with the connector plugin(s) that you require for your environment. To do this create a Dockerfile:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt; confluentinc/cp-kafka-connect-base:5.5.0&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;ENV&lt;/span&gt; &lt;span style=&#34;color:#19177c&#34;&gt;CONNECT_PLUGIN_PATH&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/usr/share/java,/usr/share/confluent-hub-components&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;RUN&lt;/span&gt; confluent-hub install --no-prompt jcustenborder/kafka-connect-spooldir:2.0.43&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and then build it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker build -t kafka-connect-spooldir .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_video_tutorial&#34;&gt;Video Tutorial&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/18gDPSOH3wU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Loading CSV data into Kafka</title>
      <link>https://rmoff.net/2020/06/17/loading-csv-data-into-kafka/</link>
      <pubDate>2020-06-17</pubDate>
      
      <guid>https://rmoff.net/2020/06/17/loading-csv-data-into-kafka/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5001.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For whatever reason, CSV still exists as a ubiquitous data interchange format. It doesn&amp;#8217;t get much simpler: chuck some plaintext with fields separated by commas into a file and stick &lt;code&gt;.csv&lt;/code&gt; on the end. If you&amp;#8217;re feeling helpful you can include a header row with field names in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csv&#34; data-lang=&#34;csv&#34;&gt;order_id,customer_id,order_total_usd,make,model,delivery_city,delivery_company,delivery_address
1,535,190899.73,Dodge,Ram Wagon B350,Sheffield,DuBuque LLC,2810 Northland Avenue
2,671,33245.53,Volkswagen,Cabriolet,Edinburgh,Bechtelar-VonRueden,1 Macpherson Crossing&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this article we&amp;#8217;ll see how to load this CSV data into Kafka, without even needing to write any code&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Importantly, we&amp;#8217;re not going to reinvent the wheel by trying to write some code to do it ourselves - &lt;a href=&#34;https://docs.confluent.io/current/connect/index.html&#34;&gt;Kafka Connect&lt;/a&gt; (which is part of Apache Kafka) already exists &lt;a href=&#34;https://rmoff.dev/ljc-kafka-02&#34;&gt;to do all of this for us&lt;/a&gt;; we just need the appropriate connector.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/N1pseW9waNI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_schemas&#34;&gt;Schemas?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Yeah, schemas. CSV files might not care about them much, but the users of your data in Kafka will. &lt;strong&gt;Ideally&lt;/strong&gt; we want a way to define the schema of the data that we ingest so that it can be stored and read by anyone who wants to use the data. To understand why this is such a big deal check out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.infoq.com/presentations/contracts-streaming-microservices/&#34;&gt;Streaming Microservices: Contracts &amp;amp; Compatibility&lt;/a&gt; (InfoQ talk)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.confluent.io/blog/schema-registry-kafka-stream-processing-yes-virginia-you-really-need-one&#34;&gt;Yes, Virginia, You Really Do Need a Schema Registry&lt;/a&gt; (blog)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.confluent.io/blog/schemas-contracts-compatibility&#34;&gt;Schemas, Contracts, and Compatibility&lt;/a&gt; (blog)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.confluent.io/blog/confluent-platform-now-supports-protobuf-json-schema-custom-formats/&#34;&gt;Confluent Platform Now Supports Protobuf, JSON Schema, and Custom Formats&lt;/a&gt; (blog)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are going to define a schema at ingest (and I hope you do), use Avro, Protobuf, or JSON Schema, as described &lt;a href=&#34;https://www.confluent.io/blog/kafka-connect-deep-dive-converters-serialization-explained&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
You don&amp;#8217;t &lt;strong&gt;have&lt;/strong&gt; to use a schema. You can just ingest the CSV data as-is, and I cover this below too.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_kafka_connect_spooldir_connector&#34;&gt;Kafka Connect SpoolDir connector&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Kafka Connect SpoolDir connector supports various flatfile formats, including CSV. Get it from &lt;a href=&#34;https://www.confluent.io/hub/jcustenborder/kafka-connect-spooldir&#34;&gt;Confluent Hub&lt;/a&gt;, and check out the &lt;a href=&#34;https://docs.confluent.io/current/connect/kafka-connect-spooldir/&#34;&gt;docs here&lt;/a&gt;. Once you&amp;#8217;ve installed it in your Kafka Connect worker make sure you restart the worker for it to pick it up. You can check by running:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ curl -s localhost:8083/connector-plugins|jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.[].class&amp;#39;&lt;/span&gt;|egrep &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;SpoolDir&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;com.github.jcustenborder.kafka.connect.spooldir.SpoolDirCsvSourceConnector&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;com.github.jcustenborder.kafka.connect.spooldir.SpoolDirJsonSourceConnector&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;com.github.jcustenborder.kafka.connect.spooldir.SpoolDirLineDelimitedSourceConnector&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;com.github.jcustenborder.kafka.connect.spooldir.SpoolDirSchemaLessJsonSourceConnector&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;com.github.jcustenborder.kafka.connect.spooldir.elf.SpoolDirELFSourceConnector&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_loading_data_from_csv_into_kafka_and_applying_a_schema&#34;&gt;Loading data from CSV into Kafka and applying a schema&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you have a header row with field names you can take advantage of these to define the schema at ingestion time (which is a &lt;strong&gt;good&lt;/strong&gt; idea).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Create the connector:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -i -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Accept:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http://localhost:8083/connectors/source-csv-spooldir-00/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connector.class&amp;#34;: &amp;#34;com.github.jcustenborder.kafka.connect.spooldir.SpoolDirCsvSourceConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;topic&amp;#34;: &amp;#34;orders_spooldir_00&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;input.path&amp;#34;: &amp;#34;/data/unprocessed&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;finished.path&amp;#34;: &amp;#34;/data/processed&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;error.path&amp;#34;: &amp;#34;/data/error&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;input.file.pattern&amp;#34;: &amp;#34;.*\\.csv&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;schema.generation.enabled&amp;#34;:&amp;#34;true&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;csv.first.row.as.header&amp;#34;:&amp;#34;true&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
when you create the connector with this configuration you need to run this with &lt;code&gt;&#34;csv.first.row.as.header&#34;:&#34;true&#34;&lt;/code&gt; and a file with headers already in place pending to be read.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now head over to a Kafka consumer and observe our data. Here I&amp;#8217;m using kafkacat cos it&amp;#8217;s great :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker &lt;span style=&#34;color:#008000&#34;&gt;exec&lt;/span&gt; kafkacat &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    kafkacat -b kafka:29092 -t orders_spooldir_00 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -C -o-1 -J &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -s &lt;span style=&#34;color:#19177c&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;s -s &lt;span style=&#34;color:#19177c&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;avro -r http://schema-registry:8081 | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.payload&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;500&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;customer_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;424&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_total_usd&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;160312.42&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;make&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Chevrolet&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Suburban 1500&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_city&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;London&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_company&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Predovic LLC&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_address&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2 Sundown Drive&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What&amp;#8217;s more, in the header of the Kafka message is the metadata from the file itself:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker &lt;span style=&#34;color:#008000&#34;&gt;exec&lt;/span&gt; kafkacat &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    kafkacat -b kafka:29092 -t orders_spooldir_00 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -C -o-1 -J &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -s &lt;span style=&#34;color:#19177c&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;s -s &lt;span style=&#34;color:#19177c&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;avro -r http://schema-registry:8081 | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.headers&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;file.name&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;orders.csv&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;file.path&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;/data/unprocessed/orders.csv&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;file.length&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;39102&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;file.offset&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;501&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;file.last.modified&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;2020-06-17T13:33:50.000Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_setting_the_message_key&#34;&gt;Setting the message key&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Assuming you have header row to provide field names, you can set &lt;code&gt;schema.generation.key.fields&lt;/code&gt; to the name of the field(s) you&amp;#8217;d like to use for the Kafka message key. If you&amp;#8217;re running this after the first example above remember that the connector relocates your file so you need to move it back to the &lt;code&gt;input.path&lt;/code&gt; location for it to be processed again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
The connector name (here it&amp;#8217;s &lt;code&gt;source-csv-spooldir-01&lt;/code&gt;) is used in tracking which files have been processed and the offset within them, so a connector of the same name won&amp;#8217;t reprocess a file of the same name and lower offset than already processed. If you want to force it to reprocess a file, give the connector a new name.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -i -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Accept:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http://localhost:8083/connectors/source-csv-spooldir-01/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connector.class&amp;#34;: &amp;#34;com.github.jcustenborder.kafka.connect.spooldir.SpoolDirCsvSourceConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;topic&amp;#34;: &amp;#34;orders_spooldir_01&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;input.path&amp;#34;: &amp;#34;/data/unprocessed&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;finished.path&amp;#34;: &amp;#34;/data/processed&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;error.path&amp;#34;: &amp;#34;/data/error&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;input.file.pattern&amp;#34;: &amp;#34;.*\\.csv&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;schema.generation.enabled&amp;#34;:&amp;#34;true&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;schema.generation.key.fields&amp;#34;:&amp;#34;order_id&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;csv.first.row.as.header&amp;#34;:&amp;#34;true&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The resulting Kafka message has the &lt;code&gt;order_id&lt;/code&gt; set as the message key:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker &lt;span style=&#34;color:#008000&#34;&gt;exec&lt;/span&gt; kafkacat &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    kafkacat -b kafka:29092 -t orders_spooldir_01 -o-1 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -C -J &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             -s &lt;span style=&#34;color:#19177c&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;s -s &lt;span style=&#34;color:#19177c&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;avro -r http://schema-registry:8081 | &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;             jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{&amp;#34;key&amp;#34;:.key,&amp;#34;payload&amp;#34;: .payload}&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Struct{order_id=3}&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;payload&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;customer_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;695&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_total_usd&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;155664.90&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;make&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Toyota&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Avalon&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_city&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Brighton&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_company&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Jacobs, Ebert and Dooley&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_address&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;4 Loomis Crossing&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_changing_the_schema_field_types&#34;&gt;Changing the schema field types&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The connector does a fair job at setting the schema, but maybe you want to override it. You can declare the whole thing upfront using the &lt;code&gt;value.schema&lt;/code&gt; configuration, but perhaps you are happy with it inferring the whole schema except for a couple of fields. Here you can use &lt;a href=&#34;https://docs.confluent.io/current/connect/transforms/index.html&#34;&gt;Single Message Transform&lt;/a&gt; to munge it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -i -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Accept:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http://localhost:8083/connectors/source-csv-spooldir-02/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connector.class&amp;#34;: &amp;#34;com.github.jcustenborder.kafka.connect.spooldir.SpoolDirCsvSourceConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;topic&amp;#34;: &amp;#34;orders_spooldir_02&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;input.path&amp;#34;: &amp;#34;/data/unprocessed&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;finished.path&amp;#34;: &amp;#34;/data/processed&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;error.path&amp;#34;: &amp;#34;/data/error&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;input.file.pattern&amp;#34;: &amp;#34;.*\\.csv&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;schema.generation.enabled&amp;#34;:&amp;#34;true&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;schema.generation.key.fields&amp;#34;:&amp;#34;order_id&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;csv.first.row.as.header&amp;#34;:&amp;#34;true&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;transforms&amp;#34;:&amp;#34;castTypes&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;transforms.castTypes.type&amp;#34;:&amp;#34;org.apache.kafka.connect.transforms.Cast$Value&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;transforms.castTypes.spec&amp;#34;:&amp;#34;order_id:int32,customer_id:int32,order_total_usd:float32&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you go and look at the schema that&amp;#8217;s been created and stored in the Schema Registry you can see the field data types have been set as specified:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;➜ curl --silent --location --request GET &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;http://localhost:8081/subjects/orders_spooldir_02-value/versions/latest&amp;#39;&lt;/span&gt; |jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.schema|fromjson&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;record&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Value&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;com.github.jcustenborder.kafka.connect.model&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_id&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: null &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;customer_id&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: null &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;order_total_usd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;float&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: null &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;make&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: null &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: null &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_city&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: null &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_company&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: null &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;delivery_address&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: null &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;,
  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;connect.name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;com.github.jcustenborder.kafka.connect.model.Value&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_just_gimme_the_plain_text&#34;&gt;Just gimme the plain text! 😢&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All of this schemas seems like a bunch of fuss really, doesn&amp;#8217;t it? Well not really. But, if you absolutely must just have CSV in your Kafka topic then here&amp;#8217;s how. Note that we&amp;#8217;re using a &lt;a href=&#34;https://docs.confluent.io/current/connect/kafka-connect-spooldir/connectors/line_delimited_source_connector.html&#34;&gt;different connector class&lt;/a&gt; and we&amp;#8217;re using &lt;code&gt;org.apache.kafka.connect.storage.StringConverter&lt;/code&gt; to write the values. If you want to learn more about serialisers and converters &lt;a href=&#34;https://www.confluent.io/blog/kafka-connect-deep-dive-converters-serialization-explained&#34;&gt;see here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -i -X PUT -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Accept:application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http://localhost:8083/connectors/source-csv-spooldir-03/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connector.class&amp;#34;: &amp;#34;com.github.jcustenborder.kafka.connect.spooldir.SpoolDirLineDelimitedSourceConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;value.converter&amp;#34;:&amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;topic&amp;#34;: &amp;#34;orders_spooldir_03&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;input.path&amp;#34;: &amp;#34;/data/unprocessed&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;finished.path&amp;#34;: &amp;#34;/data/processed&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;error.path&amp;#34;: &amp;#34;/data/error&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;input.file.pattern&amp;#34;: &amp;#34;.*\\.csv&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The result? Just CSV.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜ docker &lt;span style=&#34;color:#008000&#34;&gt;exec&lt;/span&gt; kafkacat &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    kafkacat -b kafka:29092 -t orders_spooldir_03 -o-5 -C -u -q
&lt;span style=&#34;color:#666&#34;&gt;496&lt;/span&gt;,456,80466.80,Volkswagen,Touareg,Leeds,Hilpert-Williamson,96 Stang Junction
&lt;span style=&#34;color:#666&#34;&gt;497&lt;/span&gt;,210,57743.67,Dodge,Neon,London,Christiansen Group,7442 Algoma Hill
&lt;span style=&#34;color:#666&#34;&gt;498&lt;/span&gt;,88,211171.02,Nissan,370Z,York,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;King, Yundt and Skiles&amp;#34;&lt;/span&gt;,3 1st Plaza
&lt;span style=&#34;color:#666&#34;&gt;499&lt;/span&gt;,343,126072.73,Chevrolet,Camaro,Sheffield,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Schiller, Ankunding and Schumm&amp;#34;&lt;/span&gt;,8920 Hoffman Place
&lt;span style=&#34;color:#666&#34;&gt;500&lt;/span&gt;,424,160312.42,Chevrolet,Suburban &lt;span style=&#34;color:#666&#34;&gt;1500&lt;/span&gt;,London,Predovic LLC,2 Sundown Drive&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_side_bar_schemas_in_action&#34;&gt;Side-bar: Schemas in action&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So we&amp;#8217;ve read some CSV data into Kafka. That&amp;#8217;s not the end of its journey. It&amp;#8217;s going to be used for something! Let&amp;#8217;s do that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s &lt;a href=&#34;https://ksqldb.io/quickstart.html&#34;&gt;ksqlDB&lt;/a&gt;, in which we declare the orders topic we wrote to with a schema as a stream:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM ORDERS_02 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;orders_spooldir_02&amp;#39;&lt;/span&gt;,VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;AVRO&amp;#39;&lt;/span&gt;);

 Message
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; Stream created
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;----------------&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Having done that—and because there&amp;#8217;s a schema that was created at ingestion time—we can see all of the fields available to us:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DESCRIBE&lt;/span&gt; ORDERS_02;

Name                 : ORDERS_02
 Field            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Type&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; ROWKEY           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)  (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;key&lt;/span&gt;)
 ORDER_ID         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;INTEGER&lt;/span&gt;
 CUSTOMER_ID      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;INTEGER&lt;/span&gt;
 ORDER_TOTAL_USD  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; DOUBLE
 MAKE             &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 MODEL            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 DELIVERY_CITY    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 DELIVERY_COMPANY &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
 DELIVERY_ADDRESS &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;VARCHAR&lt;/span&gt;(STRING)
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;-------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;For&lt;/span&gt; runtime &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;statistics&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;and&lt;/span&gt; query details run: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;DESCRIBE&lt;/span&gt; EXTENDED &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;Stream,&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Table&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;;
ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and run queries against the data that&amp;#8217;s in Kafka:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; DELIVERY_CITY, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; ORDER_COUNT, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;MAX&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CAST&lt;/span&gt;(ORDER_TOTAL_USD &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;DECIMAL&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;))) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;AS&lt;/span&gt; BIGGEST_ORDER_USD &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;FROM&lt;/span&gt; ORDERS_02 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;BY&lt;/span&gt; DELIVERY_CITY EMIT CHANGES;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------+-------------+---------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;DELIVERY_CITY  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;ORDER_COUNT  &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;BIGGEST_ORDER_USD    &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;---------------+-------------+---------------------+
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Bradford       &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;189924&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;47&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Edinburgh      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;199502&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;66&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Bristol        &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;213830&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;Sheffield      &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;74&lt;/span&gt;           &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;216233&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;98&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;London         &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;160&lt;/span&gt;          &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;219736&lt;/span&gt;.&lt;span style=&#34;color:#666&#34;&gt;06&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What about our data that we just ingested into a different topic as straight-up CSV? Because, like, schemas aren&amp;#8217;t important?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ksql&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; STREAM ORDERS_03 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;WITH&lt;/span&gt; (KAFKA_TOPIC&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;orders_spooldir_03&amp;#39;&lt;/span&gt;,VALUE_FORMAT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;DELIMITED&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;No&lt;/span&gt; columns supplied.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Yeah, no columns supplied. No schema, no bueno. If you want to work with the data, whether to query in SQL, stream to a data lake, or do anything else with—at some point you&amp;#8217;re going to have to declare that schema. Hence why CSV, as a schemaless-serialisation method, is a bad way to exchange data between systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you really want to use your CSV data in ksqlDB, you can, you just need to enter the schema—which is error prone and tedious. You enter it each time to use the data, every other consumer of the data enters it each time too. Declaring it once at ingest and it being available for all to use makes a lot more sense.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_regex_and_json&#34;&gt;Regex and JSON&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you&amp;#8217;re using the REST API to submit configuration you might hit up against errors sending regex values within the JSON. For example, if you want to set &lt;code&gt;input.file.pattern&lt;/code&gt; to &lt;code&gt;.*\.csv&lt;/code&gt; and you put that in your JSON literally:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;input.file.pattern&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;.*\.csv&amp;#34;&lt;/span&gt;,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You&amp;#8217;ll get this error back if you submit it as inline data with &lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;com.fasterxml.jackson.core.JsonParseException: Unrecognized character escape &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;code &lt;span style=&#34;color:#666&#34;&gt;46&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;                                                    at &lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;Source: &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;org.glassfish.jersey.message.internal.ReaderInterceptorExecutor&lt;span style=&#34;color:#19177c&#34;&gt;$UnCloseableInputStream&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;; line: &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;, column: &lt;span style=&#34;color:#666&#34;&gt;36&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;THe solution is to escape the escape character (the backslash):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;input.file.pattern&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;.*\\.csv&amp;#34;&lt;/span&gt;,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_streaming_csv_data_from_kafka_to_a_database_or_anywhere_else&#34;&gt;Streaming CSV data from Kafka to a database (or anywhere else…)&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Since you&amp;#8217;ve got a schema to the data, you can easily sink it to a database, such as Postgres:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -X PUT http://localhost:8083/connectors/sink-postgres-orders-00/config &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -H &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    -d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connector.class&amp;#34;: &amp;#34;io.confluent.connect.jdbc.JdbcSinkConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connection.url&amp;#34;: &amp;#34;jdbc:postgresql://postgres:5432/&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connection.user&amp;#34;: &amp;#34;postgres&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;connection.password&amp;#34;: &amp;#34;postgres&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;tasks.max&amp;#34;: &amp;#34;1&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;topics&amp;#34;: &amp;#34;orders_spooldir_02&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;auto.create&amp;#34;: &amp;#34;true&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;auto.evolve&amp;#34;:&amp;#34;true&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;pk.mode&amp;#34;:&amp;#34;record_value&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;pk.fields&amp;#34;:&amp;#34;order_id&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;insert.mode&amp;#34;: &amp;#34;upsert&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        &amp;#34;table.name.format&amp;#34;:&amp;#34;orders&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
This &lt;strong&gt;only&lt;/strong&gt; works if you have a schema in your data. See &lt;a href=&#34;https://rmoff.dev/jdbc-sink-schemas&#34;&gt;here&lt;/a&gt; to understand why and how to work with this requirement.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#19177c&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# \dt&lt;/span&gt;
         List of relations
 Schema |  Name  | Type  |  Owner
--------+--------+-------+----------
 public | orders | table | postgres
&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; row&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#19177c&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# \d orders;&lt;/span&gt;
                    Table &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;public.orders&amp;#34;&lt;/span&gt;
      Column      |  Type   | Collation | Nullable | Default
------------------+---------+-----------+----------+---------
 order_id         | integer |           | not null |
 customer_id      | integer |           |          |
 order_total_usd  | real    |           |          |
 make             | text    |           |          |
 model            | text    |           |          |
 delivery_city    | text    |           |          |
 delivery_company | text    |           |          |
 delivery_address | text    |           |          |
Indexes:
    &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;orders_pkey&amp;#34;&lt;/span&gt; PRIMARY KEY, btree &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;order_id&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#19177c&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;# SELECT * FROM orders FETCH FIRST 10 ROWS ONLY;&lt;/span&gt;
 order_id | customer_id | order_total_usd |    make    |     model      | delivery_city |     delivery_company     |     delivery_address
----------+-------------+-----------------+------------+----------------+---------------+--------------------------+--------------------------
        &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;535&lt;/span&gt; |       &lt;span style=&#34;color:#666&#34;&gt;190899&lt;/span&gt;.73 | Dodge      | Ram Wagon B350 | Sheffield     | DuBuque LLC              | &lt;span style=&#34;color:#666&#34;&gt;2810&lt;/span&gt; Northland Avenue
        &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;671&lt;/span&gt; |        &lt;span style=&#34;color:#666&#34;&gt;33245&lt;/span&gt;.53 | Volkswagen | Cabriolet      | Edinburgh     | Bechtelar-VonRueden      | &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; Macpherson Crossing
        &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;695&lt;/span&gt; |        &lt;span style=&#34;color:#666&#34;&gt;155664&lt;/span&gt;.9 | Toyota     | Avalon         | Brighton      | Jacobs, Ebert and Dooley | &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; Loomis Crossing
        &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;366&lt;/span&gt; |        &lt;span style=&#34;color:#666&#34;&gt;149012&lt;/span&gt;.9 | Hyundai    | Santa Fe       | Leeds         | Kiehn Group              | &lt;span style=&#34;color:#666&#34;&gt;538&lt;/span&gt; Burning Wood Alley
        &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;175&lt;/span&gt; |        &lt;span style=&#34;color:#666&#34;&gt;63274&lt;/span&gt;.18 | Kia        | Sportage       | Leeds         | Miller-Hudson            | &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; Kennedy Court
        &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; |          &lt;span style=&#34;color:#666&#34;&gt;37&lt;/span&gt; |        &lt;span style=&#34;color:#666&#34;&gt;97790&lt;/span&gt;.04 | BMW        | &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; Series       | Bristol       | Price Group              | &lt;span style=&#34;color:#666&#34;&gt;21611&lt;/span&gt; Morning Trail
        &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;644&lt;/span&gt; |        &lt;span style=&#34;color:#666&#34;&gt;76240&lt;/span&gt;.84 | Mazda      | MPV            | Leeds         | Kihn and Sons            | &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; Susan Street
        &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;973&lt;/span&gt; |       &lt;span style=&#34;color:#666&#34;&gt;216233&lt;/span&gt;.98 | Hyundai    | Elantra        | Sheffield     | Feeney, Howe and Koss    | &lt;span style=&#34;color:#666&#34;&gt;07671&lt;/span&gt; Hazelcrest Terrace
        &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;463&lt;/span&gt; |        &lt;span style=&#34;color:#666&#34;&gt;162589&lt;/span&gt;.1 | Chrysler   | Grand Voyager  | York          | Fay, Murazik and Schumm  | &lt;span style=&#34;color:#666&#34;&gt;42080&lt;/span&gt; Pawling Circle
       &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; |         &lt;span style=&#34;color:#666&#34;&gt;863&lt;/span&gt; |       &lt;span style=&#34;color:#666&#34;&gt;111208&lt;/span&gt;.24 | Ford       | Laser          | Leeds         | Boehm, Mohr and Doyle    | &lt;span style=&#34;color:#666&#34;&gt;0919&lt;/span&gt; International Trail
&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; rows&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To learn more about writing data from Kafka to a database see &lt;a href=&#34;https://rmoff.dev/kafka-jdbc-video&#34;&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/b-3qN_tlYR4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For more tutorials on Kafka Connect see &lt;a href=&#34;https://www.youtube.com/playlist?list=PL5T99fPsK7ppB_AbZhBhTyKHtHWZLWIJ8&#34;&gt;🎥 this playlist&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_try_it_out&#34;&gt;Try it out!&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All &lt;a href=&#34;https://github.com/confluentinc/demo-scene/tree/master/csv-to-kafka&#34;&gt;the code for this article is on GitHub&lt;/a&gt;, and you just need Docker and Docker Compose to spin it up and give it a try. The commandline examples quoted below are based on the Docker environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To spin it up, clone the repository, change to the correct folder, and launch the stack:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone https://github.com/confluentinc/demo-scene.git
&lt;span style=&#34;color:#008000&#34;&gt;cd&lt;/span&gt; csv-to-kafka
docker-compose up -d&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Wait for Kafka Connect to launch and then off you go!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;bash -c &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;echo -e &amp;#34;\n\n=============\nWaiting for Kafka Connect to start listening on localhost ⏳\n=============\n&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;while [ $(curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors) -ne 200 ] ; do
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;  echo -e &amp;#34;\t&amp;#34; $(date) &amp;#34; Kafka Connect listener HTTP state: &amp;#34; $(curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors) &amp;#34; (waiting for 200)&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;  sleep 5
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;done
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;echo -e $(date) &amp;#34;\n\n--------------\n\o/ Kafka Connect is ready! Listener HTTP state: &amp;#34; $(curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors) &amp;#34;\n--------------\n&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The examples in this article are based on the &lt;code&gt;data&lt;/code&gt; folder mapped to &lt;code&gt;/data&lt;/code&gt; on the Kafka Connect worker.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_video_tutorial&#34;&gt;Video Tutorial&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/N1pseW9waNI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>How to list and create Kafka topics using the REST Proxy API</title>
      <link>https://rmoff.net/2020/06/05/how-to-list-and-create-kafka-topics-using-the-rest-proxy-api/</link>
      <pubDate>2020-06-05</pubDate>
      
      <guid>https://rmoff.net/2020/06/05/how-to-list-and-create-kafka-topics-using-the-rest-proxy-api/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_4737.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In v5.5 of Confluent Platform the REST Proxy added new Admin API capabilities, including functionality to list, and create, topics on your cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check out the &lt;a href=&#34;https://docs.confluent.io/current/kafka-rest/api.html#crest-api-v3&#34;&gt;docs here&lt;/a&gt; and &lt;a href=&#34;https://www.confluent.io/download/#confluent-platform&#34;&gt;download Confluent Platform&lt;/a&gt; here. The REST proxy is &lt;a href=&#34;https://www.confluent.io/confluent-community-license-faq/&#34;&gt;Confluent Community Licenced&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To start with, you need the cluster ID:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;&#34;&gt;➜&lt;/span&gt; curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X GET &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;localhost:8082/v3/clusters&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.data[0].attributes.cluster_id&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;rgfnzs2RS3O65A7VSpNatg&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can get this along with the direct URL for the topics endpoint like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;&#34;&gt;➜&lt;/span&gt; curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X GET &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;localhost:8082/v3/clusters&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt; jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.data[0].relationships.topics.links.related&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;http://localhost:8082/v3/clusters/rgfnzs2RS3O65A7VSpNatg/topics&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Using that topics endpoint URL you can list topics:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;&#34;&gt;➜&lt;/span&gt; curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X GET &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;http://localhost:8082/v3/clusters/rgfnzs2RS3O65A7VSpNatg/topics&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;|&lt;/span&gt;jq &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;.data[].attributes.topic_name&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;__confluent.support.metrics&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;_confluent-ksql-confluent_rmoff_01_command_topic&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;_kafka-connect-01-configs&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;_kafka-connect-01-offsets&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;_kafka-connect-01-status&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;_schemas&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;confluent_rmoff_01ksql_processing_log&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And you can create topics too:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;&#34;&gt;➜&lt;/span&gt; curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X POST &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;http://localhost:8082/v3/clusters/rgfnzs2RS3O65A7VSpNatg/topics&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;header &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Content-Type: application/vnd.api+json&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;data&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;raw &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;  &amp;#34;data&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    &amp;#34;attributes&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;      &amp;#34;topic_name&amp;#34;: &amp;#34;rmoff_topic03&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;      &amp;#34;partitions_count&amp;#34;: 12,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;      &amp;#34;replication_factor&amp;#34;: 1
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;    }
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;  }
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>