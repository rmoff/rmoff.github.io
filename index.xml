<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rmoff&#39;s random ramblings</title>
    <link>https://rmoff.net/</link>
    <description>Recent content on rmoff&#39;s random ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>2020-07-03</lastBuildDate>
    
        <atom:link href="https://rmoff.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why JSON isn&#39;t the same as JSON Schema (Viewing Kafka messages bytes as hex)</title>
      <link>https://rmoff.net/2020/07/03/why-json-isnt-the-same-as-json-schema-viewing-kafka-messages-bytes-as-hex/</link>
      <pubDate>2020-07-03</pubDate>
      
      <guid>https://rmoff.net/2020/07/03/why-json-isnt-the-same-as-json-schema-viewing-kafka-messages-bytes-as-hex/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/05/IMG_4466.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;ve been playing around with the new SerDes (serialisers/deserialisers) that shipped with Confluent Platform 5.5 - &lt;a href=&#34;https://docs.confluent.io/current/schema-registry/serdes-develop/index.html&#34;&gt;Protobuf, and JSON Schema&lt;/a&gt; (these were added to the existing support for Avro). The serialisers (and associated &lt;a href=&#34;https://docs.confluent.io/current/schema-registry/connect.html&#34;&gt;Kafka Connect converters&lt;/a&gt;) take a payload and serialise it into bytes for sending to Kafka, and I was interested in what those bytes look like. For that I used my favourite Kafka swiss-army knife: kafkacat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s a message serialised to JSON Schema:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kafkacat -b kafka:29092 -t pageviews-js -C -c1

&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;viewtime&amp;#34;&lt;/span&gt;:1,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;userid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;User_9&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pageid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Page_57&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Looks just like a message from another topic serialised as regular JSON, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kafkacat -b kafka:29092 -t pageviews-j -C -c1

&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;viewtime&amp;#34;&lt;/span&gt;:1,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;userid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;User_3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pageid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Page_77&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Except it&amp;#8217;s not! We can confirm this by looking at the raw bytes on the message itself by piping the output from kafkacat into hexdump.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Check out these magical, pesky, bytes on the front of the JSON Schema-encoded message, and note that they&amp;#8217;re not there on the JSON message:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kafkacat -b kafka:29092 -t pageviews-jsonschema -C -c1 | hexdump -C

&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;00000000&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;02&lt;/span&gt; 7b &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;76&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; 6d &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;  |.....&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;viewtime&amp;#34;&lt;/span&gt;|
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;00000010&lt;/span&gt;  3a &lt;span style=&#34;color:#666&#34;&gt;31&lt;/span&gt; 2c &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;75&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;72&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; 3a &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt;  |:1,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;userid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Use|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;00000020  72 5f 39 22 2c 22 70 61  67 65 69 64 22 3a 22 50  |r_9&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pageid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;P|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;00000030  61 67 65 5f 35 37 22 7d  0a                       |age_57&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;.|
&lt;span style=&#34;color:#666&#34;&gt;00000039&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kafkacat -b kafka:29092 -t pageviews-json -C -c1 | hexdump -C

&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;00000000&lt;/span&gt;  7b &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt;  6d &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; 3a &lt;span style=&#34;color:#666&#34;&gt;31&lt;/span&gt; 2c &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;75&lt;/span&gt;  |&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;viewtime&amp;#34;&lt;/span&gt;:1,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;u|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;00000010  73 65 72 69 64 22 3a 22  55 73 65 72 5f 33 22 2c  |serid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;User_3&amp;#34;&lt;/span&gt;,|
&lt;span style=&#34;color:#666&#34;&gt;00000020&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt;  3a &lt;span style=&#34;color:#666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; 5f &lt;span style=&#34;color:#666&#34;&gt;37&lt;/span&gt;  |&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pageid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Page_7|
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;00000030  37 22 7d 0a                                       |7&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;.|
&lt;span style=&#34;color:#666&#34;&gt;00000034&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The five extra bytes (&lt;code&gt;00 00 00 00 02&lt;/code&gt;) are defined in the &lt;a href=&#34;https://docs.confluent.io/current/schema-registry/serdes-develop/index.html#wire-format&#34;&gt;wire format&lt;/a&gt; used by the Schema Registry serdes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Byte 0&lt;/strong&gt;: Magic Byte - Confluent serialization format version number; currently always 0.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bytes 1-4&lt;/strong&gt;: 4-byte schema ID as returned by Schema Registry.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_json_json_schema&#34;&gt;JSON != JSON Schema&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They may sound similar, but the above analysis shows that you can&amp;#8217;t just interchange &lt;code&gt;org.apache.kafka.connect.json.JsonConverter&lt;/code&gt; and &lt;code&gt;io.confluent.connect.json.JsonSchemaConverter&lt;/code&gt; - they are writing and expecting to read data with different wire formats. If you try to read data that&amp;#8217;s been serialised with one using the other, it&amp;#8217;s gonna break.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s an example of writing data in the two formats in Kafka Connect:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X PUT &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//localhost:8083/connectors/source-datagen-jsonschema-01/config \
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;connector.class&amp;#34;: &amp;#34;io.confluent.kafka.connect.datagen.DatagenConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;key.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter&amp;#34;: &amp;#34;io.confluent.connect.json.JsonSchemaConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter.schema.registry.url&amp;#34;: &amp;#34;http://schema-registry:8081&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;quickstart&amp;#34;: &amp;#34;ratings&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;iterations&amp;#34;:1,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;kafka.topic&amp;#34;: &amp;#34;test-jsonschema&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;tasks.max&amp;#34;: 1
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        }&amp;#39;&lt;/span&gt;

curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X PUT &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//localhost:8083/connectors/source-datagen-json-01/config \
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;connector.class&amp;#34;: &amp;#34;io.confluent.kafka.connect.datagen.DatagenConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;key.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.json.JsonConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;quickstart&amp;#34;: &amp;#34;ratings&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;iterations&amp;#34;:1,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;kafka.topic&amp;#34;: &amp;#34;test-json&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;tasks.max&amp;#34;: 1
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;        }&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;From this we have two topics; &lt;code&gt;test-json&lt;/code&gt; and &lt;code&gt;test-jsonschema&lt;/code&gt;. Let&amp;#8217;s read the contents of these using a Kafka Connect sink with the correct converters:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X PUT &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//localhost:8083/connectors/sink-file-jsonschema-as-jsonschema/config \
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;connector.class&amp;#34;: &amp;#34;org.apache.kafka.connect.file.FileStreamSinkConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;key.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter&amp;#34;: &amp;#34;io.confluent.connect.json.JsonSchemaConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter.schema.registry.url&amp;#34;: &amp;#34;http://schema-registry:8081&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;tasks.max&amp;#34;: 1,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;file&amp;#34;: &amp;#34;/jsonschema-as-jsonschema.txt&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;topics&amp;#34;: &amp;#34;test-jsonschema&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;}&amp;#39;&lt;/span&gt;

curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X PUT &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//localhost:8083/connectors/sink-file-json-as-json/config \
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;connector.class&amp;#34;: &amp;#34;org.apache.kafka.connect.file.FileStreamSinkConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;key.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.json.JsonConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;tasks.max&amp;#34;: 1,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;file&amp;#34;: &amp;#34;/json-as-json.txt&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;topics&amp;#34;: &amp;#34;test-json&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As expected, this works. But what about if we mix it up, and try to read JSON data using the JSON Schema deserialiser (through the &lt;code&gt;io.confluent.connect.json.JsonSchemaConverter&lt;/code&gt; converter)?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X PUT &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//localhost:8083/connectors/sink-file-json-as-jsonschema/config \
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;connector.class&amp;#34;: &amp;#34;org.apache.kafka.connect.file.FileStreamSinkConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;key.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter&amp;#34;: &amp;#34;io.confluent.connect.json.JsonSchemaConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter.schema.registry.url&amp;#34;: &amp;#34;http://schema-registry:8081&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;tasks.max&amp;#34;: 1,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;file&amp;#34;: &amp;#34;/json-as-jsonschema.txt&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;topics&amp;#34;: &amp;#34;test-json&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;⚠️ It fails!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;org.apache.kafka.connect.errors.DataException: Converting byte&lt;span style=&#34;color:#666&#34;&gt;[]&lt;/span&gt; to Kafka Connect data failed due to serialization error:
        at io.confluent.connect.json.JsonSchemaConverter.toConnectData&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;JsonSchemaConverter.java:111&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        at org.apache.kafka.connect.storage.Converter.toConnectData&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;Converter.java:87&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        at org.apache.kafka.connect.runtime.WorkerSinkTask.lambda&lt;span style=&#34;color:#19177c&#34;&gt;$convertAndTransformRecord$2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;WorkerSinkTask.java:492&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        at org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperator.execAndRetry&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;RetryWithToleranceOperator.java:128&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        at org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperator.execAndHandleError&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;RetryWithToleranceOperator.java:162&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        ... &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; more
Caused by: org.apache.kafka.common.errors.SerializationException: Error deserializing JSON message &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; id -1
Caused by: org.apache.kafka.common.errors.SerializationException: Unknown magic byte!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What&amp;#8217;s this mean? Well &lt;code&gt;Unknown magic byte!&lt;/code&gt; is the deserialiser&amp;#8217;s quirky way of say that the bytes on the front of the message that JSON Schema has (which we saw above) aren&amp;#8217;t there. Why aren&amp;#8217;t they there? Because it&amp;#8217;s just straight-up JSON that we&amp;#8217;re trying to read - and so we should be use the JSON deserialiser (provided for Kafka Connect by the &lt;code&gt;org.apache.kafka.connect.json.JsonConverter&lt;/code&gt; converter).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Actual (JSON)&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;00000000  7b 22 76 69 65 77 74 69  6d 65 22 3a 31 2c 22 75  |{&#34;viewtime&#34;:1,&#34;u|&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expected (JSON Schema)&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;00000000  00 00 00 00 02 7b 22 76  69 65 77 74 69 6d 65 22  |&amp;#8230;&amp;#8203;..{&#34;viewtime&#34;|&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The final permutation here is trying to read JSON Schema messages using the JSON deserialiser:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;curl &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;X PUT &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;H  &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Content-Type:application/json&amp;#34;&lt;/span&gt; http&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//localhost:8083/connectors/sink-file-jsonschema-as-json/config \
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;connector.class&amp;#34;: &amp;#34;org.apache.kafka.connect.file.FileStreamSinkConnector&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;key.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.storage.StringConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;value.converter&amp;#34;: &amp;#34;org.apache.kafka.connect.json.JsonConverter&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;tasks.max&amp;#34;: 1,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;file&amp;#34;: &amp;#34;/jsonschema-as-json.txt&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;            &amp;#34;topics&amp;#34;: &amp;#34;test-jsonschema&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As we might expect, this also fails&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;org.apache.kafka.connect.errors.DataException: Converting byte&lt;span style=&#34;color:#666&#34;&gt;[]&lt;/span&gt; to Kafka Connect data failed due to serialization error:
        at org.apache.kafka.connect.json.JsonConverter.toConnectData&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;JsonConverter.java:355&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        at org.apache.kafka.connect.storage.Converter.toConnectData&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;Converter.java:87&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;                                                               
        at org.apache.kafka.connect.runtime.WorkerSinkTask.lambda&lt;span style=&#34;color:#19177c&#34;&gt;$convertAndTransformRecord$2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;WorkerSinkTask.java:492&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;                               
        at org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperator.execAndRetry&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;RetryWithToleranceOperator.java:128&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
        at org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperator.execAndHandleError&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;RetryWithToleranceOperator.java:162&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;                
        ... &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; more                                                                                                                          
Caused by: org.apache.kafka.common.errors.SerializationException: java.io.CharConversionException: Invalid UTF-32 character 0x27a2272 &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;above 0x0010ffff&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; at char &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#1, byte #7)&lt;/span&gt;
Caused by: java.io.CharConversionException: Invalid UTF-32 character 0x27a2272 &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;above 0x0010ffff&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; at char &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;#1, byte #7)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here the JSON deserialiser is trying to read JSON, but hitting the bytes that the JSON Schema serialiser writes to the front of each message, which are not valid JSON (&lt;code&gt;Invalid UTF-32 character 0x27a2272 (above 0x0010ffff) at char #1, byte #7&lt;/code&gt;). If you&amp;#8217;ve serialised your data using the Confluent Schema Registry JSON Schema serialiser, you&amp;#8217;ve gotta deserialise it with that too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Actual (JSON Schema)&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;00000000  00 00 00 00 02 7b 22 76  69 65 77 74 69 6d 65 22  |&amp;#8230;&amp;#8203;..{&#34;viewtime&#34;|&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expected (JSON)&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;00000000  7b 22 76 69 65 77 74 69  6d 65 22 3a 31 2c 22 75  |{&#34;viewtime&#34;:1,&#34;u|&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E09 - Concurrency (Channels, Goroutines)</title>
      <link>https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/</link>
      <pubDate>2020-07-02</pubDate>
      
      <guid>https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e09-concurrency-channels-goroutines/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://tour.golang.org/concurrency/1&#34;&gt;A Tour of Go : Goroutines&lt;/a&gt; was OK but as with some previous material I headed over to &lt;a href=&#34;https://gobyexample.com/goroutines&#34;&gt;Go by example&lt;/a&gt; for clearer explanations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://tour.golang.org/concurrency/5&#34;&gt;A Tour of Go : Select&lt;/a&gt; definitely needed a bit more explanation for me. I&amp;#8217;ve annotated it with some inline comments&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;fibonacci&lt;/span&gt;(c, quit &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) {
	x, y &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Loop forever
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;select&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Try to write the value of x to the channel c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; c &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; x:
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;            &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// If that works then do the fibonacci thing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;			x, y = y, x&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;y
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Try to read from the quit channel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;quit:
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;            &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// If there&amp;#39;s a value to be read then exit out of the function
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;quit&amp;#34;&lt;/span&gt;)
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt;
		}
	}
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	c &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)
	quit &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Spin off a Goroutine
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt;() {
        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Do this ten times
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;            &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Print the next value from the channel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;c)
		}
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Once we&amp;#39;ve done it ten times, put a value onto the quit channel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// which will cause the fibonacci function to return.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		quit &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
	}()
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Run the function, passing in the two channels
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#00f&#34;&gt;fibonacci&lt;/span&gt;(c, quit)
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As you might expect, if you move the call to &lt;code&gt;fibonacci&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; the Goroutine then it blocks, since the function will be waiting forever to put a value onto the c channel or read from the quit channel. This causes the program to error:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;fatal error: all goroutines are asleep - deadlock!&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;ve been using VSCode to edit and run some of the Go exercises and found the step-into debugger useful for following some of the logic here. As you&amp;#8217;d expect with a debugger, you can watch the value of variables as the code execution progresses, and do stuff like watch the contents of a channel. Here&amp;#8217;s an example from where I&amp;#8217;ve modified the channel to give it a buffer&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;c &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/select01.png&#34; alt=&#34;select01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_default_selection_time&#34;&gt;Default Selection / &lt;code&gt;time&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/concurrency/6&#34;&gt;A Tour of Go : Default Selection&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For me, this made the mistake of illustrating a new concept (&lt;code&gt;default&lt;/code&gt;) with code that relied on other as-yet unexplained concepts. The problem with this is that you hit &lt;code&gt;Run&lt;/code&gt; and see what it does and it seems to make sense, but in grokking the lines of code it&amp;#8217;s not entirely clear.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We&amp;#8217;ve been shown the &lt;code&gt;select&lt;/code&gt; being used to choose which of the &lt;code&gt;case&lt;/code&gt; statements can be run with the example of channels providing input - but in this code there&amp;#8217;s no apparent channel declared:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	tick &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; time.&lt;span style=&#34;color:#00f&#34;&gt;Tick&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; time.Millisecond)
	boom &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; time.&lt;span style=&#34;color:#00f&#34;&gt;After&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;500&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; time.Millisecond)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;select&lt;/span&gt; {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;tick:
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;tick.&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;boom:
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;BOOM!&amp;#34;&lt;/span&gt;)
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt;
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;:
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;    .&amp;#34;&lt;/span&gt;)
			time.&lt;span style=&#34;color:#00f&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; time.Millisecond)
		}
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Maybe this is the Tour&amp;#8217;s way to prod people into RTFM ;) Prompted by my puzzlement I went and looked up the &lt;a href=&#34;https://golang.org/pkg/time&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; package and &lt;a href=&#34;https://golang.org/pkg/time/#Tick&#34;&gt;&lt;code&gt;Tick&lt;/code&gt;&lt;/a&gt; function, which turns out to actually &lt;a href=&#34;https://golang.org/pkg/time/#Ticker&#34;&gt; offer a channel&lt;/a&gt; - so this now makes sense.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Every 100 ms a &lt;code&gt;Tick&lt;/code&gt; is sent to the channel, in between the &lt;code&gt;default&lt;/code&gt; condition kicks in and sleeps for 50ms, and after 500ms the final condition is met and returns.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_exercise_equivalent_binary_trees&#34;&gt;Exercise: Equivalent Binary Trees&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/concurrency/7&#34;&gt;A Tour of Go : Exercise: Equivalent Binary Trees&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are times when I feel the &lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;absence of a formal CompSci background&lt;/a&gt;…and this is one of them :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I found a &lt;a href=&#34;https://www.youtube.com/watch?time_continue=3205&amp;amp;v=9HWBOHQRZIU&#34;&gt;useful video&lt;/a&gt; which explains Binary Trees in a good way (also &lt;a href=&#34;https://www.youtube.com/watch?v=mFptHjTT3l8&#34;&gt;this one&lt;/a&gt;, both linked to &lt;a href=&#34;https://study.cs50.net/trees&#34;&gt;from here&lt;/a&gt;), which then set me up a bit more confidently to approach this exercise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To start with I took the skeleton that the exercise provides and brought it into VSCode - it does useful things like code completion:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/vscode01.png&#34; alt=&#34;vscode01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First up I commented out the &lt;code&gt;Same&lt;/code&gt; function, set up a simple &lt;code&gt;for&lt;/code&gt; loop in &lt;code&gt;main&lt;/code&gt; and a debug print in the &lt;code&gt;Walk&lt;/code&gt; function, just to see what was going on&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;golang.org/x/tour/tree&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Walk walks the tree t sending all values
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// from the tree to the channel ch.
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;tree.Tree, ch &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Walk: %v\n&amp;#34;&lt;/span&gt;, t.Value)
&lt;/span&gt;}

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// // Same determines whether the trees
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// // t1 and t2 contain the same values.
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// func Same(t1, t2 *tree.Tree) bool
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	c &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(tree.&lt;span style=&#34;color:#00f&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;), c)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;select&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;c:
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(c)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	}
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You get to see the first value of the tree node printed by the function, and then a deadlock from the &lt;code&gt;select&lt;/code&gt; because nothing&amp;#8217;s being written to the channel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;Walk: &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;
fatal &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;: all goroutines are asleep &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; deadlock!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If we add a &lt;code&gt;default&lt;/code&gt; to the &lt;code&gt;select&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	c &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(tree.&lt;span style=&#34;color:#00f&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;), c)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;select&lt;/span&gt; {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;c:
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(c)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;:
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;default: %v\n&amp;#34;&lt;/span&gt;, i)
		}
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;then we get this&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
Walk: &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What about passing the value back on the channel? You may notice the, &lt;em&gt;ahem&lt;/em&gt;, &#39;deliberate&#39; mistake that I made in the above code, where I did this&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;c:
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Tree value: %v\n&amp;#34;&lt;/span&gt;, c)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If I put the value of the tree node on the channel in &lt;code&gt;Walk&lt;/code&gt; it should get printed, right? Well…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;function Walk: &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;0xc0000200c0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Huh? What&amp;#8217;s that &lt;code&gt;0xc0000200c0&lt;/code&gt;? It&amp;#8217;s the &lt;strong&gt;channel&lt;/strong&gt; itself, not the value that&amp;#8217;s been passed into it. Instead we need:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;c:
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Tree value: %v\n&amp;#34;&lt;/span&gt;, x)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;function Walk: &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now let&amp;#8217;s do some actual walking! As the exercise tells us, the tree is a struct:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; Tree &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
    Left  &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;Tree
    Value &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;
    Right &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;Tree
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;so as well as writing the &lt;code&gt;Value&lt;/code&gt; to the channel, we will call the &lt;code&gt;Walk&lt;/code&gt; function recursively on the child nodes of the current node—if there are any:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;tree.Tree, ch &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) {
	ch &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; t.Value
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; t.Left &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t.Left, ch)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; t.Right &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t.Right, ch)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	}
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This successfully walks the tree:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;Tree value: &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;
Tree value: &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What I&amp;#8217;m not clear about from the text is if this list should be strictly in order. Having solutions linked to from the Tour exercises definitely would be useful.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s carry on for now and look at the &lt;code&gt;Same&lt;/code&gt; function. I got stuck on this one. Here&amp;#8217;s as far as I got to start with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Same&lt;/span&gt;(t1, t2 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;tree.Tree) &lt;span style=&#34;color:#b00040&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Create a channel into which each tree&amp;#39;s values will be written
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	c1 &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)
	c2 &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Declare two variables that will be used to collate the
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// channel values
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; x1 []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; x2 []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Walk the two trees
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t1, c1)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t2, c2)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Receive the values
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
		x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;c1
		x1 = &lt;span style=&#34;color:#008000&#34;&gt;append&lt;/span&gt;(x1, x)
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
		x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;c2
		x2 = &lt;span style=&#34;color:#008000&#34;&gt;append&lt;/span&gt;(x2, x)
	}

	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\nx1 is %v\n&amp;#34;&lt;/span&gt;, x1)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\nx2 is %v\n&amp;#34;&lt;/span&gt;, x2)

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Not even doing the comparison yet
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;x1 is [&lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;]

x2 is [&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;From this I need to return &lt;code&gt;true&lt;/code&gt; if the two trees store the same values - which they do, but am I supposed to be sorting these results here? Flailing around somewhat, so off to Google to see what others have done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Some time later…&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So, looking at the problem again, let&amp;#8217;s remind ourselves (me) what the tree can look like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://tour.golang.org/content/img/tree.png&#34; alt=&#34;tree&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;Figure 1. &lt;em&gt;Binary Sorted Tree illustration from &lt;a href=&#34;https://tour.golang.org/concurrency/7&#34; class=&#34;bare&#34;&gt;https://tour.golang.org/concurrency/7&lt;/a&gt;&lt;/em&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Since it is &lt;em&gt;sorted&lt;/em&gt;, we know that the left child will always be the lower value than the right. So if we want to return the values in order, we can&amp;#8217;t take the simple approach that I tried above of simply dumping the values as we encountered them on the traversal of the tree from the &lt;strong&gt;top-down&lt;/strong&gt;. Instead we need to traverse to the bottom down the left-hand side and then make our way back up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I found these &lt;a href=&#34;https://medium.com/@cooldeep25/solution-to-a-tour-of-go-exercise-equivalent-binary-trees-d1fff8d3cb6f&#34;&gt;two&lt;/a&gt; &lt;a href=&#34;https://gist.github.com/kaipakartik/8120855&#34;&gt;pages&lt;/a&gt; a useful resource for explaining this clearly and providing code to &lt;del&gt;steal&lt;/del&gt; &lt;em&gt;inspire me.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Both the solutions I found implemented a second function for walking, which now makes sense. It also makes clear how to use &lt;code&gt;close&lt;/code&gt; which I&amp;#8217;d been trying to fit in but couldn&amp;#8217;t figure out how to do so :) Here&amp;#8217;s the elegant solution from &lt;a href=&#34;https://gist.github.com/kaipakartik&#34;&gt;kaipakartik&lt;/a&gt; with my commented annotations&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;tree.Tree, ch &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Synchronously call the recursive function for the current node
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;WalkRecursive&lt;/span&gt;(t, ch)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Once we&amp;#39;ve processed every node, close the channel to indicate 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// that we&amp;#39;ve finished (and thus allow range to be used)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#008000&#34;&gt;close&lt;/span&gt;(ch)
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;WalkRecursive&lt;/span&gt;(t &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;tree.Tree, ch &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// If this node isn&amp;#39;t null
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; t &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Keep traversing, down the left-hand side of the tree
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;WalkRecursive&lt;/span&gt;(t.Left, ch)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Bearing in mind that this is a recursive function
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// we will eventually hit the bottom of the left-hand side
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// of the tree, and thus the above call to WalkRecursive will 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// return and we can put our node&amp;#39;s value onto the channel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        ch &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; t.Value
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Navigate any right-hand nodes too
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;WalkRecursive&lt;/span&gt;(t.Right, ch)
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;with this in place the &lt;code&gt;Walk&lt;/code&gt; function populates the channel in sequential order which thus results in:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	c &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(tree.&lt;span style=&#34;color:#00f&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;), c)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Tree value: &amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
		x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt;c
		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%v &amp;#34;&lt;/span&gt;, x)
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;Tree value: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;My existing &lt;code&gt;Same&lt;/code&gt; code was based on the idea of filling two slices with the results and then comparing the final result, but a much smarter way again comes from these &lt;a href=&#34;https://medium.com/@cooldeep25/solution-to-a-tour-of-go-exercise-equivalent-binary-trees-d1fff8d3cb6f&#34;&gt;two&lt;/a&gt; &lt;a href=&#34;https://gist.github.com/kaipakartik/8120855&#34;&gt;pages&lt;/a&gt;, in which the results are compared one by one, since as soon as they diverge we can declare them to not be the same. As above, here&amp;#8217;s &lt;a href=&#34;https://gist.github.com/kaipakartik&#34;&gt;kaipakartik&lt;/a&gt;&#39;s neat solution with my annotations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Same&lt;/span&gt;(t1, t2 &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;tree.Tree) &lt;span style=&#34;color:#b00040&#34;&gt;bool&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Each tree is read into separate channels
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    ch1, ch2 &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;), &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Asynchronously walk both trees into their
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// respective channels
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t1, ch1)
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Walk&lt;/span&gt;(t2, ch2)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Loop
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Read the next value from each channel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Note that these will block (what happens if the trees are different sizes and ch2 is empty?)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        n1, ok1 &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; ch1
        n2, ok2 &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;-&lt;/span&gt; ch2
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// If the values don&amp;#39;t match, or one channel is closed whilst the 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// other is not then we know they are not the same
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; ok1 &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; ok2 &lt;span style=&#34;color:#666&#34;&gt;||&lt;/span&gt; n1 &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; n2 {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Exit and return false
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;
        }
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// If the first channel has closed then break out of the loop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// I guess you could just `return true` here directly? 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; !ok1 {
        	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
    }
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This works:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\n-&amp;gt; Comparing trees with the same contents : %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;Same&lt;/span&gt;(tree.&lt;span style=&#34;color:#00f&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;), tree.&lt;span style=&#34;color:#00f&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)))
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\n-&amp;gt; Comparing trees with different contents: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;Same&lt;/span&gt;(tree.&lt;span style=&#34;color:#00f&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;), tree.&lt;span style=&#34;color:#00f&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&amp;gt; Comparing trees with the same contents : &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&amp;gt; Comparing trees with different contents: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E08 - Images</title>
      <link>https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e08-images/</link>
      <pubDate>2020-07-02</pubDate>
      
      <guid>https://rmoff.net/2020/07/02/learning-golang-some-rough-notes-s01e08-images/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/methods/25&#34;&gt;A Tour of Go : Exercise: Images&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is based on the Picture generator from the &lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/&#34;&gt;Slices exercise&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Pic&lt;/span&gt;(dx, dy &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) [][]&lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt; {
	p &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([][]&lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt;,dy)
	
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p {
		p[i] = &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt;,dx)
	}

	 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p {
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p[y] {
            p[y][x]=(&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(x)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(y))
        }
    }

	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; p
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/06/slice02.png&#34; alt=&#34;slice02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;this time it will return an implementation of &lt;code&gt;image.Image&lt;/code&gt; instead of a slice of data.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So we need to implement the &lt;a href=&#34;https://golang.org/pkg/image/#Image&#34;&gt;interfaces defined&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ColorModel&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Bounds&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;At&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s start off with one of these to see if we&amp;#8217;re on the right lines…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;image/color&amp;#34;&lt;/span&gt;
&lt;/span&gt;	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;golang.org/x/tour/pic&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; Image &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt;{}

&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;ColorModel&lt;/span&gt;() color.Model {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; color.RGBAModel
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;}
&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	m &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; Image{}
	pic.&lt;span style=&#34;color:#00f&#34;&gt;ShowImage&lt;/span&gt;(m)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This compiles (🙌) and fails (as we&amp;#8217;d expect) with something that may or may not be validating that we&amp;#8217;ve not screwed things up &lt;em&gt;yet&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;.&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;prog.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;: cannot use &lt;span style=&#34;color:#00f&#34;&gt;m&lt;/span&gt; (&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; Image) as &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; image.Image in argument to pic.ShowImage:
	Image does not implement image.&lt;span style=&#34;color:#00f&#34;&gt;Image&lt;/span&gt; (missing At method)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s add in the other fixed value, &lt;code&gt;Bounds&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;
&lt;/span&gt;	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;image/color&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;golang.org/x/tour/pic&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; Image &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt;{}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;ColorModel&lt;/span&gt;() color.Model {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; color.RGBAModel
}

&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;Bounds&lt;/span&gt;() image.Rectangle {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; image.&lt;span style=&#34;color:#00f&#34;&gt;Rect&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;256&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;256&lt;/span&gt;)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;}
&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	m &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; Image{}
	pic.&lt;span style=&#34;color:#00f&#34;&gt;ShowImage&lt;/span&gt;(m)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now the final part - &lt;code&gt;At&lt;/code&gt;. Building it up bit by bit, we know what the function definition should look like, based on the above pattern and the &lt;a href=&#34;https://golang.org/pkg/image/#Image&#34;&gt;interface definition&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;At&lt;/span&gt;(x,y &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) color.Color {&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The value returned by this function is the colour (yes, I said colo_u_r! 🇬🇧) at the given coordinates. In the picture we created earlier this was using the expression x*y to describe the strength of the bluescale to plot. The &lt;code&gt;Color&lt;/code&gt; type for the &lt;code&gt;RGBAModel&lt;/code&gt; we&amp;#8217;re using is + &lt;a href=&#34;https://golang.org/pkg/image/color/#RGBA&#34;&gt;&lt;code&gt;RGBA&lt;/code&gt;&lt;/a&gt;, which returns RGB plus alpha, so let&amp;#8217;s try this here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;image/color&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;golang.org/x/tour/pic&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; Image &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt;{}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;ColorModel&lt;/span&gt;() color.Model {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; color.RGBAModel
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;Bounds&lt;/span&gt;() image.Rectangle {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; image.&lt;span style=&#34;color:#00f&#34;&gt;Rect&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;256&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;256&lt;/span&gt;)
}

&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;At&lt;/span&gt;(x,y &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) color.Color {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; r,g,b,a &lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt; = &lt;span style=&#34;color:#666&#34;&gt;25&lt;/span&gt; ,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;    b=&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(x)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(y)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; color.RGBA{r,g,b,a}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;}
&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	m &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; Image{}
	pic.&lt;span style=&#34;color:#00f&#34;&gt;ShowImage&lt;/span&gt;(m)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This not only compiles (🙌) but successfully runs (😅)…but doesn&amp;#8217;t display anything 😢 … or does it? 🤔&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the Go execution window the &lt;code&gt;Program exited&lt;/code&gt; is lower down the page:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/image01.png&#34; alt=&#34;image01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and if you right-click over the blank space you can see there&amp;#8217;s an image there, and inspecting this with developer tools shows it&amp;#8217;s a 256x256 &lt;strong&gt;transparent&lt;/strong&gt; image. That alpha thingy… setting it to zero means the image is transparent!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s try again and set the alpha level this time:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;image/color&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;golang.org/x/tour/pic&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; Image &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt;{}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;ColorModel&lt;/span&gt;() color.Model {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; color.RGBAModel
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;Bounds&lt;/span&gt;() image.Rectangle {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; image.&lt;span style=&#34;color:#00f&#34;&gt;Rect&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;256&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;256&lt;/span&gt;)
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;At&lt;/span&gt;(x,y &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) color.Color {
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; r,g,b,a &lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt; = &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; ,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
    b=&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(x)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(y)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	a=b
&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; color.RGBA{r,g,b,a}
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	m &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; Image{}
	pic.&lt;span style=&#34;color:#00f&#34;&gt;ShowImage&lt;/span&gt;(m)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;🎉 TADA! 🎉&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/image02.png&#34; alt=&#34;image02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can muck about with the other colour values too:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;At&lt;/span&gt;(x,y &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) color.Color {
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; r,g,b,a &lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt; = &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; ,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	b=&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(&lt;span style=&#34;color:#008000&#34;&gt;float64&lt;/span&gt;(y)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0.2&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(x)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	r=&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(&lt;span style=&#34;color:#008000&#34;&gt;float64&lt;/span&gt;(y)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0.5&lt;/span&gt;)
&lt;/span&gt;	a=b
	
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; color.RGBA{r,g,b,a}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/image03.png&#34; alt=&#34;image03&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i Image) &lt;span style=&#34;color:#00f&#34;&gt;At&lt;/span&gt;(x,y &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) color.Color {
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; r,g,b,a &lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt; = &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; ,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	b=&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(&lt;span style=&#34;color:#008000&#34;&gt;float64&lt;/span&gt;(y)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4.25&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(x&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;) 
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	r=&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(&lt;span style=&#34;color:#008000&#34;&gt;float64&lt;/span&gt;(y)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt;)
&lt;/span&gt;	a=b
	
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; color.RGBA{r,g,b,a}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/07/image04.png&#34; alt=&#34;image04&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E07 - Readers</title>
      <link>https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e07-readers/</link>
      <pubDate>2020-07-01</pubDate>
      
      <guid>https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e07-readers/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/methods/21&#34;&gt;A Tour of Go : Readers&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m not intending to pick holes in the Tour…but it&amp;#8217;s not helping itself ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For an introductory text, it makes a ton of assumptions about the user. Here it introduces Readers, and the explanation is good—but the example code looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	r &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;NewReader&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Hello, Reader!&amp;#34;&lt;/span&gt;)

	b &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;n = %v err = %v b = %v\n&amp;#34;&lt;/span&gt;, n, err, b)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;b[:n] = %q\n&amp;#34;&lt;/span&gt;, b[:n])
&lt;/span&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; io.EOF {
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;break&lt;/span&gt;
		}
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;n = &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; err = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt; b = [&lt;span style=&#34;color:#666&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;111&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;82&lt;/span&gt;]
b[:n] = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Hello, R&amp;#34;&lt;/span&gt;
n = &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; err = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt; b = [&lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;82&lt;/span&gt;]
b[:n] = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;eader!&amp;#34;&lt;/span&gt;
n = &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; err = EOF b = [&lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;82&lt;/span&gt;]
b[:n] = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Perhaps this alphabet-soup of symbols and characters is idiomatic, but for a learner text this would be a bit nicer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	r &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;NewReader&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Hello, Reader!&amp;#34;&lt;/span&gt;)

	b &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;--\nBytes populated = %v\tError = %v\tRaw bytes = %v\n&amp;#34;&lt;/span&gt;, n, err, b)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Bytes string representation = %q\n&amp;#34;&lt;/span&gt;, b[:n])
&lt;/span&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; io.EOF {
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;break&lt;/span&gt;
		}
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;111&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;82&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Hello, R&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;82&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;eader!&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;	Error = EOF	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;82&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This has two benefits:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34;&gt;
&lt;li&gt;
&lt;p&gt;illustrates the values being populated each time and their role&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;explains why &lt;code&gt;Printf&lt;/code&gt; of &lt;code&gt;b&lt;/code&gt; returns the raw bytes the first time (it uses the &lt;code&gt;%v&lt;/code&gt; &lt;a href=&#34;https://golang.org/pkg/fmt/&#34;&gt;formatting verb&lt;/a&gt; to show &lt;code&gt;the value in a default format&lt;/code&gt;), and recognisable characters the second time (it uses &lt;code&gt;%q&lt;/code&gt; to show &lt;code&gt;a double-quoted string safely escaped with Go syntax&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Side note: &lt;code&gt;b := make([]byte, 8)&lt;/code&gt; creates a slice of eight bytes, but this could be a larger or smaller amount; the source Reader will keep filling it until we&amp;#8217;ve processed it all, e.g.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bigger&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;b &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;21&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;113&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;103&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;117&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;113&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Lbh penpxrq gur pbqr!&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;	Error = EOF	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smaller&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;b &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;API server listening at: &lt;span style=&#34;color:#666&#34;&gt;127.0.0.1&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;21293&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Lbh &amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;112&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;penp&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;113&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;xrq &amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;103&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;117&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;gur &amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;113&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;pbqr&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;	Error = EOF	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_exercise_readers&#34;&gt;Exercise: Readers&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/methods/22&#34;&gt;A Tour of Go : Exercise: Readers&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Implement a Reader type that emits an infinite stream of the ASCII character &#39;A&#39;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A bit of a head-scratcher this one, because the exercise didn&amp;#8217;t follow previous code examples that were the basis on which to write it. Took a bit of tinkering but here it is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r MyReader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt; (b []&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {
	b[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]=&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Set the first offset of the byte slice that&amp;#8217;s passed to us to the required &lt;code&gt;A&lt;/code&gt; value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return the length populated (1) and &lt;code&gt;nil&lt;/code&gt; which denotes that we&amp;#8217;re not at EOF and thus it acts as an infinite stream&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The exercise includes external code to validate, but we can also print the output - so long as we realise that it will never end! Here&amp;#8217;s a version where we deliberately return the wrong answer (repeating &lt;code&gt;AB&lt;/code&gt; instead of just &lt;code&gt;A&lt;/code&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;golang.org/x/tour/reader&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; MyReader &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt;{}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r MyReader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b []&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {
	b[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;
	b[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	r &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; MyReader{}

	b &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;--\nBytes populated = %v\tError = %v\tRaw bytes = %v\n&amp;#34;&lt;/span&gt;, n, err, b)
		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Bytes string representation = %q\n&amp;#34;&lt;/span&gt;, b[:n])
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; io.EOF {
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;break&lt;/span&gt;
		}
	}
	reader.&lt;span style=&#34;color:#00f&#34;&gt;Validate&lt;/span&gt;(MyReader{})
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;66&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AB&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;66&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AB&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;66&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AB&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Bytes populated = &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;	Error = &amp;lt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;&amp;gt;	Raw bytes = [&lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;66&lt;/span&gt;]
Bytes &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; representation = &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;AB&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
[&lt;span style=&#34;&#34;&gt;…………&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_exercise_rot13reader&#34;&gt;Exercise: rot13Reader&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/methods/23&#34;&gt;A Tour of Go : Exercise: rot13Reader&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ROT13&#34;&gt;ROT13&lt;/a&gt; is a blast back to the past of my early days on the internet 8-) You take each character and offset it by 13. Since there are 26 letters in the alphabet if you ROT13 and ROT13&amp;#8217;d phrase you end up with the original.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This part of the exercise is fine:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;modifying the stream by applying the rot13 substitution cipher to all alphabetical characters.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The pseudo-code I want to do is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For each character in the input&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add 13 to the ASCII value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If its &amp;gt; 26 then subtract 26&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But this bit had me a bit stuck&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Implement a rot13Reader that implements io.Reader and reads from an io.Reader&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the previous exercise I implemented a &lt;code&gt;Read&lt;/code&gt; method for the &lt;code&gt;MyReader&lt;/code&gt; type&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r MyReader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b []&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So let&amp;#8217;s try that same pattern again (TBH I&amp;#8217;m flailing a bit here with my functions, methods, and implementations):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r rot13Reader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;[]) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;&#34;&gt;#&lt;/span&gt; rot13
.&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;rot13.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;: missing function body
.&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;rot13.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;33&lt;/span&gt;: syntax &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;: unexpected [, expecting comma or )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Hmmm odd. Simple typo at fault (which is why copy &amp;amp; paste wins out over trying to memorise this stuff 😉) - &lt;code&gt;s/byte[]/[]byte&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r rot13Reader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b []&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So here&amp;#8217;s the first working cut - it doesn&amp;#8217;t actually do anything about the ROT13 yet but it builds on the more verbose &lt;code&gt;Printf&lt;/code&gt; that I show above to show a Reader reading a Reader:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; rot13Reader &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	r io.Reader
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r rot13Reader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b []&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		
&lt;/span&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; io.EOF {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; n,io.EOF
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; n,&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		}
&lt;/span&gt;	}
	
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	s &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;NewReader&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Lbh penpxrq gur pbqr!&amp;#34;&lt;/span&gt;)
	r &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; rot13Reader{s}
	io.&lt;span style=&#34;color:#00f&#34;&gt;Copy&lt;/span&gt;(os.Stdout, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;r)
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Line 16: invoke the &lt;code&gt;Read&lt;/code&gt; function of the &lt;code&gt;io.Reader&lt;/code&gt;, reading directly into the variable &lt;code&gt;b&lt;/code&gt; that was passed to us.&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Note that &lt;code&gt;rot13Reader&lt;/code&gt; is a &lt;code&gt;struct&lt;/code&gt;, and so we invoke &lt;code&gt;r.r.Read&lt;/code&gt;. If we invoke &lt;code&gt;r.Read&lt;/code&gt; then we are just calling outself (r here being the &lt;code&gt;rot13Reader&lt;/code&gt;, for which this function &lt;strong&gt;is&lt;/strong&gt; the Reader!)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 18-19: If the source Reader has told us we reached the end then return the same - number of bytes populated, and an EOF error&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 21: If there&amp;#8217;s more data to read then just return the number of bytes populated and &lt;code&gt;nil&lt;/code&gt; error so that the caller will continue to Read from us until all the data&amp;#8217;s been processed&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The output of this is to &lt;code&gt;stdout&lt;/code&gt; using &lt;a href=&#34;https://golang.org/pkg/io/#Copy&#34;&gt;io.Copy&lt;/a&gt; which takes a Reader as its source, hence the output at this stage is the unmodified string:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;Lbh penpxrq gur pbqr!&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now let&amp;#8217;s do the ROT13 bit. We want to take each byte we read and transform it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If it&amp;#8217;s an ASCII A-Za-z character add 13 to it. If it&amp;#8217;s &amp;gt;26 then subtract 26 to wrap around the value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ASCII#Printable_characters&#34;&gt;ASCII values&lt;/a&gt; are 65-90 (A-Z) and 97-122 (a-z).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s the first cut of the code. It loops over each of the values in the returned slice from the Reader and applies the above logic to them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r rot13Reader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b []&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; b {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; b[i]
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;				fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\nSource byte %v\tascii: %q&amp;#34;&lt;/span&gt;, a, a)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;				&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// * https://en.wikipedia.org/wiki/ASCII#Printable_characters[ASCII values] are 65-90 (A-Z) and 97-122 (a-z).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;90&lt;/span&gt;) {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;					a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;					&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#666&#34;&gt;90&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;						a = a &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;					}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;					fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\tTRANSFORMED Upper case : Source byte %v\tascii: %q&amp;#34;&lt;/span&gt;, a, a)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;				} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;97&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;122&lt;/span&gt;) {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;					a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;					&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#666&#34;&gt;122&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;						a = a &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;					}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;					fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\tTRANSFORMED Lower case : Source byte %v\tascii: %q&amp;#34;&lt;/span&gt;, a, a)
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;				}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			b[i] = a
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		}
&lt;/span&gt;
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; io.EOF {
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; n, io.EOF
		}
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; n, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;
	}

}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Applying this to a test string:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;NewReader&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Why did the chicken cross the road? Gb trg gb gur bgure fvqr! / Jul qvq gur puvpxra pebff gur ebnq? To get to the other side!&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;works correctly:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;87&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;	TRANSFORMED Upper &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;74&lt;/span&gt;		ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;J&amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;104&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;	TRANSFORMED Lower &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;117&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;121&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;	TRANSFORMED Lower &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;108&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;	TRANSFORMED Lower &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;113&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;105&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;	TRANSFORMED Lower &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;118&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;	TRANSFORMED Lower &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;113&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;116&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;	TRANSFORMED Lower &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;103&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;104&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;	TRANSFORMED Lower &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;117&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;
Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;101&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;	TRANSFORMED Lower &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; : Source &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;114&lt;/span&gt;	ascii: &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And so the source&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;Why did the chicken cross the road&lt;span style=&#34;&#34;&gt;?&lt;/span&gt; Gb trg gb gur bgure fvqr! &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; Jul qvq gur puvpxra pebff gur ebnq&lt;span style=&#34;&#34;&gt;?&lt;/span&gt; To get to the other side!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;is correctly translated into:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;Jul qvq gur puvpxra pebff gur ebnq&lt;span style=&#34;&#34;&gt;?&lt;/span&gt; To get to the other side! &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; Why did the chicken cross the road&lt;span style=&#34;&#34;&gt;?&lt;/span&gt; Gb trg gb gur bgure fvqr!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now let&amp;#8217;s see if we can tidy this up a little bit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Instead of iterating over the entire slice (&lt;code&gt;range b&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; b {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; b[i]
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; {&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We actually know how many bytes to process because this is returned by the Reader. This means we can also remove the check on a zero byte (which was spamming my debug output hence the check for it)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; b[i]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let&amp;#8217;s encapsulate the transformation out into its own function&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r rot13Reader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b []&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			b[i] = &lt;span style=&#34;color:#00f&#34;&gt;rot13&lt;/span&gt;(b[i])
&lt;/span&gt;		}

		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; io.EOF {
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; n, io.EOF
		}
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; n, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;
	}

}

&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;rot13&lt;/span&gt;(a &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// https://en.wikipedia.org/wiki/ASCII#Printable_characters
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// ASCII values are 65-90 (A-Z) and 97-122 (a-z)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;90&lt;/span&gt;) {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#666&#34;&gt;90&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			a = a &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;97&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;122&lt;/span&gt;) {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#666&#34;&gt;122&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;			a = a &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So the final version (and I&amp;#8217;d be interested to know if it can be optimised further) looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; rot13Reader &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	r io.Reader
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (r rot13Reader) &lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b []&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) (n &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		n, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; r.r.&lt;span style=&#34;color:#00f&#34;&gt;Read&lt;/span&gt;(b)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
			b[i] = &lt;span style=&#34;color:#00f&#34;&gt;rot13&lt;/span&gt;(b[i])
		}

		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; io.EOF {
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; n, io.EOF
		}
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; n, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;
	}

}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;rot13&lt;/span&gt;(a &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;) &lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; {
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// https://en.wikipedia.org/wiki/ASCII#Printable_characters
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// ASCII values are 65-90 (A-Z) and 97-122 (a-z)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;65&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;90&lt;/span&gt;) {
		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#666&#34;&gt;90&lt;/span&gt; {
			a = a &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt;
		}
	} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;97&lt;/span&gt;) &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (a &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;122&lt;/span&gt;) {
		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#666&#34;&gt;122&lt;/span&gt; {
			a = a &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;26&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	s &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;NewReader&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Lbh penpxrq gur pbqr!&amp;#34;&lt;/span&gt;)
	r &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; rot13Reader{s}
	io.&lt;span style=&#34;color:#00f&#34;&gt;Copy&lt;/span&gt;(os.Stdout, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;r)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and …&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;You cracked the code!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E06 - Errors</title>
      <link>https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/</link>
      <pubDate>2020-07-01</pubDate>
      
      <guid>https://rmoff.net/2020/07/01/learning-golang-some-rough-notes-s01e06-errors/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/methods/20&#34;&gt;A Tour of Go : Exercise: Errors&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Like Interfaces, the Tour didn&amp;#8217;t really do it for me on Errors either. Too absract, and not enough explanation of the code examples for my liking. It also doesn&amp;#8217;t cover the &lt;a href=&#34;https://golang.org/pkg/errors/&#34;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; package which other tutorial do. I&amp;#8217;m not clear if that&amp;#8217;s because the errors package isn&amp;#8217;t used much, or the Tour focusses only on teaching the raw basics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m quickly learning to head to &lt;code&gt;gobyexample.com&lt;/code&gt; each time for more reference on things that aren&amp;#8217;t making sense (along with &lt;a href=&#34;https://www.calhoun.io/&#34; class=&#34;bare&#34;&gt;https://www.calhoun.io/&lt;/a&gt; too). The &lt;a href=&#34;https://gobyexample.com/errors&#34;&gt;errors&lt;/a&gt; page on GoByExample is a good one, and I like how it links through to the Go Playground with each example. The Go Blog&amp;#8217;s &lt;a href=&#34;https://blog.golang.org/error-handling-and-go&#34;&gt;Error handling and Go&lt;/a&gt; is also a good reference, and &lt;a href=&#34;https://blog.golang.org/go1.13-errors&#34;&gt;this blog&lt;/a&gt; has some recent updates for Go 1.13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Once I&amp;#8217;d gone through the additional links the errors exercise was OK to figure out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; ErrNegativeSqrt &lt;span style=&#34;color:#b00040&#34;&gt;float64&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (e ErrNegativeSqrt) &lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cannot Sqrt negative number: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;float64&lt;/span&gt;(e))
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Sqrt&lt;/span&gt;(x &lt;span style=&#34;color:#b00040&#34;&gt;float64&lt;/span&gt;) (&lt;span style=&#34;color:#b00040&#34;&gt;float64&lt;/span&gt;, &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;) {
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\n--\nSqrt called with value: %v\n&amp;#34;&lt;/span&gt;, x)
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; x &amp;lt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; {
		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\t%v is less than zero. Returning with error.\n&amp;#34;&lt;/span&gt;, x)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#00f&#34;&gt;ErrNegativeSqrt&lt;/span&gt;(x)
	}
	guess &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1.0&lt;/span&gt;
	limit &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &amp;lt; limit; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
		adj &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; (guess&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;guess &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt; x) &lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; guess)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; result &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; guess &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; guess; result &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; x {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\t✅Guess %d is correct:\t%g\n&amp;#34;&lt;/span&gt;, i, guess)
			&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; guess, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;
		} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; result &amp;gt; x {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\t🔺Guess %d is too high:\t%g\n&amp;#34;&lt;/span&gt;, i, guess)
			guess &lt;span style=&#34;color:#666&#34;&gt;-=&lt;/span&gt; adj
		} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\t🔻Guess %d is too low:\t%g\n&amp;#34;&lt;/span&gt;, i, guess)
			guess &lt;span style=&#34;color:#666&#34;&gt;-=&lt;/span&gt; adj
		}
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; guess, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt;

}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; []&lt;span style=&#34;color:#b00040&#34;&gt;float64&lt;/span&gt;{&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;} {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; result, ok &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Sqrt&lt;/span&gt;(x); ok &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;-&amp;gt; result: %v\n&amp;#34;&lt;/span&gt;, result)
		} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;** ERROR %v&amp;#34;&lt;/span&gt;,ok.&lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;())
		}
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Sqrt called with value: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; is less than zero. Returning with &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;.
&lt;span style=&#34;color:#666&#34;&gt;**&lt;/span&gt; ERROR cannot Sqrt negative number: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Sqrt called with value: &lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔻&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; is too low:	&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔺&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; is too high:	&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔺&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; is too high:	&lt;span style=&#34;color:#666&#34;&gt;3.4&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔺&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; is too high:	&lt;span style=&#34;color:#666&#34;&gt;3.023529411764706&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔺&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; is too high:	&lt;span style=&#34;color:#666&#34;&gt;3.00009155413138&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;🔺&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; is too high:	&lt;span style=&#34;color:#666&#34;&gt;3.000000001396984&lt;/span&gt;
	&lt;span style=&#34;&#34;&gt;✅&lt;/span&gt;Guess &lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; is correct:	&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&amp;gt; result: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Try it out: &lt;a href=&#34;https://play.golang.org/p/mLa5RqwYckb&#34; class=&#34;bare&#34;&gt;https://play.golang.org/p/mLa5RqwYckb&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This bit had me puzzled:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Note: A call to fmt.Sprint(e) inside the Error method will send the program into an infinite loop. You can avoid this by converting e first: fmt.Sprint(float64(e)). Why?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If I changed it to&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (e ErrNegativeSqrt) &lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cannot Sqrt negative number: %v&amp;#34;&lt;/span&gt;,e)
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;then running it in the Tour window failed (as expected)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Sqrt called with value: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; is less than zero. Returning with &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;.

Program exited: status &lt;span style=&#34;color:#666&#34;&gt;2.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Running it in VSCode gave another error:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;runtime: goroutine stack exceeds &lt;span style=&#34;color:#666&#34;&gt;1000000000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt; limit
fatal &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;: stack overflow&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and sticking a print debug into the function shows that it&amp;#8217;s recursively called:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (e ErrNegativeSqrt) &lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ErrNegativeSqrt.Error&amp;#34;&lt;/span&gt;)
&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cannot Sqrt negative number: %v&amp;#34;&lt;/span&gt;,e)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Sqrt called with value: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; is less than zero. Returning with &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;.
ErrNegativeSqrt.Error
ErrNegativeSqrt.Error
ErrNegativeSqrt.Error
ErrNegativeSqrt.Error
ErrNegativeSqrt.Error
ErrNegativeSqrt.Error
[&lt;span style=&#34;&#34;&gt;…&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But… I don&amp;#8217;t understand why. StackOverflow turns up &lt;a href=&#34;https://stackoverflow.com/questions/27474907/why-would-a-call-to-fmt-sprinte-inside-the-error-method-result-in-an-infinit&#34;&gt;this explanation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;fmt.Sprint(e)&lt;code&gt; will call `e.Error()&lt;/code&gt; to convert the value e to a string. If the &lt;code&gt;Error()&lt;/code&gt; method calls `fmt.Sprint(e&lt;/code&gt;),` then the program recurses until out of memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can break the recursion by converting the e to a value without a String or Error method.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Thus &lt;code&gt;e&lt;/code&gt; is converted to &lt;code&gt;float64&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (e ErrNegativeSqrt) &lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cannot Sqrt negative number: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;float64&lt;/span&gt;(e))
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/27474907/why-would-a-call-to-fmt-sprinte-inside-the-error-method-result-in-an-infinit#comment86089457_27475316&#34;&gt;This comment&lt;/a&gt; offers a neat alternative too:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Isn&amp;#8217;t it enough to convert e to a type which may have a String/Error method that doesn&amp;#8217;t recurse infinitely?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And hence specifying a different &lt;a href=&#34;https://golang.org/pkg/fmt/&#34;&gt;verb&lt;/a&gt; works:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (e ErrNegativeSqrt) &lt;span style=&#34;color:#00f&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;cannot Sqrt negative number: %f&amp;#34;&lt;/span&gt;,e)
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;--&lt;/span&gt;
Sqrt called with value: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;
	&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; is less than zero. Returning with &lt;span style=&#34;color:#b00040&#34;&gt;error&lt;/span&gt;.
&lt;span style=&#34;color:#666&#34;&gt;**&lt;/span&gt; ERROR cannot Sqrt negative number: &lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;9.000000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E05 - Interfaces</title>
      <link>https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/</link>
      <pubDate>2020-06-30</pubDate>
      
      <guid>https://rmoff.net/2020/06/30/learning-golang-some-rough-notes-s01e05-interfaces/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/methods/9&#34;&gt;A Tour of Go : Interfaces&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This page really threw me, for several reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The text notes that there&amp;#8217;s an error (&lt;em&gt;so why don&amp;#8217;t they fix it?&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The provided code doesn&amp;#8217;t run (presumably because of the above error)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s not clear if this is a deliberate error to illustrate a point, or just a snafu&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;Learning Go : Background&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In addition, there&amp;#8217;s no indication as to the purpose of the code, so it&amp;#8217;s really hard to follow what it&amp;#8217;s supposed to be illustrating. Is the &lt;code&gt;type&lt;/code&gt; interface declaration at the top deliberately before &lt;code&gt;main&lt;/code&gt; and all the subsequent &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;func&lt;/code&gt; declarations? What&amp;#8217;s the significance of this? Is there a significance of this?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A general confusion I&amp;#8217;ve had with many of the Tour tutorials is the use of maths functions to illustrate concepts. I mean, I probably &lt;strong&gt;should&lt;/strong&gt; know what this …&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (v &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;Vertex) &lt;span style=&#34;color:#00f&#34;&gt;Abs&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;float64&lt;/span&gt; {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; math.&lt;span style=&#34;color:#00f&#34;&gt;Sqrt&lt;/span&gt;(v.X&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;v.X &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; v.Y&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;v.Y)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;…should return, but it&amp;#8217;s an added mental overhead to grokking what&amp;#8217;s going on. Sometimes stuff has to be done with numbers but a lot of the illustrations around methods &amp;amp; functions could easily have been done with strings IMHO.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To get some kind of understanding of interfaces I found &lt;a href=&#34;https://www.calhoun.io/how-do-interfaces-work-in-go/&#34; class=&#34;bare&#34;&gt;https://www.calhoun.io/how-do-interfaces-work-in-go/&lt;/a&gt; and &lt;a href=&#34;https://gobyexample.com/interfaces&#34; class=&#34;bare&#34;&gt;https://gobyexample.com/interfaces&lt;/a&gt; very good, and the latter links to &lt;a href=&#34;https://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go&#34; class=&#34;bare&#34;&gt;https://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go&lt;/a&gt; which is also very useful and goes into a ton more detail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Golang Tour tutorials have been really clear up until this point, so I&amp;#8217;m hoping that this was just an aberration :)&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_exercise_stringers&#34;&gt;Exercise: Stringers&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉https://tour.golang.org/methods/18[A Tour of Go: Exercise: Stringers]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I quite enjoyed this one, even though I still had to Google for some help. I got that I needed a function to implement the &lt;code&gt;String()&lt;/code&gt; method for &lt;code&gt;IPAddr&lt;/code&gt; (which is there in the help text too but I didn&amp;#8217;t notice, which goes to show I should spend longer reading the questions)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {

}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Within this I needed to take the four parts of the IP address and concatenate them with a &lt;code&gt;.&lt;/code&gt; separator. Feeling rather proud of myself I came up with this which nicely handled each part of the IP address:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; v
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	}
&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;but failed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;.&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;prog.&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt;: invalid operation: a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;v&lt;/span&gt; (mismatched types &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; and &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So let&amp;#8217;s try casting the type:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
&lt;/span&gt;	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This executed successfully, but didn&amp;#8217;t work:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;loopback: &lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So let&amp;#8217;s add some debug:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Value: %v %v\n&amp;#34;&lt;/span&gt;, v, &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v))
&lt;/span&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This gives:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;Value: 
Value: &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
Value: &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
Value: &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
loopback: &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So the value is showing as empty, which is odd, because we know it&amp;#8217;s there. Let&amp;#8217;s try more debug:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value: %v \tstring(value): %v\n&amp;#34;&lt;/span&gt;, v,  &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v))
&lt;/span&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): 
value: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;OK, so the value we&amp;#8217;re getting isn&amp;#8217;t the IP address pieces… because we made a mistake in the &lt;code&gt;for&lt;/code&gt; statement and we&amp;#8217;re getting the &lt;em&gt;index&lt;/em&gt;, not the &lt;em&gt;value&lt;/em&gt;. We&amp;#8217;re also getting a blank for the string, but we&amp;#8217;ll worry about that in a moment. Let&amp;#8217;s fix the &lt;code&gt;for&lt;/code&gt; statement first. Using the underscore we can ignore the index and store the actual value in &lt;code&gt;v&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;/span&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value: %v \tstring(value): %v\n&amp;#34;&lt;/span&gt;, v,  &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v))
		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;value: &lt;span style=&#34;color:#666&#34;&gt;127&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): &lt;span style=&#34;&#34;&gt;&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): 
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): 
value: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value): &lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We&amp;#8217;re getting somewhere.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What about this pesky blank string though when we try to cast the integer to a string? Courtesy of &lt;a href=&#34;https://www.calhoun.io/6-tips-for-using-strings-in-go/&#34;&gt;6 Tips for Using Strings in Go&lt;/a&gt; and specifically the &lt;em&gt;Convert ints (or any data type) into strings&lt;/em&gt; section I realised that &lt;code&gt;string()&lt;/code&gt; wasn&amp;#8217;t the way to do it. What &lt;code&gt;string()&lt;/code&gt; is doing is returning the ASCII character of the given value. Check out the output if I bump up the value in the &lt;code&gt;string&lt;/code&gt; value in the &lt;code&gt;Printf&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value: %v \tstring(value+64): %v\n&amp;#34;&lt;/span&gt;, v,  &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;))
&lt;/span&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;value: &lt;span style=&#34;color:#666&#34;&gt;127&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;): &lt;span style=&#34;&#34;&gt;¿&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;): &lt;span style=&#34;&#34;&gt;@&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;): &lt;span style=&#34;&#34;&gt;@&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; 	&lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(value&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;64&lt;/span&gt;): A&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Maybe this was mentioned in the Tour and I missed it, but in doing the type conversion I&amp;#8217;d referred back to &lt;a href=&#34;https://tour.golang.org/basics/13&#34;&gt;Type conversions&lt;/a&gt; and it&amp;#8217;s not covered there.
So instead of &lt;code&gt;string()&lt;/code&gt; we can use &lt;a href=&#34;https://golang.org/pkg/strconv/&#34;&gt;strconv&lt;/a&gt; or &lt;a href=&#34;https://golang.org/pkg/fmt/#Sprintf&#34;&gt;&lt;code&gt;Sprintf&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;value: %v \tfmt.Sprintf(value): %v\n&amp;#34;&lt;/span&gt;, v, fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,v))
&lt;/span&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;string&lt;/span&gt;(v)
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;value: &lt;span style=&#34;color:#666&#34;&gt;127&lt;/span&gt; 	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(value): &lt;span style=&#34;color:#666&#34;&gt;127&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(value): &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; 	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(value): &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
value: &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; 	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(value): &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we&amp;#8217;re getting somewhere! Let&amp;#8217;s use this &lt;code&gt;Sprintf&lt;/code&gt; in building the &lt;code&gt;a&lt;/code&gt; variable too, and add in a &lt;code&gt;.&lt;/code&gt; in the format string:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%d.&amp;#34;&lt;/span&gt;,v)
&lt;/span&gt;	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;loopback: &lt;span style=&#34;color:#666&#34;&gt;127.0.0.1&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Look at that! We&amp;#8217;re nearly there. Just the trailing &lt;code&gt;.&lt;/code&gt; to get rid of now, which a perusal of the &lt;a href=&#34;https://golang.org/pkg/strings/&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt; package turns up a function &lt;a href=&#34;https://golang.org/pkg/strings/#TrimRight&#34;&gt;&lt;code&gt;TrimRight&lt;/code&gt;&lt;/a&gt; that should do the trick:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
&lt;span style=&#34;display:block;width:100%;background-color:#e5e5e5&#34;&gt;		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%d.&amp;#34;&lt;/span&gt;,v)
&lt;/span&gt;	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;TrimRight&lt;/span&gt;(a,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So the final code looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;type&lt;/span&gt; IPAddr [&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;byte&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; (i IPAddr) &lt;span style=&#34;color:#00f&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt; {
	a &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; i {
		a = a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; fmt.&lt;span style=&#34;color:#00f&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%d.&amp;#34;&lt;/span&gt;,v)
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;TrimRight&lt;/span&gt;(a,&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)
}


&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	hosts &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]IPAddr{
		&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;loopback&amp;#34;&lt;/span&gt;:  {&lt;span style=&#34;color:#666&#34;&gt;127&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;},
		&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;googleDNS&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;},
	}
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; name, ip &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; hosts {
		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%v: %v\n&amp;#34;&lt;/span&gt;, name, ip)
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And the output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;loopback: &lt;span style=&#34;color:#666&#34;&gt;127.0.0.1&lt;/span&gt;
googleDNS: &lt;span style=&#34;color:#666&#34;&gt;8.8.8.8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;😃&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E04 - Function Closures</title>
      <link>https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e04-function-closures/</link>
      <pubDate>2020-06-29</pubDate>
      
      <guid>https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e04-function-closures/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/moretypes/25&#34;&gt;A Tour of Go : Function Closures&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So far the Tour has been 🤔 and 🧐 and even 🤨 but function closures had me 🤯 …&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Each of the words on the page made sense but strung together in a sentence didn&amp;#8217;t really make any sense to me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;Learning Go : Background&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Google resources threw up some nice explanations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://gobyexample.com/closures&#34; class=&#34;bare&#34;&gt;https://gobyexample.com/closures&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I like this site as it links all its examples to &lt;a href=&#34;https://play.golang.org/p/66Lgw9iIIch&#34;&gt;The Go Playground&lt;/a&gt; where you can try out each code block&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://tleyden.github.io/blog/2016/12/20/understanding-function-closures-in-go/&#34; class=&#34;bare&#34;&gt;http://tleyden.github.io/blog/2016/12/20/understanding-function-closures-in-go/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This comment was particularly useful&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Essentially you can think of them like &lt;strong&gt;stateful functions&lt;/strong&gt;, in the sense that they encapsulate state.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It made things click a bit for me, more than the abstract alphabet soup that other examples used :)&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This one gets into some more hands-on examples&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.calhoun.io/5-useful-ways-to-use-closures-in-go/&#34; class=&#34;bare&#34;&gt;https://www.calhoun.io/5-useful-ways-to-use-closures-in-go/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It also acted as a spoiler for the &lt;a href=&#34;https://tour.golang.org/moretypes/26&#34;&gt;function closure exercise&lt;/a&gt; since that was the first example it gives &lt;code&gt;:)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;fibonacci&lt;/span&gt;() &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; {
	f1 &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
	f2 &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt;() &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; {
		f1,f2 = f2, (f1&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;f2)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; f1
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I tweaked the version that &lt;a href=&#34;https://www.calhoun.io/5-useful-ways-to-use-closures-in-go/&#34;&gt;I&amp;#8217;d seen&lt;/a&gt; so that the return values stated at zero&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;144&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;233&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;377&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;610&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;987&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1597&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2584&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;4181&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E03 - Maps</title>
      <link>https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e03-maps/</link>
      <pubDate>2020-06-29</pubDate>
      
      <guid>https://rmoff.net/2020/06/29/learning-golang-some-rough-notes-s01e03-maps/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/moretypes/23&#34;&gt;A Tour of Go : Exercise - Maps&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Implement WordCount&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is probably bread-and-butter for any seasoned programmer, but I enjoyed the simple process and satisfaction of breaking the problem down into steps to solve using what the tutorial had just covered. Sketching out the logic in pseudo-code first, I figured that I wanted to do this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For each word in the phrase:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Check if the word exists in the map already&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create it if it doesn&amp;#8217;t&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add one to the map value&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;Learning Go : Background&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Using &lt;code&gt;Printf&lt;/code&gt; it was useful to check on how it was executing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;WordCount&lt;/span&gt;(s &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; {
	w &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)

	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;Fields&lt;/span&gt;(s) {
		fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Index: %d value %v\n&amp;#34;&lt;/span&gt;,i, v)
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; _, o &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; w[v]; o &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt; {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\tExisting map found for %v with value %d\n&amp;#34;&lt;/span&gt;,v,w[v])
			w[v] = w[v] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
		} &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;\tCreating new map for %v with value 1\n&amp;#34;&lt;/span&gt;,v)
			w[v] = &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
		}
	}

	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; w
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I liked that the tutorial uses tests to check what you&amp;#8217;ve done, and shows the expected output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PASS
 &lt;span style=&#34;color:#00f&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;I am learning Go!&amp;#34;&lt;/span&gt;) = 
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Go!&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;am&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;learning&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;}
PASS
 &lt;span style=&#34;color:#00f&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;The quick brown fox jumped over the lazy dog.&amp;#34;&lt;/span&gt;) = 
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;The&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;brown&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;dog.&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fox&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;jumped&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;lazy&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;over&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;quick&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;the&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;}
PASS
 &lt;span style=&#34;color:#00f&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;I ate a donut. Then I ate another donut.&amp;#34;&lt;/span&gt;) = 
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Then&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;another&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ate&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;donut.&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;}
PASS
 &lt;span style=&#34;color:#00f&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;A man a plan a canal panama.&amp;#34;&lt;/span&gt;) = 
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;canal&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;man&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;panama.&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;plan&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Looking at the pseudo-code and what Golang will handle for you automagically it can be reduced to this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For each word in the phrase:&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;del&gt;Check if the word exists in the map already&lt;/del&gt;&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;del&gt;Create it if it doesn&amp;#8217;t&lt;/del&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add one to the map value (implicitly create the map entry if it doesn&amp;#8217;t already exist)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;WordCount&lt;/span&gt;(s &lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; {
	w &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#b00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;)

	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; strings.&lt;span style=&#34;color:#00f&#34;&gt;Fields&lt;/span&gt;(s) {
		w[v] = w[v] &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;
	}

	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; w
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
the underscore character, representing a required variable that you&amp;#8217;re not going to use, is pretty useful.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E02 - Slices</title>
      <link>https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/</link>
      <pubDate>2020-06-25</pubDate>
      
      <guid>https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e02-slices/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;Learning Go : Background&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/moretypes/7&#34;&gt;A Tour of Go : Slices&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Slices made sense, until I got to &lt;a href=&#34;https://tour.golang.org/moretypes/11&#34;&gt;&lt;em&gt;Slice length and capacity&lt;/em&gt;&lt;/a&gt;. Two bits puzzled me in this code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	s &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;}
	&lt;span style=&#34;color:#00f&#34;&gt;printSlice&lt;/span&gt;(s)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=6 cap=6 [2 3 5 7 11 13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// --
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Slice the slice to give it zero length.
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	s = s[:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
	&lt;span style=&#34;color:#00f&#34;&gt;printSlice&lt;/span&gt;(s)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=0 cap=6 []
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// --
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Extend its length.
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	s = s[:&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;]
	&lt;span style=&#34;color:#00f&#34;&gt;printSlice&lt;/span&gt;(s)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=4 cap=6 [2 3 5 7]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// --
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Drop its first two values.
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	s = s[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;:]
	&lt;span style=&#34;color:#00f&#34;&gt;printSlice&lt;/span&gt;(s)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=2 cap=4 [5 7]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;printSlice&lt;/span&gt;(s []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) {
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;len=%d cap=%d %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(s), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(s), s)
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First up, and again this is my non-coding background coming through, but if &lt;code&gt;s&lt;/code&gt; starts off as something&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;}
&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and then we change it to something else&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s = s[:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt; []&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;how can it revert to something based on its previous incarnation?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s = s[:&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;]
&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Which eventually made sense to me once it was explained that because &lt;code&gt;s&lt;/code&gt; is a slice, it is a pointer to the underlying array. This is explained &lt;a href=&#34;https://tour.golang.org/moretypes/9&#34;&gt;here&lt;/a&gt;, and so&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;is building an array &lt;strong&gt;and&lt;/strong&gt; declaring a slice on it in the same statement. It&amp;#8217;s a more concise way of doing something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;myArray &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;}
s &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; myArray[:]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When we appear to reassign &lt;code&gt;s&lt;/code&gt; to a new value&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s = s[:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It&amp;#8217;s actually declaring &lt;code&gt;s&lt;/code&gt; as a slice as a before, &lt;strong&gt;based on the pointer against the original array&lt;/strong&gt;. We can infer this from the fact that the &lt;em&gt;capacity&lt;/em&gt; of the slice remains as 6&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s = s[:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt; len=&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; cap=&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; []&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and thus when we extend it, it&amp;#8217;s still against the original array that we were pointing to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s = s[:&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;]
&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt; len=&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; cap=&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So &lt;code&gt;s&lt;/code&gt; is a slice on top of the same array each time, just with a different definition (thus the &lt;em&gt;length&lt;/em&gt; changes, not the &lt;em&gt;capacity&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The second bit that puzzled me was, given the above explanation of &lt;code&gt;s&lt;/code&gt; being a pointer to the same array, how can resizing it down and then up still retain the values and capacity…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s = s[:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=0 cap=6 []
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;s = s[:&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;]
&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt; len=&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; cap=&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;whilst also resizing it down and up &lt;em&gt;not&lt;/em&gt; retain the values and capacity…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s = s[&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;:]
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=2 cap=4 [5 7]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;s = s[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;]
&lt;span style=&#34;color:#666&#34;&gt;//&lt;/span&gt; len=&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; cap=&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The answer is related to the first point above - pointers. When we declare the slice and increase the lower bound (&lt;code&gt;[2:]&lt;/code&gt;) we&amp;#8217;re actually &lt;strong&gt;moving the offset of the pointer against the underlying array&lt;/strong&gt;. Any subsequent references are now based on the pointer to this offset, and not the original one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s another example that I worked through to help figure it out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;(try it on &lt;a href=&#34;https://play.golang.org/p/hO5QJzy2q2n&#34;&gt;Go playground&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	myArray &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;}

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y is a slice on myArray
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// With no bounds specified it defaults to the lowest (zero) and 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  highest (five) of the array
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// There are six entries (len=6) and the array that it points to 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  has six entries (cap=6)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	y &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; myArray[:]
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;y       len %d\tcap %d\tvalue %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(y), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(y),y)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;myArray len %d\tcap %d\tvalue %v\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(myArray), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(myArray),myArray)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y       len 6	cap 6	value [2 3 5 7 11 13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// myArray len 6	cap 6	value [2 3 5 7 11 13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y is a slice against the same array that y *pointed to* previously
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// This time we take the first four entries (len=4). The slice is still
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  pointing to the same original array which has six entries (cap=6)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	y = y[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;]
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;y       len %d\tcap %d\tvalue %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(y), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(y),y)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;myArray len %d\tcap %d\tvalue %v\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(myArray), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(myArray),myArray)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y       len 4	cap 6	value [2 3 5 7]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// myArray len 6	cap 6	value [2 3 5 7 11 13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y is a slice against the same array that y *pointed to* previously
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// This time we take no entries (len=0). The slice is still
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  pointing to the same original array which has six entries (cap=6)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	y = y[:&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;y       len %d\tcap %d\tvalue %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(y), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(y),y)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;myArray len %d\tcap %d\tvalue %v\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(myArray), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(myArray),myArray)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y       len 0	cap 6	value []
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// myArray len 6	cap 6	value [2 3 5 7 11 13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Now we do something different from the above pattern. We shift the 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  point to which y points, and now it starts from the fifth position
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  of the underlying array (it&amp;#39;s zero based so fifth position=4). 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// There are two entries (five and six) so len=2, and because we&amp;#39;re now 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  actually pointing to the array starting at the second entry the capacity
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  changes too (cap=2)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	y = y[&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt;]
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;y       len %d\tcap %d\tvalue %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(y), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(y),y)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;myArray len %d\tcap %d\tvalue %v\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(myArray), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(myArray),myArray)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y       len 2	cap 2	value [11 13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// myArray len 6	cap 6	value [2 3 5 7 11 13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Now that we&amp;#39;ve shifted the pointer to a different offset in the source array
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  our bounds have different references. 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// This refers to the second position (zero based, so 1) in the array but starting
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//  from the redefined start offset that we created in the above slice 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	y = y[&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;]
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;y       len %d\tcap %d\tvalue %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(y), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(y),y)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;myArray len %d\tcap %d\tvalue %v\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(myArray), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(myArray),myArray)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y       len 1	cap 1	value [13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// myArray len 6	cap 6	value [2 3 5 7 11 13]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Since the slice is just a pointer to the underlying array we can change the array and 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// the slice will reflect this
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	myArray[&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;]=&lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;y       len %d\tcap %d\tvalue %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(y), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(y),y)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;myArray len %d\tcap %d\tvalue %v\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(myArray), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(myArray),myArray)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y       len 1	cap 1	value [100]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// myArray len 6	cap 6	value [2 3 5 7 11 100]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	

	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Conversely, changing the slice value reflects in the array too
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	y[&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]=&lt;span style=&#34;color:#666&#34;&gt;200&lt;/span&gt;
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;y       len %d\tcap %d\tvalue %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(y), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(y),y)
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;myArray len %d\tcap %d\tvalue %v\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(myArray), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(myArray),myArray)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// y       len 1	cap 1	value [200]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// myArray len 6	cap 6	value [2 3 5 7 11 200]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.golang.org/slices-intro&#34;&gt;This blog post&lt;/a&gt; goes into some lower-level stuff around Slices that was very useful. A concept it uses that I&amp;#8217;d not come across yet was the underscore, which is explained well in &lt;a href=&#34;https://stackoverflow.com/a/27764432/350613&#34;&gt;this StackOverflow answer&lt;/a&gt; (and then gets covered soon after in the Tour [&lt;a href=&#34;https://tour.golang.org/moretypes/17&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Other references that were useful:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.callicoder.com/golang-slices/&#34; class=&#34;bare&#34;&gt;https://www.callicoder.com/golang-slices/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/50713681/extend-the-length-and-keep-the-value&#34; class=&#34;bare&#34;&gt;https://stackoverflow.com/questions/50713681/extend-the-length-and-keep-the-value&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/43294449/decreasing-slice-capacity&#34; class=&#34;bare&#34;&gt;https://stackoverflow.com/questions/43294449/decreasing-slice-capacity&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/47256103/golang-slice-variable-assign-from-tutorial&#34; class=&#34;bare&#34;&gt;https://stackoverflow.com/questions/47256103/golang-slice-variable-assign-from-tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_appending_to_a_slice_why_doesnt_the_capacity_match_the_length&#34;&gt;Appending to a slice - why doesn&amp;#8217;t the capacity match the length?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/moretypes/15&#34;&gt;A Tour of Go : Appending to a slice&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This all made sense, except for when I noticed the &lt;code&gt;cap&lt;/code&gt; (6) wasn&amp;#8217;t in line with the &lt;code&gt;len&lt;/code&gt; (5) in the final example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; s []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=0 cap=0 []
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	
	s = &lt;span style=&#34;color:#008000&#34;&gt;append&lt;/span&gt;(s, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=1 cap=1 [0]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
	s = &lt;span style=&#34;color:#008000&#34;&gt;append&lt;/span&gt;(s, &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=2 cap=2 [0 1]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
	s = &lt;span style=&#34;color:#008000&#34;&gt;append&lt;/span&gt;(s, &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;)
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// len=5 cap=6 [0 1 2 3 4]
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Poking around a bit more with this I saw that the capacity doubled each time it needed to be increased:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; s []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;
	
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i&lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt;; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt; {
		s = &lt;span style=&#34;color:#008000&#34;&gt;append&lt;/span&gt;(s,i)
		&lt;span style=&#34;color:#00f&#34;&gt;printSlice&lt;/span&gt;(s)
	}
}


&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;printSlice&lt;/span&gt;(s []&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) {
	fmt.&lt;span style=&#34;color:#00f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;len=%d \tcap=%d \n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#008000&#34;&gt;len&lt;/span&gt;(s), &lt;span style=&#34;color:#008000&#34;&gt;cap&lt;/span&gt;(s))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;len=&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;6&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;7&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;9&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;11&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;14&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;16&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;17&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;19&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; 
len=&lt;span style=&#34;color:#666&#34;&gt;20&lt;/span&gt; 	cap=&lt;span style=&#34;color:#666&#34;&gt;32&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is discussed in this &lt;a href=&#34;https://stackoverflow.com/a/23532202/350613&#34;&gt;StackOverflow answer&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_exercise_slices&#34;&gt;Exercise: Slices&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/moretypes/18&#34; class=&#34;bare&#34;&gt;https://tour.golang.org/moretypes/18&lt;/a&gt; [A Tour of Go : Exercise: Slices]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This dropped me in at the fairly deep end, and I only just kept my head above water ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I went back to previous examples, particularly &lt;a href=&#34;https://tour.golang.org/moretypes/13&#34;&gt;Creating a slice with make&lt;/a&gt; and &lt;a href=&#34;https://tour.golang.org/moretypes/14&#34;&gt;Slices of slices&lt;/a&gt;, but I couldn&amp;#8217;t figure out how to combine the two concepts. This kind of thing didn&amp;#8217;t work&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;p &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt;,dx),dy)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;d have liked to see a hints or work answer for the exercise, but with the power of Google it was easy enough to find a few :) These answers got me on the right tracks to first create the slice and then create within it iteratively the additional slice (which to be fair the exercise text does specify, with hindsight)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;golang.org/x/tour/pic&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Pic&lt;/span&gt;(dx, dy &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;) [][]&lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt; {
	p &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([][]&lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt;,dy)
	
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p {
		p[i] = &lt;span style=&#34;color:#008000&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt;,dx)
	}

	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; p
}

&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;() {
	pic.&lt;span style=&#34;color:#00f&#34;&gt;Show&lt;/span&gt;(Pic)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When you run this you get a nice blue square. Now to add some pattern to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Just to experiment with what was going on I tried something, anything … :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p[y] {
			p[y][x]=(&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(x)&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(y))
		}
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/06/slice01.png&#34; alt=&#34;slice01&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Casting &lt;code&gt;uint8&lt;/code&gt; was necessary (and is mentioned as a hint in the exercise text) because otherwise it fails  with &lt;code&gt;./prog.go:14:11: cannot use x + y (type int) as type uint8 in assignment&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I thought that this would work, to declare the variable types first, but it didn&amp;#8217;t and threw the same error.&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; x,y &lt;span style=&#34;color:#b00040&#34;&gt;uint8&lt;/span&gt;
	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p[y] {
			p[y][x]=(x&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;y)
		}
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Other patterns:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p {
		&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;range&lt;/span&gt; p[y] {
			p[y][x]=(&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(x)&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;uint8&lt;/span&gt;(y))
		}
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://rmoff.net/images/2020/06/slice02.png&#34; alt=&#34;slice02&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Learning Golang (some rough notes) - S01E01 - Pointers</title>
      <link>https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/</link>
      <pubDate>2020-06-25</pubDate>
      
      <guid>https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e01-pointers/</guid>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://rmoff.net/images/2020/06/IMG_5277.jpeg" medium="image" type="image/jpg" width="100" height="100" />
      <description>&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;a href=&#34;https://rmoff.net/2020/06/25/learning-golang-some-rough-notes-s01e00/&#34;&gt;Learning Go : Background&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;👉 &lt;a href=&#34;https://tour.golang.org/moretypes/1&#34;&gt;A Tour of Go : Pointers&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;ve never used pointers before. Found plenty of good resources about &lt;strong&gt;what&lt;/strong&gt; they are, e.g.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.callicoder.com/golang-pointers/&#34; class=&#34;bare&#34;&gt;https://www.callicoder.com/golang-pointers/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dave.cheney.net/2017/04/26/understand-go-pointers-in-less-than-800-words-or-your-money-back&#34; class=&#34;bare&#34;&gt;https://dave.cheney.net/2017/04/26/understand-go-pointers-in-less-than-800-words-or-your-money-back&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But &lt;strong&gt;why&lt;/strong&gt;? It&amp;#8217;s like explaining patiently to someone that 2+2 = 4, without really explaining &lt;strong&gt;why&lt;/strong&gt; would we want to add two numbers together in the first place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;(side note: I bet a ton of devrel material could be made more accessible by addressing the huge number of assumptions that are made, explicit and implicit, in explanations given)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;My colleague Ricardo Ferreira gave me this great explanation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pointers in Go has to do with three main things:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Garbage Collection&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Go is a garbage collected language just like Java. However, it uses of some less sophisticated algorithms to reclaim memory space than Java that tries to figure out too much doing heap transverse and thus spending too much CPU on it. Go is meant to provide better performance and because of this it tries to share the responsibility with the developer about how to track references. And if a developer uses a pointer; it is the indication about which references need to be reclaimed given its scope. It uses something called reference counting to figure that out.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encapsulation (Information Hiding)&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pointers are particularly good for structs, which represents complex data structures. By returning structs rather than the actual value developers can ensure that only the function that created the struct can act upon it.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Immutability&lt;/p&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You better than anyone will understand this. Structs represents records and therefore their occurance needs to be immutable. You can&amp;#8217;t change what happened in the past and thus; you are not supposed to change structs&amp;#8201;&amp;#8212;&amp;#8201;unless the function that created the struct provides a write operation. So in Go, we use the concept of interface methods that are nothing more than function pointers to a struct.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I also got some useful feedback from people on Twitter:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Pointers in Go.&lt;br&gt;&lt;br&gt;I grok *what* they are and *how* to use them (&lt;a href=&#34;https://t.co/0nMV16r0Wz&#34;&gt;https://t.co/0nMV16r0Wz&lt;/a&gt; sorted me out there) - but can a kind soul point me to a good resource that explains *why* I would use them? Why don&amp;#39;t I just pass variables around instead?&lt;/p&gt;&amp;mdash; Robin Moffatt 🍻🏃🥓 (@rmoff) &lt;a href=&#34;https://twitter.com/rmoff/status/1275777088268709889?ref_src=twsrc%5Etfw&#34;&gt;June 24, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Pointers are just indirection. For size, think of loading GB of data. Without indirection, you&amp;#39;d have to copy all of it every time. Pointer lets you say &amp;quot;here&amp;#39;s where to find the data&amp;quot; rather than &amp;quot;here&amp;#39;s a copy of the data&amp;quot;.&lt;/p&gt;&amp;mdash; ewencp (@ewencp) &lt;a href=&#34;https://twitter.com/ewencp/status/1275842242972803072?ref_src=twsrc%5Etfw&#34;&gt;June 24, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The main reason is performance and memory management. Say you have a large complex object that you want to use as a parameter to a method. If you don&amp;#39;t use a pointer then the entire object is copied and the copy is fed into the method. This means allocating and configuring a ...&lt;/p&gt;&amp;mdash; Ray Skywalker (@RaySaltrelli) &lt;a href=&#34;https://twitter.com/RaySaltrelli/status/1275833679412068352?ref_src=twsrc%5Etfw&#34;&gt;June 24, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>